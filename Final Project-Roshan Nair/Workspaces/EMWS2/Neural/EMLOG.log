*------------------------------------------------------------*
User:                AutoLogon
Date:                August 11, 2022
Time:                17:02:08
Site:                70192439
Platform:            X64_8PRO
Maintenance Release: 9.04.01M3P062415
EM Version:          14.1
* 
MPRINT(EM_DIAGRAM):    data _null_;
MPRINT(EM_DIAGRAM):   call symput('NLDATE', strip(put(date(), NLDATE.)));
MPRINT(EM_DIAGRAM):   call symput('NLTIME', strip(put(datetime(), NLTIME.)));
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   data _null_;
MPRINT(EM_DIAGRAM):   nldate= sasmsg("sashelp.dmine", "log_date_note", 'N', "August 11, 2022" );
MPRINT(EM_DIAGRAM):   nltime= sasmsg("sashelp.dmine", "log_time_note", 'N', "17:01:49" );
MPRINT(EM_DIAGRAM):   put "*------------------------------------------------------------*";
MPRINT(EM_DIAGRAM):   put "* Training Log";
MPRINT(EM_DIAGRAM):   put nldate;
MPRINT(EM_DIAGRAM):   put nltime;
MPRINT(EM_DIAGRAM):   put "*------------------------------------------------------------*";
MPRINT(EM_DIAGRAM):   run;
*------------------------------------------------------------*
* Training Log
Date:                August 11, 2022
Time:                17:01:49
*------------------------------------------------------------*
MPRINT(EM_DIAGRAM):    filename O2BDNLEV "C:\Users\AutoLogon\Desktop\Roshan Seneca\SEM 2\ROSHAN SEM 2\BAN 210\Final Project\Final Project-Roshan Nair\Workspaces\EMWS2\Neural\EMTRAIN.out" encoding="UTF-8" NOBOM;
MPRINT(EM_DIAGRAM):   proc printto print=O2BDNLEV new;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    filename _LOG "C:\Users\AutoLogon\Desktop\Roshan Seneca\SEM 2\ROSHAN SEM 2\BAN 210\Final Project\Final Project-Roshan Nair\Workspaces\EMWS2\Neural\EMLOG.log" encoding="UTF-8" NOBOM;
MPRINT(EM_DIAGRAM):    data _null_;
MPRINT(EM_DIAGRAM):   call symput('NLDATE', strip(put(date(), NLDATE.)));
MPRINT(EM_DIAGRAM):   call symput('NLTIME', strip(put(datetime(), NLTIME.)));
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   data _null_;
MPRINT(EM_DIAGRAM):   nldate= sasmsg("sashelp.dmine", "log_date_note", 'N', "August 11, 2022" );
MPRINT(EM_DIAGRAM):   nltime= sasmsg("sashelp.dmine", "log_time_note", 'N', "17:01:50" );
MPRINT(EM_DIAGRAM):   file _LOG;
MPRINT(EM_DIAGRAM):   put "*------------------------------------------------------------*";
MPRINT(EM_DIAGRAM):   put "User:                AutoLogon";
MPRINT(EM_DIAGRAM):   put nldate;
MPRINT(EM_DIAGRAM):   put nltime;
MPRINT(EM_DIAGRAM):   put "Site:                70192439";
MPRINT(EM_DIAGRAM):   put "Platform:            X64_8PRO";
MPRINT(EM_DIAGRAM):   put "Maintenance Release: 9.04.01M3P062415";
MPRINT(EM_DIAGRAM):   put "EM Version:          14.1";
MPRINT(EM_DIAGRAM):   put "* ";
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    filename _LOGIN "C:\Users\AutoLogon\Desktop\Roshan Seneca\SEM 2\ROSHAN SEM 2\BAN 210\Final Project\Final Project-Roshan Nair\Workspaces\EMWS2\Neural\EMTRAIN.log" encoding="UTF-8" NOBOM;
MPRINT(EM_COPYFILE):   data _null_;
MPRINT(EM_COPYFILE):   length line $20000;
MPRINT(EM_COPYFILE):   file _LOG MOD lrecl=20000;
MPRINT(EM_COPYFILE):   fid=fopen("_LOGIN",'i',20000,'v');
MPRINT(EM_COPYFILE):   if fid > 0 then do;
MPRINT(EM_COPYFILE):   do while(^fread(fid));
MPRINT(EM_COPYFILE):   rlen = frlen(fid);
MPRINT(EM_COPYFILE):   rc= fget(fid,line,20000);
MPRINT(EM_COPYFILE):   start = length(line)-length(left(line))+1;
MPRINT(EM_COPYFILE):   line=strip(line);
MPRINT(EM_COPYFILE):   put @start line;
MPRINT(EM_COPYFILE):   end;
MPRINT(EM_COPYFILE):   if fid > 0 then rc=fclose(fid);
MPRINT(EM_COPYFILE):   end;
MPRINT(EM_COPYFILE):   run;
MPRINT(EM_DIAGRAM):  ;
MPRINT(EM_DIAGRAM):   filename _LOGIN;
MPRINT(EM_DIAGRAM):    data _null_;
MPRINT(EM_DIAGRAM):   file _LOG mod;
MPRINT(EM_DIAGRAM):   put _page_;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   filename _LOGIN "C:\Users\AutoLogon\Desktop\Roshan Seneca\SEM 2\ROSHAN SEM 2\BAN 210\Final Project\Final Project-Roshan Nair\Workspaces\EMWS2\Neural\EMSCORE.log" encoding="UTF-8" NOBOM;
MPRINT(EM_DIAGRAM):  ;
MPRINT(EM_DIAGRAM):   data _null_;
MPRINT(EM_DIAGRAM):   file _LOG mod;
MPRINT(EM_DIAGRAM):   put _page_;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    filename _LOGIN "C:\Users\AutoLogon\Desktop\Roshan Seneca\SEM 2\ROSHAN SEM 2\BAN 210\Final Project\Final Project-Roshan Nair\Workspaces\EMWS2\Neural\EMREPORT.log" encoding="UTF-8" NOBOM;
MPRINT(EM_DIAGRAM):  ;
MPRINT(EM_DIAGRAM):   filename _LOGIN;
MPRINT(EM_DIAGRAM):    filename _LOG;
MPRINT(EM_DIAGRAM):    filename _OUT "C:\Users\AutoLogon\Desktop\Roshan Seneca\SEM 2\ROSHAN SEM 2\BAN 210\Final Project\Final Project-Roshan Nair\Workspaces\EMWS2\Neural\EMOUTPUT.out" encoding="UTF-8" NOBOM;
MPRINT(EM_DIAGRAM):    data _null_;
MPRINT(EM_DIAGRAM):   call symput('NLDATE', strip(put(date(), NLDATE.)));
MPRINT(EM_DIAGRAM):   call symput('NLTIME', strip(put(datetime(), NLTIME.)));
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   data _null_;
MPRINT(EM_DIAGRAM):   nldate= sasmsg("sashelp.dmine", "log_date_note", 'N', "August 11, 2022" );
MPRINT(EM_DIAGRAM):   nltime= sasmsg("sashelp.dmine", "log_time_note", 'N', "17:01:50" );
MPRINT(EM_DIAGRAM):   file _OUT;
MPRINT(EM_DIAGRAM):   put "*------------------------------------------------------------*";
MPRINT(EM_DIAGRAM):   put "User:                AutoLogon";
MPRINT(EM_DIAGRAM):   put nldate;
MPRINT(EM_DIAGRAM):   put nltime;
MPRINT(EM_DIAGRAM):   put "*------------------------------------------------------------*";
MPRINT(EM_DIAGRAM):   put "* Training Output";
MPRINT(EM_DIAGRAM):   put "*------------------------------------------------------------*";
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    filename _OUTIN "C:\Users\AutoLogon\Desktop\Roshan Seneca\SEM 2\ROSHAN SEM 2\BAN 210\Final Project\Final Project-Roshan Nair\Workspaces\EMWS2\Neural\EMTRAIN.out" encoding="UTF-8" NOBOM;
MPRINT(EM_DIAGRAM):   ;
MPRINT(EM_COPYFILE):   data _null_;
MPRINT(EM_COPYFILE):   length line $20000;
MPRINT(EM_COPYFILE):   file _OUT MOD lrecl=20000;
MPRINT(EM_COPYFILE):   fid=fopen("_OUTIN",'i',20000,'v');
MPRINT(EM_COPYFILE):   if fid > 0 then do;
MPRINT(EM_COPYFILE):   do while(^fread(fid));
MPRINT(EM_COPYFILE):   rlen = frlen(fid);
MPRINT(EM_COPYFILE):   rc= fget(fid,line,20000);
MPRINT(EM_COPYFILE):   start = length(line)-length(left(line))+1;
MPRINT(EM_COPYFILE):   line=strip(line);
MPRINT(EM_COPYFILE):   put @start line;
MPRINT(EM_COPYFILE):   end;
MPRINT(EM_COPYFILE):   if fid > 0 then rc=fclose(fid);
MPRINT(EM_COPYFILE):   end;
MPRINT(EM_COPYFILE):   run;
MPRINT(EM_DIAGRAM):  ;
MPRINT(EM_DIAGRAM):   filename _OUTIN;
MPRINT(EM_DIAGRAM):    data _null_;
MPRINT(EM_DIAGRAM):   file _OUT mod;
MPRINT(EM_DIAGRAM):   put _page_;
MPRINT(EM_DIAGRAM):   put // "*------------------------------------------------------------*";
MPRINT(EM_DIAGRAM):   put "* Score Output";
MPRINT(EM_DIAGRAM):   put "*------------------------------------------------------------*";
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    filename _OUTIN "C:\Users\AutoLogon\Desktop\Roshan Seneca\SEM 2\ROSHAN SEM 2\BAN 210\Final Project\Final Project-Roshan Nair\Workspaces\EMWS2\Neural\EMSCORE.out" encoding="UTF-8" NOBOM;
MPRINT(EM_DIAGRAM):  ;
MPRINT(EM_DIAGRAM):   filename _OUTIN;
MPRINT(EM_DIAGRAM):    data _null_;
MPRINT(EM_DIAGRAM):   file _OUT mod;
MPRINT(EM_DIAGRAM):   put _page_;
MPRINT(EM_DIAGRAM):   put // "*------------------------------------------------------------*";
MPRINT(EM_DIAGRAM):   put "* Report Output";
MPRINT(EM_DIAGRAM):   put "*------------------------------------------------------------*";
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    filename _OUTIN "C:\Users\AutoLogon\Desktop\Roshan Seneca\SEM 2\ROSHAN SEM 2\BAN 210\Final Project\Final Project-Roshan Nair\Workspaces\EMWS2\Neural\EMREPORT.out" encoding="UTF-8" NOBOM;
MPRINT(EM_DIAGRAM):  ;
MPRINT(EM_DIAGRAM):   filename _OUTIN;
MPRINT(EM_DIAGRAM):    filename _OUT;
MPRINT(EM_DIAGRAM):    filename _emtool_ 'C:\Users\AutoLogon\Desktop\Roshan Seneca\SEM 2\ROSHAN SEM 2\BAN 210\Final Project\Final Project-Roshan Nair\Workspaces\EMWS2\Neural\EMRUNSTATUS.xml' encoding="UTF-8" NOBOM;
28052      proc freq data=EMWS2.Neural_VariableSet noprint;
MPRINT(EM_DIAGRAM):    proc freq data=EMWS2.Neural_VariableSet noprint;
28053      table ROLE*LEVEL/out=WORK.NeuralMETA;
MPRINT(EM_DIAGRAM):   table ROLE*LEVEL/out=WORK.NeuralMETA;
28054      run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 7 observations read from the data set EMWS2.NEURAL_VARIABLESET.
NOTE: The data set WORK.NEURALMETA has 3 observations and 4 variables.
NOTE: PROCEDURE FREQ used (Total process time):
      real time           0.06 seconds
      cpu time            0.03 seconds
 
 
28055      proc print data=WORK.NeuralMETA label noobs;
MPRINT(EM_DIAGRAM):   proc print data=WORK.NeuralMETA label noobs;
28056      var ROLE LEVEL COUNT;
MPRINT(EM_DIAGRAM):   var ROLE LEVEL COUNT;
28057      label ROLE = "%sysfunc(sasmsg(sashelp.dmine, meta_role_vlabel, NOQUOTE))" LEVEL = "%sysfunc(sasmsg(sashelp.dmine, meta_level_vlabel, NOQUOTE))" COUNT = "%sysfunc(sasmsg(sashelp.dmine, rpt_count_vlabel, NOQUOTE))";
MPRINT(EM_DIAGRAM):   label ROLE = "Role" LEVEL = "Measurement Level" COUNT = "Frequency Count";
28058      title9 ' ';
MPRINT(EM_DIAGRAM):   title9 ' ';
28059      title10 "%sysfunc(sasmsg(sashelp.dmine, rpt_varSummary_title  , NOQUOTE))";
MPRINT(EM_DIAGRAM):   title10 "Variable Summary";
MPRINT(EM_DIAGRAM):   run;
28060      run;
 
NOTE: There were 3 observations read from the data set WORK.NEURALMETA.
NOTE: The PROCEDURE PRINT printed page 7.
NOTE: PROCEDURE PRINT used (Total process time):
      real time           0.05 seconds
      cpu time            0.04 seconds
 
 
28061      title10;
MPRINT(EM_DIAGRAM):   title10;
28062      %let EMNORLEN = %DMNORLEN;
MPRINT(EM_DIAGRAM):
EMWS2.Varsel_TRAIN EMWS2.Varsel_TRAIN
EMWS2.Varsel_TRAIN EMWS2.Varsel_TRAIN EMWS2 Varsel_TRAIN
EMWS2.Varsel_TRAIN EMWS2.Varsel_TRAIN
EMWS2.Varsel_TRAIN EMWS2.Varsel_TRAIN EMWS2 Varsel_TRAIN
>>>>>>>>>>>>>> TARGET(   NAME='mpg'
                         ROLE='TARGET'
                         LEVEL='INTERVAL'
                         ORDER=''
                         CREATOR=''
                         FORMATTYPE='QUANTITY'
                         FAMILY=''
                         LOWERLIMIT=.
                         UPPERLIMIT=.
                         REPORT='N'
                         DISTRIBUTION=''
                         COMMENT=''
                         PRICE=.
                         TYPE='N'
                         LABEL=''
                         FORMAT='BEST12.0'
                         INFORMAT='BEST32.0'
                         INDEX='N'
                         INDEXTYPE='NONE'
                         LENGTH=8
                         USE='Y'
                      )[20619]
MPRINT(EM_DIAGRAM):
MPRINT(HPDM_PERFORMANCE):  ;
PERFORMANCE  DETAILS
MPRINT(EM_DIAGRAM):  ;
MPRINT(EM_DIAGRAM):    *------------------------------------------------------------* ;
MPRINT(EM_DIAGRAM):   * EM: DMDBClass Macro ;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------* ;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------* ;
MPRINT(EM_DIAGRAM):   * EM: DMDBVar Macro ;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------* ;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * EM: Create DMDB;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   proc dmdb batch data=EMWS2.Varsel_TRAIN dmdbcat=WORK.EM_DMDB maxlevel = 513 ;
MPRINT(EM_DIAGRAM):   var
MPRINT(DMDBVAR):   mpg
MPRINT(EM_DIAGRAM):  ;
MPRINT(EM_DIAGRAM):   target mpg ;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   quit;
MPRINT(EM_DIAGRAM):   *--- end code ---*;
WORK.EM_DMDB WORK.EM_DMDB
WORK.EM_DMDB WORK.EM_DMDB WORK EM_DMDB
MPRINT(EM_DIAGRAM):    proc datasets lib=EMWS2 nolist;
MPRINT(EM_DIAGRAM):   modify Neural_mpg_DD(type=PROFIT label= mpg);
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   quit;
MPRINT(EM_DIAGRAM):    *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * Neural: Determine decision variables for mpg;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   data WORK.Neural_SCORE;
MPRINT(EM_DIAGRAM):   set EMWS2.Varsel_TRAIN;
MPRINT(EM_DIAGRAM):   keep mpg;
MPRINT(EM_DIAGRAM):   keep 'P_mpg'n;
MPRINT(EM_DIAGRAM):   'P_mpg'n = 0.5;
MPRINT(EM_DIAGRAM):   if _N_=1 then do;
MPRINT(EM_DIAGRAM):   output;
MPRINT(EM_DIAGRAM):   stop;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    data EMWS2.Neural_mpg_DM;
MPRINT(EM_DIAGRAM):   set EMWS2.Neural_mpg_DM;
MPRINT(EM_DIAGRAM):   where _TYPE_ ^in('FREQ', 'BESTPROFIT', 'COMPUTEDPROFIT', 'EXPECTEDPROFIT', 'BESTLOSS', 'COMPUTEDLOSS', 'EXPECTEDLOSS', 'ROI', 'INVESTMENTCOST', 'MODELDECISION');
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    proc datasets lib=work nolist;
MPRINT(EM_DIAGRAM):   modify mpg(type=PROFIT label= mpg);
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   quit;
MPRINT(EM_DIAGRAM):    data EMWS2.Neural_mpg_DM;
MPRINT(EM_DIAGRAM):   set EMWS2.Neural_mpg_DM end=eof;
MPRINT(EM_DIAGRAM):   output;
MPRINT(EM_DIAGRAM):   if eof then do;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   run;
"No decisions defined for target "mpg"."
28123      proc print data = EMWS2.Neural_mpg_DM noobs label;
MPRINT(EM_DIAGRAM):    proc print data = EMWS2.Neural_mpg_DM noobs label;
28124      var _type_ variable label;
MPRINT(EM_DIAGRAM):   var _type_ variable label;
28125      where _type_ ^in('MATRIX', 'DECISION', 'TRAINPRIOR', 'DATAPRIOR', 'DECPRIOR');
MPRINT(EM_DIAGRAM):   where _type_ ^in('MATRIX', 'DECISION', 'TRAINPRIOR', 'DATAPRIOR', 'DECPRIOR');
28126      label _TYPE_ = "%sysfunc(sasmsg(sashelp.dmine, rpt_type_vlabel,     NOQUOTE))" VARIABLE = "%sysfunc(sasmsg(sashelp.dmine, rpt_variable_vlabel, NOQUOTE))" LABEL = "%sysfunc(sasmsg(sashelp.dmine, meta_label_vlabel, NOQUOTE))";
MPRINT(EM_DIAGRAM):   label _TYPE_ = "Type" VARIABLE = "Variable" LABEL = "Label";
28127      title9 ' ';
MPRINT(EM_DIAGRAM):   title9 ' ';
28128      title10 "%sysfunc(sasmsg(sashelp.dmine, rpt_predDecVars_title  , NOQUOTE))";
MPRINT(EM_DIAGRAM):   title10 "Predicted and decision variables";
MPRINT(EM_DIAGRAM):   run;
28129      run;
 
NOTE: There were 3 observations read from the data set EMWS2.NEURAL_MPG_DM.
      WHERE _type_ not in ('DATAPRIOR', 'DECISION', 'DECPRIOR', 'MATRIX', 'TRAINPRIOR');
NOTE: The PROCEDURE PRINT printed page 8.
NOTE: PROCEDURE PRINT used (Total process time):
      real time           0.03 seconds
      cpu time            0.04 seconds
 
 
28130      title10;
MPRINT(EM_DIAGRAM):   title10;
MPRINT(EM_DIAGRAM):    *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * Neural: Preparing metadata for training;
MPRINT(EM_DIAGRAM):   ;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   data WORK.M0CLQ85R;
MPRINT(EM_DIAGRAM):   set WORK.M0CLQ85R;
MPRINT(EM_DIAGRAM):   where(use = 'Y' or (role = 'INPUT' and use = 'D'));
MPRINT(EM_DIAGRAM):   if (role = 'REJECTED') then role = 'INPUT';
MPRINT(EM_DIAGRAM):   run;
NOTE: There were 3 observations read from the data set EMWS2.NEURAL_MPG_DD.
NOTE: The data set WORK.MPG has 3 observations and 1 variables.
NOTE: There were 3 observations read from the data set EMWS2.NEURAL_MPG_DD.
NOTE: The data set WORK.MPG has 3 observations and 1 variables.
28140      *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):    *------------------------------------------------------------*;
28141      * Neural: Create decision matrix;
MPRINT(EM_DIAGRAM):   * Neural: Create decision matrix;
28142      *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
28143      data WORK.mpg(label="mpg");
MPRINT(EM_DIAGRAM):   data WORK.mpg(label="mpg");
28144        length   mpg                                  8
28145                 ;
MPRINT(EM_DIAGRAM):   length mpg 8 ;
28146
28147       mpg=10;
MPRINT(EM_DIAGRAM):   mpg=10;
28148      output;
MPRINT(EM_DIAGRAM):   output;
28149       mpg=46.6;
MPRINT(EM_DIAGRAM):   mpg=46.6;
28150      output;
MPRINT(EM_DIAGRAM):   output;
28151       mpg=23.5238993710691;
MPRINT(EM_DIAGRAM):   mpg=23.5238993710691;
28152      output;
MPRINT(EM_DIAGRAM):   output;
28153      ;
MPRINT(EM_DIAGRAM):   ;
28154      run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: The data set WORK.MPG has 3 observations and 1 variables.
NOTE: DATA statement used (Total process time):
      real time           0.03 seconds
      cpu time            0.01 seconds
 
 
28155      proc datasets lib=work nolist;
MPRINT(EM_DIAGRAM):   proc datasets lib=work nolist;
28156      modify mpg(type=PROFIT label=mpg);
MPRINT(EM_DIAGRAM):   modify mpg(type=PROFIT label= mpg);
MPRINT(EM_DIAGRAM):   run;
28157      run;
 
NOTE: MODIFY was successful for WORK.MPG.DATA.
28158      quit;
MPRINT(EM_DIAGRAM):   quit;
 
NOTE: PROCEDURE DATASETS used (Total process time):
      real time           0.06 seconds
      cpu time            0.07 seconds
 
 
28159      data EM_Neural;
MPRINT(EM_DIAGRAM):   data EM_Neural;
28160      set EMWS2.Varsel_TRAIN(keep=
28161      G_horsepower PWR_displacement SQRT_weight acceleration model mpg origin);
MPRINT(EM_DIAGRAM):   set EMWS2.Varsel_TRAIN(keep= G_horsepower PWR_displacement SQRT_weight acceleration model mpg origin);
28162      run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 318 observations read from the data set EMWS2.PART_TRAIN.
NOTE: There were 318 observations read from the data set EMWS2.TRANS_TRAIN.
NOTE: View EMWS2.VARSEL_TRAIN.VIEW used (Total process time):
      real time           0.24 seconds
      cpu time            0.17 seconds
 
NOTE: There were 318 observations read from the data set EMWS2.IMPT_TRAIN.
NOTE: There were 318 observations read from the data set EMWS2.VARSEL_TRAIN.
NOTE: The data set WORK.EM_NEURAL has 318 observations and 7 variables.
NOTE: DATA statement used (Total process time):
      real time           0.28 seconds
      cpu time            0.18 seconds
 
 
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------* ;
MPRINT(EM_DIAGRAM):   * Neural: DMDBClass Macro ;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------* ;
28163      *------------------------------------------------------------* ;
28164      * Neural: DMDBClass Macro ;
28165      *------------------------------------------------------------* ;
28166      %macro DMDBClass;
28167          G_horsepower(ASC)
28168      %mend DMDBClass;
28169      *------------------------------------------------------------* ;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------* ;
28170      * Neural: DMDBVar Macro ;
MPRINT(EM_DIAGRAM):   * Neural: DMDBVar Macro ;
28171      *------------------------------------------------------------* ;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------* ;
28172      %macro DMDBVar;
28173          PWR_displacement SQRT_weight acceleration model mpg origin
28174      %mend DMDBVar;
28175      *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
28176      * Neural: Create DMDB;
MPRINT(EM_DIAGRAM):   * Neural: Create DMDB;
28177      *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
28178      proc dmdb batch data=WORK.EM_Neural
28179      dmdbcat=WORK.Neural_DMDB
28180      maxlevel = 513
28181      ;
MPRINT(EM_DIAGRAM):   proc dmdb batch data=WORK.EM_Neural dmdbcat=WORK.Neural_DMDB maxlevel = 513 ;
MPRINT(EM_DIAGRAM):   class
28182      class %DMDBClass;
MPRINT(DMDBCLASS):   G_horsepower(ASC)
MPRINT(EM_DIAGRAM):  ;
MPRINT(EM_DIAGRAM):   var
28183      var %DMDBVar;
MPRINT(DMDBVAR):   PWR_displacement SQRT_weight acceleration model mpg origin
MPRINT(EM_DIAGRAM):  ;
28184      target
28185      mpg
28186      ;
MPRINT(EM_DIAGRAM):   target mpg ;
28187      run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: Records processed = 318   Memory used = 511K.
NOTE: There were 318 observations read from the data set WORK.EM_NEURAL.
NOTE: PROCEDURE DMDB used (Total process time):
      real time           0.02 seconds
      cpu time            0.01 seconds
 
 
MPRINT(EM_DIAGRAM):   quit;
MPRINT(EM_DIAGRAM):   *--- end code ---*;
28188      quit;
28189      *--- end code ---*;
 
28190      *------------------------------------------------------------* ;
MPRINT(EM_DIAGRAM):    *------------------------------------------------------------* ;
28191      * Neural: Interval Input Variables Macro ;
MPRINT(EM_DIAGRAM):   * Neural: Interval Input Variables Macro ;
28192      *------------------------------------------------------------* ;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------* ;
28193      %macro INTINPUTS;
28194          PWR_displacement SQRT_weight acceleration model origin
28195      %mend INTINPUTS;
28196      *------------------------------------------------------------* ;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------* ;
28197      * Neural: Binary Inputs Macro ;
MPRINT(EM_DIAGRAM):   * Neural: Binary Inputs Macro ;
28198      *------------------------------------------------------------* ;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------* ;
28199      %macro BININPUTS;
28200
28201      %mend BININPUTS;
28202      *------------------------------------------------------------* ;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------* ;
28203      * Neural: Nominal Inputs Macro ;
MPRINT(EM_DIAGRAM):   * Neural: Nominal Inputs Macro ;
28204      *------------------------------------------------------------* ;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------* ;
28205      %macro NOMINPUTS;
28206          G_horsepower
28207      %mend NOMINPUTS;
28208      *------------------------------------------------------------* ;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------* ;
28209      * Neural: Ordinal Inputs Macro ;
MPRINT(EM_DIAGRAM):   * Neural: Ordinal Inputs Macro ;
28210      *------------------------------------------------------------* ;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------* ;
28211      %macro ORDINPUTS;
28212
28213      %mend ORDINPUTS;
28214      *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
28215      * Neural Network Training;
MPRINT(EM_DIAGRAM):   * Neural Network Training;
28216      ;
MPRINT(EM_DIAGRAM):   ;
28217      *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
28218      proc neural data=EM_Neural dmdbcat=WORK.Neural_DMDB
28219      validdata = EMWS2.Varsel_VALIDATE
28220      random=12345
28221      ;
MPRINT(EM_DIAGRAM):   proc neural data=EM_Neural dmdbcat=WORK.Neural_DMDB validdata = EMWS2.Varsel_VALIDATE random=12345 ;
28222      nloptions
28223      ;
MPRINT(EM_DIAGRAM):   nloptions ;
28224      performance alldetails noutilfile;
MPRINT(EM_DIAGRAM):   performance alldetails noutilfile;
28225      netopts
28226      decay=0;
MPRINT(EM_DIAGRAM):   netopts decay=0;
MPRINT(EM_DIAGRAM):   input
28227      input %INTINPUTS / level=interval id=intvl
MPRINT(INTINPUTS):   PWR_displacement SQRT_weight acceleration model origin
28228      ;
MPRINT(EM_DIAGRAM):   / level=interval id=intvl ;
MPRINT(EM_DIAGRAM):   input
28229      input %NOMINPUTS / level=nominal id=nom
MPRINT(NOMINPUTS):   G_horsepower
28230      ;
MPRINT(EM_DIAGRAM):   / level=nominal id=nom ;
28231      target
28232      mpg
28233      / level=interval id=intervalTargets
28234      bias
28235      ;
MPRINT(EM_DIAGRAM):   target mpg / level=interval id=intervalTargets bias ;
28236      arch MLP
28237      Hidden=5
28238      direct
28239      ;
MPRINT(EM_DIAGRAM):   arch MLP Hidden=5 direct ;
28240      Prelim 5 preiter=10
28241      pretime=3600
28242      Outest=EMWS2.Neural_PRELIM_OUTEST
28243      ;
MPRINT(EM_DIAGRAM):   Prelim 5 preiter=10 pretime=3600 Outest=EMWS2.Neural_PRELIM_OUTEST ;
NOTE:  Synchronizing the objectives and the Solution.
NOTE: LEVMAR Optimization cannot be completed.
NOTE: LEVMAR needs more than 10 iterations or 2147483647 function calls.
NOTE: LEVMAR Optimization cannot be completed.
NOTE: LEVMAR needs more than 10 iterations or 2147483647 function calls.
NOTE: LEVMAR Optimization cannot be completed.
NOTE: LEVMAR needs more than 10 iterations or 2147483647 function calls.
NOTE: LEVMAR Optimization cannot be completed.
NOTE: LEVMAR needs more than 10 iterations or 2147483647 function calls.
NOTE: LEVMAR Optimization cannot be completed.
NOTE: LEVMAR needs more than 10 iterations or 2147483647 function calls.
NOTE: The data set EMWS2.NEURAL_PRELIM_OUTEST has 11 observations and 98 variables.
28244      save network=EMWS2.Neural_NETWORK.dm_neural;
MPRINT(EM_DIAGRAM):   save network=EMWS2.Neural_NETWORK.dm_neural;
NOTE: Entry EMWS2.NEURAL_NETWORK.DM_NEURAL has been opened.
NOTE: Entry EMWS2.NEURAL_NETWORK.DM_NEURAL has been closed.
28245      train Maxiter=50
28246      maxtime=14400
28247      Outest=EMWS2.Neural_outest estiter=1
28248      Outfit=EMWS2.Neural_OUTFIT
28249      ;
MPRINT(EM_DIAGRAM):   train Maxiter=50 maxtime=14400 Outest=EMWS2.Neural_outest estiter=1 Outfit=EMWS2.Neural_OUTFIT ;
WARNING: LEVMAR Optimization cannot be completed.
NOTE: LEVMAR needs more than 50 iterations or 2147483647 function calls.
NOTE: The data set EMWS2.NEURAL_OUTEST has 136 observations and 98 variables.
NOTE: The data set EMWS2.NEURAL_OUTFIT has 104 observations and 36 variables.
28250      run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: The data set WORK.EM_NEURAL has 318 observations and 7 variables.
NOTE: The data set EMWS2.VARSEL_VALIDATE has . observations and 15 variables.
NOTE: There were 80 observations read from the data set EMWS2.PART_VALIDATE.
NOTE: There were 80 observations read from the data set EMWS2.TRANS_VALIDATE.
NOTE: View EMWS2.VARSEL_VALIDATE.VIEW used (Total process time):
      real time           2.61 seconds
      cpu time            1.32 seconds
 
NOTE: There were 80 observations read from the data set EMWS2.IMPT_VALIDATE.
NOTE: Closing the Neural Application.
NOTE: The PROCEDURE NEURAL printed pages 9-12.
NOTE: PROCEDURE NEURAL used (Total process time):
      real time           2.72 seconds
      cpu time            1.34 seconds
 
 
MPRINT(EM_DIAGRAM):   quit;
28251      quit;
 
28252      proc sort data=EMWS2.Neural_OUTFIT(where=(_iter_ ne . and _NAME_="OVERALL")) out=fit_Neural;
MPRINT(EM_DIAGRAM):    proc sort data=EMWS2.Neural_OUTFIT(where=(_iter_ ne . and _NAME_="OVERALL")) out=fit_Neural;
28253      by _VAVERR_;
MPRINT(EM_DIAGRAM):   by _VAVERR_;
28254      run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 52 observations read from the data set EMWS2.NEURAL_OUTFIT.
      WHERE (_iter_ not = .) and (_NAME_='OVERALL');
NOTE: The data set WORK.FIT_NEURAL has 52 observations and 36 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.03 seconds
      cpu time            0.03 seconds
 
 
28255      %GLOBAL ITER;
28256      data _null_;
MPRINT(EM_DIAGRAM):   data _null_;
28257      set fit_Neural(obs=1);
MPRINT(EM_DIAGRAM):   set fit_Neural(obs=1);
28258      call symput('ITER',put(_ITER_, 6.));
MPRINT(EM_DIAGRAM):   call symput('ITER',put(_ITER_, 6.));
28259      run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 1 observations read from the data set WORK.FIT_NEURAL.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.01 seconds
 
 
28260      data EMWS2.Neural_INITIAL;
MPRINT(EM_DIAGRAM):   data EMWS2.Neural_INITIAL;
28261      set EMWS2.Neural_outest(where=(_ITER_ eq &ITER and _OBJ_ ne .));
MPRINT(EM_DIAGRAM):   set EMWS2.Neural_outest(where=(_ITER_ eq 49 and _OBJ_ ne .));
28262      run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 1 observations read from the data set EMWS2.NEURAL_OUTEST.
      WHERE (_ITER_=49) and (_OBJ_ not = .);
NOTE: The data set EMWS2.NEURAL_INITIAL has 1 observations and 98 variables.
NOTE: DATA statement used (Total process time):
      real time           0.02 seconds
      cpu time            0.00 seconds
 
 
28263      *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):    *------------------------------------------------------------*;
28264      * Neural Network Model Selection;
MPRINT(EM_DIAGRAM):   * Neural Network Model Selection;
28265      ;
MPRINT(EM_DIAGRAM):   ;
28266      *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
28267      proc neural data=EM_Neural dmdbcat=WORK.Neural_DMDB
28268      validdata = EMWS2.Varsel_VALIDATE
28269      network = EMWS2.Neural_NETWORK.dm_neural
28270      random=12345
28271      ;
MPRINT(EM_DIAGRAM):   proc neural data=EM_Neural dmdbcat=WORK.Neural_DMDB validdata = EMWS2.Varsel_VALIDATE network = EMWS2.Neural_NETWORK.dm_neural random=12345 ;
NOTE: Entry EMWS2.NEURAL_NETWORK.DM_NEURAL has been opened.
NOTE: Entry EMWS2.NEURAL_NETWORK.DM_NEURAL has been closed.
28272      nloptions noprint;
MPRINT(EM_DIAGRAM):   nloptions noprint;
28273      performance alldetails noutilfile;
MPRINT(EM_DIAGRAM):   performance alldetails noutilfile;
28274      initial inest=EMWS2.Neural_INITIAL;
MPRINT(EM_DIAGRAM):   initial inest=EMWS2.Neural_INITIAL;
NOTE: The data set EMWS2.NEURAL_INITIAL has 1 observations and 98 variables.
28275      train tech=NONE;
MPRINT(EM_DIAGRAM):   train tech=NONE;
NOTE: No optimization performed.
28276      code file="C:\Users\AutoLogon\Desktop\Roshan Seneca\SEM 2\ROSHAN SEM 2\BAN 210\Final Project\Final Project-Roshan Nair\Workspaces\EMWS2\Neural\SCORECODE.sas"
28277      group=Neural
28278      ;
MPRINT(EM_DIAGRAM):   code file="C:\Users\AutoLogon\Desktop\Roshan Seneca\SEM 2\ROSHAN SEM 2\BAN 210\Final Project\Final Project-Roshan Nair\Workspaces\EMWS2\Neural\SCORECODE.sas" group=Neural ;
NOTE: External file C:\Users\AutoLogon\Desktop\Roshan Seneca\SEM 2\ROSHAN SEM 2\BAN 210\Final Project\Final Project-Roshan Nair\Workspaces\EMWS2\Neural\SCORECODE.sas opened.
28279      ;
MPRINT(EM_DIAGRAM):   ;
28280      code file="C:\Users\AutoLogon\Desktop\Roshan Seneca\SEM 2\ROSHAN SEM 2\BAN 210\Final Project\Final Project-Roshan Nair\Workspaces\EMWS2\Neural\RESIDUALSCORECODE.sas"
28281      group=Neural
28282      residual
28283      ;
MPRINT(EM_DIAGRAM):   code file="C:\Users\AutoLogon\Desktop\Roshan Seneca\SEM 2\ROSHAN SEM 2\BAN 210\Final Project\Final Project-Roshan Nair\Workspaces\EMWS2\Neural\RESIDUALSCORECODE.sas" group=Neural residual ;
NOTE: External file C:\Users\AutoLogon\Desktop\Roshan Seneca\SEM 2\ROSHAN SEM 2\BAN 210\Final Project\Final Project-Roshan Nair\Workspaces\EMWS2\Neural\RESIDUALSCORECODE.sas opened.
28284      ;
MPRINT(EM_DIAGRAM):   ;
28285      score data=EMWS2.Varsel_TRAIN out=_NULL_
NOTE: View EMWS2.VARSEL_TRAIN.VIEW used (Total process time):
      real time           0.12 seconds
      cpu time            0.14 seconds
 
28286      outfit=WORK.FIT1
28287      role=TRAIN
28288      outkey=EMWS2.Neural_OUTKEY;
MPRINT(EM_DIAGRAM):   score data=EMWS2.Varsel_TRAIN out=_NULL_ outfit=WORK.FIT1 role=TRAIN outkey=EMWS2.Neural_OUTKEY;
NOTE: The data set EMWS2.NEURAL_OUTKEY has 21 observations and 8 variables.
NOTE: The data set EMWS2.VARSEL_TRAIN has . observations and 15 variables.
NOTE: There were 318 observations read from the data set EMWS2.PART_TRAIN.
NOTE: There were 318 observations read from the data set EMWS2.TRANS_TRAIN.
NOTE: There were 318 observations read from the data set EMWS2.IMPT_TRAIN.
NOTE: The data set WORK.FIT1 has 2 observations and 23 variables.
28289      score data=EMWS2.Varsel_VALIDATE out=_NULL_
NOTE: View EMWS2.VARSEL_VALIDATE.VIEW used (Total process time):
      real time           0.17 seconds
      cpu time            0.15 seconds
 
28290      outfit=WORK.FIT2
28291      role=VALID
28292      outkey=EMWS2.Neural_OUTKEY;
MPRINT(EM_DIAGRAM):   score data=EMWS2.Varsel_VALIDATE out=_NULL_ outfit=WORK.FIT2 role=VALID outkey=EMWS2.Neural_OUTKEY;
NOTE: The data set EMWS2.NEURAL_OUTKEY has 21 observations and 8 variables.
NOTE: The data set EMWS2.VARSEL_VALIDATE has . observations and 15 variables.
NOTE: There were 80 observations read from the data set EMWS2.PART_VALIDATE.
NOTE: There were 80 observations read from the data set EMWS2.TRANS_VALIDATE.
NOTE: There were 80 observations read from the data set EMWS2.IMPT_VALIDATE.
NOTE: The data set WORK.FIT2 has 2 observations and 15 variables.
28293      run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: The data set WORK.EM_NEURAL has 318 observations and 7 variables.
NOTE: The data set EMWS2.VARSEL_VALIDATE has . observations and 15 variables.
NOTE: There were 80 observations read from the data set EMWS2.PART_VALIDATE.
NOTE: There were 80 observations read from the data set EMWS2.TRANS_VALIDATE.
NOTE: View EMWS2.VARSEL_VALIDATE.VIEW used (Total process time):
      real time           0.69 seconds
      cpu time            0.59 seconds
 
NOTE: There were 80 observations read from the data set EMWS2.IMPT_VALIDATE.
NOTE: Closing the Neural Application.
NOTE: PROCEDURE NEURAL used (Total process time):
      real time           0.73 seconds
      cpu time            0.64 seconds
 
 
MPRINT(EM_DIAGRAM):   quit;
28294      quit;
28295      data EMWS2.Neural_OUTFIT;
MPRINT(EM_DIAGRAM):   data EMWS2.Neural_OUTFIT;
28296      merge WORK.FIT1 WORK.FIT2;
MPRINT(EM_DIAGRAM):   merge WORK.FIT1 WORK.FIT2;
28297      run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 2 observations read from the data set WORK.FIT1.
NOTE: There were 2 observations read from the data set WORK.FIT2.
NOTE: The data set EMWS2.NEURAL_OUTFIT has 2 observations and 36 variables.
NOTE: DATA statement used (Total process time):
      real time           0.02 seconds
      cpu time            0.01 seconds
 
 
28298      data EMWS2.Neural_EMESTIMATE;
MPRINT(EM_DIAGRAM):   data EMWS2.Neural_EMESTIMATE;
28299      set EMWS2.Neural_outest;
MPRINT(EM_DIAGRAM):   set EMWS2.Neural_outest;
28300      if _type_ ^in('HESSIAN' 'GRAD');
MPRINT(EM_DIAGRAM):   if _type_ ^in('HESSIAN' 'GRAD');
28301      run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 136 observations read from the data set EMWS2.NEURAL_OUTEST.
NOTE: The data set EMWS2.NEURAL_EMESTIMATE has 52 observations and 98 variables.
NOTE: DATA statement used (Total process time):
      real time           0.06 seconds
      cpu time            0.01 seconds
 
 
28302      proc datasets lib=work nolist;
MPRINT(EM_DIAGRAM):   proc datasets lib=work nolist;
28303      delete EM_Neural;
MPRINT(EM_DIAGRAM):   delete EM_Neural;
28304      run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: Deleting WORK.EM_NEURAL (memtype=DATA).
28305      quit;
MPRINT(EM_DIAGRAM):   quit;
 
NOTE: PROCEDURE DATASETS used (Total process time):
      real time           0.03 seconds
      cpu time            0.03 seconds
 
 
28306      data EMWS2.Neural_PLOTDS(where=(_iter_ ne . and _NAME_="OVERALL"));
MPRINT(EM_DIAGRAM):    data EMWS2.Neural_PLOTDS(where=(_iter_ ne . and _NAME_="OVERALL"));
28307      set fit_Neural;
MPRINT(EM_DIAGRAM):   set fit_Neural;
28308      attrib _ITER_ label="%sysfunc(sasmsg(sashelp.dmine, rpt_trainiterations_vlabel  , NOQUOTE))";
MPRINT(EM_DIAGRAM):   attrib _ITER_ label="Training Iterations";
28309      attrib _NAME_ label="%sysfunc(sasmsg(sashelp.dmine, rpt_varsel_label_name  , NOQUOTE))";
MPRINT(EM_DIAGRAM):   attrib _NAME_ label="Name";
28310      run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 52 observations read from the data set WORK.FIT_NEURAL.
NOTE: The data set EMWS2.NEURAL_PLOTDS has 52 observations and 36 variables.
NOTE: DATA statement used (Total process time):
      real time           0.03 seconds
      cpu time            0.03 seconds
 
 
28311      proc sort data=EMWS2.Neural_PLOTDS;
MPRINT(EM_DIAGRAM):   proc sort data=EMWS2.Neural_PLOTDS;
28312      by _ITER_;
MPRINT(EM_DIAGRAM):   by _ITER_;
28313      run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 52 observations read from the data set EMWS2.NEURAL_PLOTDS.
NOTE: The data set EMWS2.NEURAL_PLOTDS has 52 observations and 36 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
28314      data EMWS2.Neural_PLOTDS;
MPRINT(EM_DIAGRAM):    data EMWS2.Neural_PLOTDS;
28315      set EMWS2.Neural_PLOTDS;
MPRINT(EM_DIAGRAM):   set EMWS2.Neural_PLOTDS;
28316      drop _MISC_;
MPRINT(EM_DIAGRAM):   drop _MISC_;
28317      drop _WRONG_;
MPRINT(EM_DIAGRAM):   drop _WRONG_;
28318      run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 52 observations read from the data set EMWS2.NEURAL_PLOTDS.
NOTE: The data set EMWS2.NEURAL_PLOTDS has 52 observations and 34 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
28319      data tempweight (drop= _tech_ _decay_ _seed_ _nobj_ _obj_ _objerr_ _averr_ _p_num_ where=(_type_ eq "PARMS" and _iter_ eq 49) );
MPRINT(EM_DIAGRAM):    data tempweight (drop= _tech_ _decay_ _seed_ _nobj_ _obj_ _objerr_ _averr_ _p_num_ where=(_type_ eq "PARMS" and _iter_ eq 49) );
28320      set EMWS2.Neural_EMESTIMATE;
MPRINT(EM_DIAGRAM):   set EMWS2.Neural_EMESTIMATE;
28321      run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 52 observations read from the data set EMWS2.NEURAL_EMESTIMATE.
NOTE: The data set WORK.TEMPWEIGHT has 1 observations and 90 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
28322      proc sort;
MPRINT(EM_DIAGRAM):   proc sort;
28323      by _name_;
MPRINT(EM_DIAGRAM):   by _name_;
28324      run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 1 observations read from the data set WORK.TEMPWEIGHT.
NOTE: The data set WORK.TEMPWEIGHT has 1 observations and 90 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
28325      proc transpose data=tempweight out=EMWS2.Neural_WEIGHTDS;
MPRINT(EM_DIAGRAM):   proc transpose data=tempweight out=EMWS2.Neural_WEIGHTDS;
28326      by _name_;
MPRINT(EM_DIAGRAM):   by _name_;
28327      run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 1 observations read from the data set WORK.TEMPWEIGHT.
NOTE: The data set EMWS2.NEURAL_WEIGHTDS has 88 observations and 3 variables.
NOTE: PROCEDURE TRANSPOSE used (Total process time):
      real time           0.02 seconds
      cpu time            0.03 seconds
 
 
28328      data EMWS2.Neural_WEIGHTDS;
MPRINT(EM_DIAGRAM):   data EMWS2.Neural_WEIGHTDS;
28329      set EMWS2.Neural_WEIGHTDS;
MPRINT(EM_DIAGRAM):   set EMWS2.Neural_WEIGHTDS;
28330      FROM = trim(left(scan(_LABEL_, 1, '->')));
MPRINT(EM_DIAGRAM):   FROM = trim(left(scan(_LABEL_, 1, '->')));
28331      TO = trim(left(scan(_LABEL_, 2, '>')));
MPRINT(EM_DIAGRAM):   TO = trim(left(scan(_LABEL_, 2, '>')));
28332      WEIGHT = COL1;
MPRINT(EM_DIAGRAM):   WEIGHT = COL1;
28333      if (TO eq '') or (FROM eq '') then delete;
MPRINT(EM_DIAGRAM):   if (TO eq '') or (FROM eq '') then delete;
28334      label _LABEL_ ="%sysfunc(sasmsg(sashelp.dmine, meta_label_vlabel  , NOQUOTE))" FROM = "%sysfunc(sasmsg(sashelp.dmine, rpt_from_vlabel  , NOQUOTE))" TO = "%sysfunc(sasmsg(sashelp.dmine, rpt_into_vlabel  , NOQUOTE))" WEIGHT =
28335         "%sysfunc(sasmsg(sashelp.dmine, rpt_weight_vlabel  , NOQUOTE))";
MPRINT(EM_DIAGRAM):   label _LABEL_ = "Label" FROM = "From" TO = "Into" WEIGHT = "Weight";
28336      keep FROM TO WEIGHT _LABEL_;
MPRINT(EM_DIAGRAM):   keep FROM TO WEIGHT _LABEL_;
28337      run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 88 observations read from the data set EMWS2.NEURAL_WEIGHTDS.
NOTE: The data set EMWS2.NEURAL_WEIGHTDS has 83 observations and 4 variables.
NOTE: DATA statement used (Total process time):
      real time           0.05 seconds
      cpu time            0.04 seconds
 
 
28338      proc sort data=EMWS2.Neural_WEIGHTDS nodupkey;
MPRINT(EM_DIAGRAM):   proc sort data=EMWS2.Neural_WEIGHTDS nodupkey;
28339      by _LABEL_;
MPRINT(EM_DIAGRAM):   by _LABEL_;
28340      run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 83 observations read from the data set EMWS2.NEURAL_WEIGHTDS.
NOTE: 0 observations with duplicate key values were deleted.
NOTE: The data set EMWS2.NEURAL_WEIGHTDS has 83 observations and 4 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.20 seconds
      cpu time            0.01 seconds
 
 
MPRINT(EM_DIAGRAM):    proc printto;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    data _null_;
MPRINT(EM_DIAGRAM):   call symput('NLDATE', strip(put(date(), NLDATE.)));
MPRINT(EM_DIAGRAM):   call symput('NLTIME', strip(put(datetime(), NLTIME.)));
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   data _null_;
MPRINT(EM_DIAGRAM):   nldate= sasmsg("sashelp.dmine", "log_date_note", 'N', "August 11, 2022" );
MPRINT(EM_DIAGRAM):   nltime= sasmsg("sashelp.dmine", "log_time_note", 'N', "17:02:00" );
MPRINT(EM_DIAGRAM):   put "*------------------------------------------------------------*";
MPRINT(EM_DIAGRAM):   put "* Score Log";
MPRINT(EM_DIAGRAM):   put nldate;
MPRINT(EM_DIAGRAM):   put nltime;
MPRINT(EM_DIAGRAM):   put "*------------------------------------------------------------*";
MPRINT(EM_DIAGRAM):   run;
*------------------------------------------------------------*
* Score Log
Date:                August 11, 2022
Time:                17:02:00
*------------------------------------------------------------*
MPRINT(EM_DIAGRAM):    filename O1N2JA7S "C:\Users\AutoLogon\Desktop\Roshan Seneca\SEM 2\ROSHAN SEM 2\BAN 210\Final Project\Final Project-Roshan Nair\Workspaces\EMWS2\Neural\EMSCORE.out" encoding="UTF-8" NOBOM;
MPRINT(EM_DIAGRAM):   proc printto print=O1N2JA7S new;
MPRINT(EM_DIAGRAM):   run;
NOTE: This SAS session is using a registry in WORK.  All changes will be lost at the end of this session.
28442      data work.outkey;
MPRINT(EM_DIAGRAM):    data work.outkey;
28443      set EMWS2.Neural_OUTKEY;
MPRINT(EM_DIAGRAM):   set EMWS2.Neural_OUTKEY;
28444      if upcase(ROLE) = 'HIDDEN';
MPRINT(EM_DIAGRAM):   if upcase(ROLE) = 'HIDDEN';
28445      run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 21 observations read from the data set EMWS2.NEURAL_OUTKEY.
NOTE: The data set WORK.OUTKEY has 5 observations and 8 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
28446      filename emflow "C:\Users\AutoLogon\Desktop\Roshan Seneca\SEM 2\ROSHAN SEM 2\BAN 210\Final Project\Final Project-Roshan Nair\Workspaces\EMWS2\Neural\EMFLOWSCORE.sas";
MPRINT(EM_DIAGRAM):    filename emflow "C:\Users\AutoLogon\Desktop\Roshan Seneca\SEM 2\ROSHAN SEM 2\BAN 210\Final Project\Final Project-Roshan Nair\Workspaces\EMWS2\Neural\EMFLOWSCORE.sas";
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * Neural: Scoring DATA data;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
28447      *------------------------------------------------------------*;
28448      * Neural: Scoring DATA data;
28449      *------------------------------------------------------------*;
28450      data EMWS2.Neural_TRAIN
28451      / view=EMWS2.Neural_TRAIN
28452      ;
MPRINT(EM_DIAGRAM):   data EMWS2.Neural_TRAIN / view=EMWS2.Neural_TRAIN ;
28453      set EMWS2.Varsel_TRAIN
28454      ;
MPRINT(EM_DIAGRAM):   set EMWS2.Varsel_TRAIN ;
28455      %inc emflow;
NOTE: %INCLUDE (level 1) file EMFLOW is file C:\Users\AutoLogon\Desktop\Roshan Seneca\SEM 2\ROSHAN SEM 2\BAN 210\Final Project\Final Project-Roshan Nair\Workspaces\EMWS2\Neural\EMFLOWSCORE.sas.
28456     +***********************************;
MPRINT(EM_DIAGRAM):   ***********************************;
28457     +*** Begin Scoring Code for Neural;
MPRINT(EM_DIAGRAM):   *** Begin Scoring Code for Neural;
28458     +***********************************;
MPRINT(EM_DIAGRAM):   ***********************************;
28459     +DROP _DM_BAD _EPS _NOCL_ _MAX_ _MAXP_ _SUM_ _NTRIALS;
MPRINT(EM_DIAGRAM):   DROP _DM_BAD _EPS _NOCL_ _MAX_ _MAXP_ _SUM_ _NTRIALS;
28460     + _DM_BAD = 0;
MPRINT(EM_DIAGRAM):   _DM_BAD = 0;
28461     + _NOCL_ = .;
MPRINT(EM_DIAGRAM):   _NOCL_ = .;
28462     + _MAX_ = .;
MPRINT(EM_DIAGRAM):   _MAX_ = .;
28463     + _MAXP_ = .;
MPRINT(EM_DIAGRAM):   _MAXP_ = .;
28464     + _SUM_ = .;
MPRINT(EM_DIAGRAM):   _SUM_ = .;
28465     + _NTRIALS = .;
MPRINT(EM_DIAGRAM):   _NTRIALS = .;
28466     + _EPS =                1E-10;
MPRINT(EM_DIAGRAM):   _EPS = 1E-10;
28467     +LENGTH _WARN_ $4
28468     +;
MPRINT(EM_DIAGRAM):   LENGTH _WARN_ $4 ;
28469     +      label S_PWR_displacement = 'Standard: PWR_displacement' ;
MPRINT(EM_DIAGRAM):   label S_PWR_displacement = 'Standard: PWR_displacement' ;
28470     +
28471     +      label S_SQRT_weight = 'Standard: SQRT_weight' ;
MPRINT(EM_DIAGRAM):   label S_SQRT_weight = 'Standard: SQRT_weight' ;
28472     +
28473     +      label S_acceleration = 'Standard: acceleration' ;
MPRINT(EM_DIAGRAM):   label S_acceleration = 'Standard: acceleration' ;
28474     +
28475     +      label S_model = 'Standard: model' ;
MPRINT(EM_DIAGRAM):   label S_model = 'Standard: model' ;
28476     +
28477     +      label S_origin = 'Standard: origin' ;
MPRINT(EM_DIAGRAM):   label S_origin = 'Standard: origin' ;
28478     +
28479     +      label G_horsepower0 = 'Dummy: G_horsepower=0' ;
MPRINT(EM_DIAGRAM):   label G_horsepower0 = 'Dummy: G_horsepower=0' ;
28480     +
28481     +      label G_horsepower1 = 'Dummy: G_horsepower=1' ;
MPRINT(EM_DIAGRAM):   label G_horsepower1 = 'Dummy: G_horsepower=1' ;
28482     +
28483     +      label G_horsepower2 = 'Dummy: G_horsepower=2' ;
MPRINT(EM_DIAGRAM):   label G_horsepower2 = 'Dummy: G_horsepower=2' ;
28484     +
28485     +      label G_horsepower3 = 'Dummy: G_horsepower=3' ;
MPRINT(EM_DIAGRAM):   label G_horsepower3 = 'Dummy: G_horsepower=3' ;
28486     +
28487     +      label G_horsepower4 = 'Dummy: G_horsepower=4' ;
MPRINT(EM_DIAGRAM):   label G_horsepower4 = 'Dummy: G_horsepower=4' ;
28488     +
28489     +      label G_horsepower5 = 'Dummy: G_horsepower=5' ;
MPRINT(EM_DIAGRAM):   label G_horsepower5 = 'Dummy: G_horsepower=5' ;
28490     +
28491     +      label G_horsepower6 = 'Dummy: G_horsepower=6' ;
MPRINT(EM_DIAGRAM):   label G_horsepower6 = 'Dummy: G_horsepower=6' ;
28492     +
28493     +      label H11 = 'Hidden: H1=1' ;
MPRINT(EM_DIAGRAM):   label H11 = 'Hidden: H1=1' ;
28494     +
28495     +      label H12 = 'Hidden: H1=2' ;
MPRINT(EM_DIAGRAM):   label H12 = 'Hidden: H1=2' ;
28496     +
28497     +      label H13 = 'Hidden: H1=3' ;
MPRINT(EM_DIAGRAM):   label H13 = 'Hidden: H1=3' ;
28498     +
28499     +      label H14 = 'Hidden: H1=4' ;
MPRINT(EM_DIAGRAM):   label H14 = 'Hidden: H1=4' ;
28500     +
28501     +      label H15 = 'Hidden: H1=5' ;
MPRINT(EM_DIAGRAM):   label H15 = 'Hidden: H1=5' ;
28502     +
28503     +      label P_mpg = 'Predicted: mpg' ;
MPRINT(EM_DIAGRAM):   label P_mpg = 'Predicted: mpg' ;
28504     +
28505     +      label R_mpg = 'Residual: mpg' ;
MPRINT(EM_DIAGRAM):   label R_mpg = 'Residual: mpg' ;
28506     +
28507     +      label  _WARN_ = "Warnings";
MPRINT(EM_DIAGRAM):   label _WARN_ = "Warnings";
28508     +
28509     +*** Generate dummy variables for G_horsepower ;
MPRINT(EM_DIAGRAM):   *** Generate dummy variables for G_horsepower ;
28510     +drop G_horsepower0 G_horsepower1 G_horsepower2 G_horsepower3 G_horsepower4
28511     +        G_horsepower5 G_horsepower6 ;
MPRINT(EM_DIAGRAM):   drop G_horsepower0 G_horsepower1 G_horsepower2 G_horsepower3 G_horsepower4 G_horsepower5 G_horsepower6 ;
28512     +*** encoding is sparse, initialize to zero;
MPRINT(EM_DIAGRAM):   *** encoding is sparse, initialize to zero;
28513     +G_horsepower0 = 0;
MPRINT(EM_DIAGRAM):   G_horsepower0 = 0;
28514     +G_horsepower1 = 0;
MPRINT(EM_DIAGRAM):   G_horsepower1 = 0;
28515     +G_horsepower2 = 0;
MPRINT(EM_DIAGRAM):   G_horsepower2 = 0;
28516     +G_horsepower3 = 0;
MPRINT(EM_DIAGRAM):   G_horsepower3 = 0;
28517     +G_horsepower4 = 0;
MPRINT(EM_DIAGRAM):   G_horsepower4 = 0;
28518     +G_horsepower5 = 0;
MPRINT(EM_DIAGRAM):   G_horsepower5 = 0;
28519     +G_horsepower6 = 0;
MPRINT(EM_DIAGRAM):   G_horsepower6 = 0;
28520     +if missing( G_horsepower ) then do;
MPRINT(EM_DIAGRAM):   if missing( G_horsepower ) then do;
28521     +   G_horsepower0 = .;
MPRINT(EM_DIAGRAM):   G_horsepower0 = .;
28522     +   G_horsepower1 = .;
MPRINT(EM_DIAGRAM):   G_horsepower1 = .;
28523     +   G_horsepower2 = .;
MPRINT(EM_DIAGRAM):   G_horsepower2 = .;
28524     +   G_horsepower3 = .;
MPRINT(EM_DIAGRAM):   G_horsepower3 = .;
28525     +   G_horsepower4 = .;
MPRINT(EM_DIAGRAM):   G_horsepower4 = .;
28526     +   G_horsepower5 = .;
MPRINT(EM_DIAGRAM):   G_horsepower5 = .;
28527     +   G_horsepower6 = .;
MPRINT(EM_DIAGRAM):   G_horsepower6 = .;
28528     +   substr(_warn_,1,1) = 'M';
MPRINT(EM_DIAGRAM):   substr(_warn_,1,1) = 'M';
28529     +   _DM_BAD = 1;
MPRINT(EM_DIAGRAM):   _DM_BAD = 1;
28530     +end;
MPRINT(EM_DIAGRAM):   end;
28531     +else do;
MPRINT(EM_DIAGRAM):   else do;
28532     +   length _dm12 $ 12; drop _dm12 ;
MPRINT(EM_DIAGRAM):   length _dm12 $ 12;
MPRINT(EM_DIAGRAM):   drop _dm12 ;
28533     +   _dm12 = put( G_horsepower , BEST12. );
MPRINT(EM_DIAGRAM):   _dm12 = put( G_horsepower , BEST12. );
28534     +   %DMNORMIP( _dm12 )
MPRINT(DMNORMIP):   call dmnorm(_dm12,
MPRINT(DMNORLEN):  32
MPRINT(DMNORMIP):  );
28535     +   _dm_find = 0; drop _dm_find;
MPRINT(EM_DIAGRAM):   _dm_find = 0;
MPRINT(EM_DIAGRAM):   drop _dm_find;
28536     +   if _dm12 <= '3'  then do;
MPRINT(EM_DIAGRAM):   if _dm12 <= '3' then do;
28537     +      if _dm12 <= '1'  then do;
MPRINT(EM_DIAGRAM):   if _dm12 <= '1' then do;
28538     +         if _dm12 = '0'  then do;
MPRINT(EM_DIAGRAM):   if _dm12 = '0' then do;
28539     +            G_horsepower0 = 1;
MPRINT(EM_DIAGRAM):   G_horsepower0 = 1;
28540     +            _dm_find = 1;
MPRINT(EM_DIAGRAM):   _dm_find = 1;
28541     +         end;
MPRINT(EM_DIAGRAM):   end;
28542     +         else do;
MPRINT(EM_DIAGRAM):   else do;
28543     +            if _dm12 = '1'  then do;
MPRINT(EM_DIAGRAM):   if _dm12 = '1' then do;
28544     +               G_horsepower1 = 1;
MPRINT(EM_DIAGRAM):   G_horsepower1 = 1;
28545     +               _dm_find = 1;
MPRINT(EM_DIAGRAM):   _dm_find = 1;
28546     +            end;
MPRINT(EM_DIAGRAM):   end;
28547     +         end;
MPRINT(EM_DIAGRAM):   end;
28548     +      end;
MPRINT(EM_DIAGRAM):   end;
28549     +      else do;
MPRINT(EM_DIAGRAM):   else do;
28550     +         if _dm12 = '2'  then do;
MPRINT(EM_DIAGRAM):   if _dm12 = '2' then do;
28551     +            G_horsepower2 = 1;
MPRINT(EM_DIAGRAM):   G_horsepower2 = 1;
28552     +            _dm_find = 1;
MPRINT(EM_DIAGRAM):   _dm_find = 1;
28553     +         end;
MPRINT(EM_DIAGRAM):   end;
28554     +         else do;
MPRINT(EM_DIAGRAM):   else do;
28555     +            if _dm12 = '3'  then do;
MPRINT(EM_DIAGRAM):   if _dm12 = '3' then do;
28556     +               G_horsepower3 = 1;
MPRINT(EM_DIAGRAM):   G_horsepower3 = 1;
28557     +               _dm_find = 1;
MPRINT(EM_DIAGRAM):   _dm_find = 1;
28558     +            end;
MPRINT(EM_DIAGRAM):   end;
28559     +         end;
MPRINT(EM_DIAGRAM):   end;
28560     +      end;
MPRINT(EM_DIAGRAM):   end;
28561     +   end;
MPRINT(EM_DIAGRAM):   end;
28562     +   else do;
MPRINT(EM_DIAGRAM):   else do;
28563     +      if _dm12 <= '5'  then do;
MPRINT(EM_DIAGRAM):   if _dm12 <= '5' then do;
28564     +         if _dm12 = '4'  then do;
MPRINT(EM_DIAGRAM):   if _dm12 = '4' then do;
28565     +            G_horsepower4 = 1;
MPRINT(EM_DIAGRAM):   G_horsepower4 = 1;
28566     +            _dm_find = 1;
MPRINT(EM_DIAGRAM):   _dm_find = 1;
28567     +         end;
MPRINT(EM_DIAGRAM):   end;
28568     +         else do;
MPRINT(EM_DIAGRAM):   else do;
28569     +            if _dm12 = '5'  then do;
MPRINT(EM_DIAGRAM):   if _dm12 = '5' then do;
28570     +               G_horsepower5 = 1;
MPRINT(EM_DIAGRAM):   G_horsepower5 = 1;
28571     +               _dm_find = 1;
MPRINT(EM_DIAGRAM):   _dm_find = 1;
28572     +            end;
MPRINT(EM_DIAGRAM):   end;
28573     +         end;
MPRINT(EM_DIAGRAM):   end;
28574     +      end;
MPRINT(EM_DIAGRAM):   end;
28575     +      else do;
MPRINT(EM_DIAGRAM):   else do;
28576     +         if _dm12 = '6'  then do;
MPRINT(EM_DIAGRAM):   if _dm12 = '6' then do;
28577     +            G_horsepower6 = 1;
MPRINT(EM_DIAGRAM):   G_horsepower6 = 1;
28578     +            _dm_find = 1;
MPRINT(EM_DIAGRAM):   _dm_find = 1;
28579     +         end;
MPRINT(EM_DIAGRAM):   end;
28580     +         else do;
MPRINT(EM_DIAGRAM):   else do;
28581     +            if _dm12 = '7'  then do;
MPRINT(EM_DIAGRAM):   if _dm12 = '7' then do;
28582     +               G_horsepower0 = -1;
MPRINT(EM_DIAGRAM):   G_horsepower0 = -1;
28583     +               G_horsepower1 = -1;
MPRINT(EM_DIAGRAM):   G_horsepower1 = -1;
28584     +               G_horsepower2 = -1;
MPRINT(EM_DIAGRAM):   G_horsepower2 = -1;
28585     +               G_horsepower3 = -1;
MPRINT(EM_DIAGRAM):   G_horsepower3 = -1;
28586     +               G_horsepower4 = -1;
MPRINT(EM_DIAGRAM):   G_horsepower4 = -1;
28587     +               G_horsepower5 = -1;
MPRINT(EM_DIAGRAM):   G_horsepower5 = -1;
28588     +               G_horsepower6 = -1;
MPRINT(EM_DIAGRAM):   G_horsepower6 = -1;
28589     +               _dm_find = 1;
MPRINT(EM_DIAGRAM):   _dm_find = 1;
28590     +            end;
MPRINT(EM_DIAGRAM):   end;
28591     +         end;
MPRINT(EM_DIAGRAM):   end;
28592     +      end;
MPRINT(EM_DIAGRAM):   end;
28593     +   end;
MPRINT(EM_DIAGRAM):   end;
28594     +   if not _dm_find then do;
MPRINT(EM_DIAGRAM):   if not _dm_find then do;
28595     +      G_horsepower0 = .;
MPRINT(EM_DIAGRAM):   G_horsepower0 = .;
28596     +      G_horsepower1 = .;
MPRINT(EM_DIAGRAM):   G_horsepower1 = .;
28597     +      G_horsepower2 = .;
MPRINT(EM_DIAGRAM):   G_horsepower2 = .;
28598     +      G_horsepower3 = .;
MPRINT(EM_DIAGRAM):   G_horsepower3 = .;
28599     +      G_horsepower4 = .;
MPRINT(EM_DIAGRAM):   G_horsepower4 = .;
28600     +      G_horsepower5 = .;
MPRINT(EM_DIAGRAM):   G_horsepower5 = .;
28601     +      G_horsepower6 = .;
MPRINT(EM_DIAGRAM):   G_horsepower6 = .;
28602     +      substr(_warn_,2,1) = 'U';
MPRINT(EM_DIAGRAM):   substr(_warn_,2,1) = 'U';
28603     +      _DM_BAD = 1;
MPRINT(EM_DIAGRAM):   _DM_BAD = 1;
28604     +   end;
MPRINT(EM_DIAGRAM):   end;
28605     +end;
MPRINT(EM_DIAGRAM):   end;
28606     +
28607     +*** *************************;
MPRINT(EM_DIAGRAM):   *** *************************;
28608     +*** Checking missing input Interval
28609     +*** *************************;
MPRINT(EM_DIAGRAM):   *** Checking missing input Interval *** *************************;
28610     +
28611     +IF NMISS(
28612     +   PWR_displacement ,
28613     +   SQRT_weight ,
28614     +   acceleration ,
28615     +   model ,
28616     +   origin   ) THEN DO;
MPRINT(EM_DIAGRAM):   IF NMISS( PWR_displacement , SQRT_weight , acceleration , model , origin ) THEN DO;
28617     +   SUBSTR(_WARN_, 1, 1) = 'M';
MPRINT(EM_DIAGRAM):   SUBSTR(_WARN_, 1, 1) = 'M';
28618     +
28619     +   _DM_BAD = 1;
MPRINT(EM_DIAGRAM):   _DM_BAD = 1;
28620     +END;
MPRINT(EM_DIAGRAM):   END;
28621     +*** *************************;
MPRINT(EM_DIAGRAM):   *** *************************;
28622     +*** Writing the Node intvl ;
MPRINT(EM_DIAGRAM):   *** Writing the Node intvl ;
28623     +*** *************************;
MPRINT(EM_DIAGRAM):   *** *************************;
28624     +IF _DM_BAD EQ 0 THEN DO;
MPRINT(EM_DIAGRAM):   IF _DM_BAD EQ 0 THEN DO;
28625     +   S_PWR_displacement  =    -3.85946672878638 +     5.56143158103166 *
28626     +        PWR_displacement ;
MPRINT(EM_DIAGRAM):   S_PWR_displacement = -3.85946672878638 + 5.56143158103166 * PWR_displacement ;
28627     +   S_SQRT_weight  =     -2.8995832574349 +      4.9516224140926 * SQRT_weight
28628     +         ;
MPRINT(EM_DIAGRAM):   S_SQRT_weight = -2.8995832574349 + 4.9516224140926 * SQRT_weight ;
28629     +   S_acceleration  =    -5.65655377081867 +      0.3645839108031 *
28630     +        acceleration ;
MPRINT(EM_DIAGRAM):   S_acceleration = -5.65655377081867 + 0.3645839108031 * acceleration ;
28631     +   S_model  =    -20.4776175489859 +     0.26959850875952 * model ;
MPRINT(EM_DIAGRAM):   S_model = -20.4776175489859 + 0.26959850875952 * model ;
28632     +   S_origin  =    -1.96077366996082 +     1.22260005303439 * origin ;
MPRINT(EM_DIAGRAM):   S_origin = -1.96077366996082 + 1.22260005303439 * origin ;
28633     +END;
MPRINT(EM_DIAGRAM):   END;
28634     +ELSE DO;
MPRINT(EM_DIAGRAM):   ELSE DO;
28635     +   IF MISSING( PWR_displacement ) THEN S_PWR_displacement  = . ;
MPRINT(EM_DIAGRAM):   IF MISSING( PWR_displacement ) THEN S_PWR_displacement = . ;
28636     +   ELSE S_PWR_displacement  =    -3.85946672878638 +     5.56143158103166 *
28637     +        PWR_displacement ;
MPRINT(EM_DIAGRAM):   ELSE S_PWR_displacement = -3.85946672878638 + 5.56143158103166 * PWR_displacement ;
28638     +   IF MISSING( SQRT_weight ) THEN S_SQRT_weight  = . ;
MPRINT(EM_DIAGRAM):   IF MISSING( SQRT_weight ) THEN S_SQRT_weight = . ;
28639     +   ELSE S_SQRT_weight  =     -2.8995832574349 +      4.9516224140926 *
28640     +        SQRT_weight ;
MPRINT(EM_DIAGRAM):   ELSE S_SQRT_weight = -2.8995832574349 + 4.9516224140926 * SQRT_weight ;
28641     +   IF MISSING( acceleration ) THEN S_acceleration  = . ;
MPRINT(EM_DIAGRAM):   IF MISSING( acceleration ) THEN S_acceleration = . ;
28642     +   ELSE S_acceleration  =    -5.65655377081867 +      0.3645839108031 *
28643     +        acceleration ;
MPRINT(EM_DIAGRAM):   ELSE S_acceleration = -5.65655377081867 + 0.3645839108031 * acceleration ;
28644     +   IF MISSING( model ) THEN S_model  = . ;
MPRINT(EM_DIAGRAM):   IF MISSING( model ) THEN S_model = . ;
28645     +   ELSE S_model  =    -20.4776175489859 +     0.26959850875952 * model ;
MPRINT(EM_DIAGRAM):   ELSE S_model = -20.4776175489859 + 0.26959850875952 * model ;
28646     +   IF MISSING( origin ) THEN S_origin  = . ;
MPRINT(EM_DIAGRAM):   IF MISSING( origin ) THEN S_origin = . ;
28647     +   ELSE S_origin  =    -1.96077366996082 +     1.22260005303439 * origin ;
MPRINT(EM_DIAGRAM):   ELSE S_origin = -1.96077366996082 + 1.22260005303439 * origin ;
28648     +END;
MPRINT(EM_DIAGRAM):   END;
28649     +*** *************************;
MPRINT(EM_DIAGRAM):   *** *************************;
28650     +*** Writing the Node nom ;
MPRINT(EM_DIAGRAM):   *** Writing the Node nom ;
28651     +*** *************************;
MPRINT(EM_DIAGRAM):   *** *************************;
28652     +*** *************************;
MPRINT(EM_DIAGRAM):   *** *************************;
28653     +*** Writing the Node H1 ;
MPRINT(EM_DIAGRAM):   *** Writing the Node H1 ;
28654     +*** *************************;
MPRINT(EM_DIAGRAM):   *** *************************;
28655     +IF _DM_BAD EQ 0 THEN DO;
MPRINT(EM_DIAGRAM):   IF _DM_BAD EQ 0 THEN DO;
28656     +   H11  =    -0.22561664220788 * S_PWR_displacement  +     0.29279986935289 *
28657     +        S_SQRT_weight  +    -0.08154144101082 * S_acceleration
28658     +          +    -1.57373487646847 * S_model  +    -0.56643338809607 * S_origin
28659     +         ;
MPRINT(EM_DIAGRAM):   H11 = -0.22561664220788 * S_PWR_displacement + 0.29279986935289 * S_SQRT_weight + -0.08154144101082 * S_acceleration + -1.57373487646847 * S_model + -0.56643338809607 * S_origin ;
28660     +   H12  =     4.93599986000727 * S_PWR_displacement  +    -3.01836024392518 *
28661     +        S_SQRT_weight  +     0.41423051735248 * S_acceleration
28662     +          +      0.9905881549869 * S_model  +     5.10007136657153 * S_origin
28663     +         ;
MPRINT(EM_DIAGRAM):   H12 = 4.93599986000727 * S_PWR_displacement + -3.01836024392518 * S_SQRT_weight + 0.41423051735248 * S_acceleration + 0.9905881549869 * S_model + 5.10007136657153 * S_origin ;
28664     +   H13  =    -1.53185013413527 * S_PWR_displacement  +     2.07646959989326 *
28665     +        S_SQRT_weight  +     0.62803777105863 * S_acceleration
28666     +          +    -0.48474075845178 * S_model  +    -2.46960471429882 * S_origin
28667     +         ;
MPRINT(EM_DIAGRAM):   H13 = -1.53185013413527 * S_PWR_displacement + 2.07646959989326 * S_SQRT_weight + 0.62803777105863 * S_acceleration + -0.48474075845178 * S_model + -2.46960471429882 * S_origin ;
28668     +   H14  =     1.96220002879875 * S_PWR_displacement  +    -2.87264187685342 *
28669     +        S_SQRT_weight  +    -0.33516368597319 * S_acceleration
28670     +          +    -2.66240440595274 * S_model  +     2.74431141979393 * S_origin
28671     +         ;
MPRINT(EM_DIAGRAM):   H14 = 1.96220002879875 * S_PWR_displacement + -2.87264187685342 * S_SQRT_weight + -0.33516368597319 * S_acceleration + -2.66240440595274 * S_model + 2.74431141979393 * S_origin ;
28672     +   H15  =    -4.48005247601382 * S_PWR_displacement  +    -0.00584042704999 *
28673     +        S_SQRT_weight  +    -1.88583017304181 * S_acceleration
28674     +          +     0.28789605983299 * S_model  +     0.01833307183986 * S_origin
28675     +         ;
MPRINT(EM_DIAGRAM):   H15 = -4.48005247601382 * S_PWR_displacement + -0.00584042704999 * S_SQRT_weight + -1.88583017304181 * S_acceleration + 0.28789605983299 * S_model + 0.01833307183986 * S_origin ;
28676     +   H11  = H11  +    -0.32589822322206 * G_horsepower0
28677     +          +    -2.11513303881614 * G_horsepower1  +     0.24624362754708 *
28678     +        G_horsepower2  +    -0.20585055130122 * G_horsepower3
28679     +          +    -0.19436717896363 * G_horsepower4  +     0.16856024419836 *
28680     +        G_horsepower5  +     -0.3165843590158 * G_horsepower6 ;
MPRINT(EM_DIAGRAM):   H11 = H11 + -0.32589822322206 * G_horsepower0 + -2.11513303881614 * G_horsepower1 + 0.24624362754708 * G_horsepower2 + -0.20585055130122 * G_horsepower3 + -0.19436717896363 * G_horsepower4 + 0.16856024419836 * G_horsepower5 +
-0.3165843590158 * G_horsepower6 ;
28681     +   H12  = H12  +      -1.053307301652 * G_horsepower0
28682     +          +    -1.34604130948168 * G_horsepower1  +     2.53331408689217 *
28683     +        G_horsepower2  +    -0.88094896944232 * G_horsepower3
28684     +          +    -0.04212737578867 * G_horsepower4  +     1.70833493332698 *
28685     +        G_horsepower5  +     0.50679394243914 * G_horsepower6 ;
MPRINT(EM_DIAGRAM):   H12 = H12 + -1.053307301652 * G_horsepower0 + -1.34604130948168 * G_horsepower1 + 2.53331408689217 * G_horsepower2 + -0.88094896944232 * G_horsepower3 + -0.04212737578867 * G_horsepower4 + 1.70833493332698 * G_horsepower5 +
0.50679394243914 * G_horsepower6 ;
28686     +   H13  = H13  +    -1.10735170928115 * G_horsepower0
28687     +          +    -1.27815205151561 * G_horsepower1  +    -2.93732966593975 *
28688     +        G_horsepower2  +     0.26560257283006 * G_horsepower3
28689     +          +     1.27772842560416 * G_horsepower4  +      0.4182236705835 *
28690     +        G_horsepower5  +     0.96211923165101 * G_horsepower6 ;
MPRINT(EM_DIAGRAM):   H13 = H13 + -1.10735170928115 * G_horsepower0 + -1.27815205151561 * G_horsepower1 + -2.93732966593975 * G_horsepower2 + 0.26560257283006 * G_horsepower3 + 1.27772842560416 * G_horsepower4 + 0.4182236705835 * G_horsepower5 +
0.96211923165101 * G_horsepower6 ;
28691     +   H14  = H14  +     0.70529046022495 * G_horsepower0
28692     +          +        5.00762903292 * G_horsepower1  +     3.12940883992694 *
28693     +        G_horsepower2  +    -0.47131349103044 * G_horsepower3
28694     +          +    -2.50517134874503 * G_horsepower4  +    -0.23400568544976 *
28695     +        G_horsepower5  +    -4.01167816695482 * G_horsepower6 ;
MPRINT(EM_DIAGRAM):   H14 = H14 + 0.70529046022495 * G_horsepower0 + 5.00762903292 * G_horsepower1 + 3.12940883992694 * G_horsepower2 + -0.47131349103044 * G_horsepower3 + -2.50517134874503 * G_horsepower4 + -0.23400568544976 * G_horsepower5 +
-4.01167816695482 * G_horsepower6 ;
28696     +   H15  = H15  +    -0.83580412810395 * G_horsepower0
28697     +          +     0.33584823926172 * G_horsepower1  +     1.47861687233833 *
28698     +        G_horsepower2  +     0.29972014231897 * G_horsepower3
28699     +          +    -0.40796294853021 * G_horsepower4  +    -0.61530226688032 *
28700     +        G_horsepower5  +    -1.22502721368356 * G_horsepower6 ;
MPRINT(EM_DIAGRAM):   H15 = H15 + -0.83580412810395 * G_horsepower0 + 0.33584823926172 * G_horsepower1 + 1.47861687233833 * G_horsepower2 + 0.29972014231897 * G_horsepower3 + -0.40796294853021 * G_horsepower4 + -0.61530226688032 * G_horsepower5 +
-1.22502721368356 * G_horsepower6 ;
28701     +   H11  =    -1.25220742338907 + H11 ;
MPRINT(EM_DIAGRAM):   H11 = -1.25220742338907 + H11 ;
28702     +   H12  =     3.55054085911683 + H12 ;
MPRINT(EM_DIAGRAM):   H12 = 3.55054085911683 + H12 ;
28703     +   H13  =    -1.57744423775478 + H13 ;
MPRINT(EM_DIAGRAM):   H13 = -1.57744423775478 + H13 ;
28704     +   H14  =     1.61611384879506 + H14 ;
MPRINT(EM_DIAGRAM):   H14 = 1.61611384879506 + H14 ;
28705     +   H15  =    -2.43404899996786 + H15 ;
MPRINT(EM_DIAGRAM):   H15 = -2.43404899996786 + H15 ;
28706     +   H11  = TANH(H11 );
MPRINT(EM_DIAGRAM):   H11 = TANH(H11 );
28707     +   H12  = TANH(H12 );
MPRINT(EM_DIAGRAM):   H12 = TANH(H12 );
28708     +   H13  = TANH(H13 );
MPRINT(EM_DIAGRAM):   H13 = TANH(H13 );
28709     +   H14  = TANH(H14 );
MPRINT(EM_DIAGRAM):   H14 = TANH(H14 );
28710     +   H15  = TANH(H15 );
MPRINT(EM_DIAGRAM):   H15 = TANH(H15 );
28711     +END;
MPRINT(EM_DIAGRAM):   END;
28712     +ELSE DO;
MPRINT(EM_DIAGRAM):   ELSE DO;
28713     +   H11  = .;
MPRINT(EM_DIAGRAM):   H11 = .;
28714     +   H12  = .;
MPRINT(EM_DIAGRAM):   H12 = .;
28715     +   H13  = .;
MPRINT(EM_DIAGRAM):   H13 = .;
28716     +   H14  = .;
MPRINT(EM_DIAGRAM):   H14 = .;
28717     +   H15  = .;
MPRINT(EM_DIAGRAM):   H15 = .;
28718     +END;
MPRINT(EM_DIAGRAM):   END;
28719     +*** *************************;
MPRINT(EM_DIAGRAM):   *** *************************;
28720     +*** Writing the Node intervalTargets ;
MPRINT(EM_DIAGRAM):   *** Writing the Node intervalTargets ;
28721     +*** *************************;
MPRINT(EM_DIAGRAM):   *** *************************;
28722     +IF _DM_BAD EQ 0 THEN DO;
MPRINT(EM_DIAGRAM):   IF _DM_BAD EQ 0 THEN DO;
28723     +   P_mpg  =     4.35521208192278 * H11  +    -3.55839496594162 * H12
28724     +          +    -5.14861993092215 * H13  +    -2.82316167679099 * H14
28725     +          +     2.90190723352924 * H15 ;
MPRINT(EM_DIAGRAM):   P_mpg = 4.35521208192278 * H11 + -3.55839496594162 * H12 + -5.14861993092215 * H13 + -2.82316167679099 * H14 + 2.90190723352924 * H15 ;
28726     +   P_mpg  = P_mpg  +     3.23232456419777 * S_PWR_displacement
28727     +          +    -2.67328859312353 * S_SQRT_weight  +     1.92259283968828 *
28728     +        S_acceleration  +     3.07674646933812 * S_model
28729     +          +     1.60808322499289 * S_origin ;
MPRINT(EM_DIAGRAM):   P_mpg = P_mpg + 3.23232456419777 * S_PWR_displacement + -2.67328859312353 * S_SQRT_weight + 1.92259283968828 * S_acceleration + 3.07674646933812 * S_model + 1.60808322499289 * S_origin ;
28730     +   P_mpg  = P_mpg  +    -9.00526279781947 * G_horsepower0
28731     +          +    -2.85437315145606 * G_horsepower1  +    -4.83234195044209 *
28732     +        G_horsepower2  +    -1.19030839841495 * G_horsepower3
28733     +          +      1.2579767801169 * G_horsepower4  +     2.09998268656574 *
28734     +        G_horsepower5  +     2.95490641856222 * G_horsepower6 ;
MPRINT(EM_DIAGRAM):   P_mpg = P_mpg + -9.00526279781947 * G_horsepower0 + -2.85437315145606 * G_horsepower1 + -4.83234195044209 * G_horsepower2 + -1.19030839841495 * G_horsepower3 + 1.2579767801169 * G_horsepower4 + 2.09998268656574 * G_horsepower5 +
2.95490641856222 * G_horsepower6 ;
28735     +   P_mpg  =     29.6876860089066 + P_mpg ;
MPRINT(EM_DIAGRAM):   P_mpg = 29.6876860089066 + P_mpg ;
28736     +END;
MPRINT(EM_DIAGRAM):   END;
28737     +ELSE DO;
MPRINT(EM_DIAGRAM):   ELSE DO;
28738     +   P_mpg  = .;
MPRINT(EM_DIAGRAM):   P_mpg = .;
28739     +END;
MPRINT(EM_DIAGRAM):   END;
28740     +IF _DM_BAD EQ 1 THEN DO;
MPRINT(EM_DIAGRAM):   IF _DM_BAD EQ 1 THEN DO;
28741     +   P_mpg  =     23.5238993710691;
MPRINT(EM_DIAGRAM):   P_mpg = 23.5238993710691;
28742     +END;
MPRINT(EM_DIAGRAM):   END;
28743     +*** *****************************;
MPRINT(EM_DIAGRAM):   *** *****************************;
28744     +*** Writing the Residuals  of the Node intervalTargets ;
MPRINT(EM_DIAGRAM):   *** Writing the Residuals of the Node intervalTargets ;
28745     +*** ******************************;
MPRINT(EM_DIAGRAM):   *** ******************************;
28746     +IF MISSING( mpg ) THEN R_mpg  = . ;
MPRINT(EM_DIAGRAM):   IF MISSING( mpg ) THEN R_mpg = . ;
28747     +ELSE R_mpg  = mpg  - P_mpg ;
MPRINT(EM_DIAGRAM):   ELSE R_mpg = mpg - P_mpg ;
28748     +********************************;
MPRINT(EM_DIAGRAM):   ********************************;
28749     +*** End Scoring Code for Neural;
MPRINT(EM_DIAGRAM):   *** End Scoring Code for Neural;
28750     +********************************;
MPRINT(EM_DIAGRAM):   ********************************;
28751     +drop
28752     +H11
28753     +H12
28754     +H13
28755     +H14
28756     +H15
28757     +;
MPRINT(EM_DIAGRAM):   drop H11 H12 H13 H14 H15 ;
28758     +drop S_:;
MPRINT(EM_DIAGRAM):   drop S_:;
NOTE: %INCLUDE (level 1) ending.
MPRINT(EM_DIAGRAM):   run;
28759      run;
 
NOTE: DATA STEP view saved on file EMWS2.NEURAL_TRAIN.
NOTE: A stored DATA STEP view cannot run under a different operating system.
NOTE: View EMWS2.VARSEL_TRAIN.VIEW used (Total process time):
      real time           0.12 seconds
      cpu time            0.12 seconds
 
NOTE: DATA statement used (Total process time):
      real time           0.14 seconds
      cpu time            0.15 seconds
 
 
MPRINT(EM_DIAGRAM):   quit;
28760      quit;
28761      filename emflow;
MPRINT(EM_DIAGRAM):   filename emflow;
NOTE: Fileref EMFLOW has been deassigned.
28762      filename emflow "C:\Users\AutoLogon\Desktop\Roshan Seneca\SEM 2\ROSHAN SEM 2\BAN 210\Final Project\Final Project-Roshan Nair\Workspaces\EMWS2\Neural\EMFLOWSCORE.sas";
MPRINT(EM_DIAGRAM):    filename emflow "C:\Users\AutoLogon\Desktop\Roshan Seneca\SEM 2\ROSHAN SEM 2\BAN 210\Final Project\Final Project-Roshan Nair\Workspaces\EMWS2\Neural\EMFLOWSCORE.sas";
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * Neural: Scoring VALIDATE data;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
28763      *------------------------------------------------------------*;
28764      * Neural: Scoring VALIDATE data;
28765      *------------------------------------------------------------*;
28766      data EMWS2.Neural_VALIDATE
28767      / view=EMWS2.Neural_VALIDATE
28768      ;
MPRINT(EM_DIAGRAM):   data EMWS2.Neural_VALIDATE / view=EMWS2.Neural_VALIDATE ;
28769      set EMWS2.Varsel_VALIDATE
28770      ;
MPRINT(EM_DIAGRAM):   set EMWS2.Varsel_VALIDATE ;
28771      %inc emflow;
NOTE: %INCLUDE (level 1) file EMFLOW is file C:\Users\AutoLogon\Desktop\Roshan Seneca\SEM 2\ROSHAN SEM 2\BAN 210\Final Project\Final Project-Roshan Nair\Workspaces\EMWS2\Neural\EMFLOWSCORE.sas.
28772     +***********************************;
MPRINT(EM_DIAGRAM):   ***********************************;
28773     +*** Begin Scoring Code for Neural;
MPRINT(EM_DIAGRAM):   *** Begin Scoring Code for Neural;
28774     +***********************************;
MPRINT(EM_DIAGRAM):   ***********************************;
28775     +DROP _DM_BAD _EPS _NOCL_ _MAX_ _MAXP_ _SUM_ _NTRIALS;
MPRINT(EM_DIAGRAM):   DROP _DM_BAD _EPS _NOCL_ _MAX_ _MAXP_ _SUM_ _NTRIALS;
28776     + _DM_BAD = 0;
MPRINT(EM_DIAGRAM):   _DM_BAD = 0;
28777     + _NOCL_ = .;
MPRINT(EM_DIAGRAM):   _NOCL_ = .;
28778     + _MAX_ = .;
MPRINT(EM_DIAGRAM):   _MAX_ = .;
28779     + _MAXP_ = .;
MPRINT(EM_DIAGRAM):   _MAXP_ = .;
28780     + _SUM_ = .;
MPRINT(EM_DIAGRAM):   _SUM_ = .;
28781     + _NTRIALS = .;
MPRINT(EM_DIAGRAM):   _NTRIALS = .;
28782     + _EPS =                1E-10;
MPRINT(EM_DIAGRAM):   _EPS = 1E-10;
28783     +LENGTH _WARN_ $4
28784     +;
MPRINT(EM_DIAGRAM):   LENGTH _WARN_ $4 ;
28785     +      label S_PWR_displacement = 'Standard: PWR_displacement' ;
MPRINT(EM_DIAGRAM):   label S_PWR_displacement = 'Standard: PWR_displacement' ;
28786     +
28787     +      label S_SQRT_weight = 'Standard: SQRT_weight' ;
MPRINT(EM_DIAGRAM):   label S_SQRT_weight = 'Standard: SQRT_weight' ;
28788     +
28789     +      label S_acceleration = 'Standard: acceleration' ;
MPRINT(EM_DIAGRAM):   label S_acceleration = 'Standard: acceleration' ;
28790     +
28791     +      label S_model = 'Standard: model' ;
MPRINT(EM_DIAGRAM):   label S_model = 'Standard: model' ;
28792     +
28793     +      label S_origin = 'Standard: origin' ;
MPRINT(EM_DIAGRAM):   label S_origin = 'Standard: origin' ;
28794     +
28795     +      label G_horsepower0 = 'Dummy: G_horsepower=0' ;
MPRINT(EM_DIAGRAM):   label G_horsepower0 = 'Dummy: G_horsepower=0' ;
28796     +
28797     +      label G_horsepower1 = 'Dummy: G_horsepower=1' ;
MPRINT(EM_DIAGRAM):   label G_horsepower1 = 'Dummy: G_horsepower=1' ;
28798     +
28799     +      label G_horsepower2 = 'Dummy: G_horsepower=2' ;
MPRINT(EM_DIAGRAM):   label G_horsepower2 = 'Dummy: G_horsepower=2' ;
28800     +
28801     +      label G_horsepower3 = 'Dummy: G_horsepower=3' ;
MPRINT(EM_DIAGRAM):   label G_horsepower3 = 'Dummy: G_horsepower=3' ;
28802     +
28803     +      label G_horsepower4 = 'Dummy: G_horsepower=4' ;
MPRINT(EM_DIAGRAM):   label G_horsepower4 = 'Dummy: G_horsepower=4' ;
28804     +
28805     +      label G_horsepower5 = 'Dummy: G_horsepower=5' ;
MPRINT(EM_DIAGRAM):   label G_horsepower5 = 'Dummy: G_horsepower=5' ;
28806     +
28807     +      label G_horsepower6 = 'Dummy: G_horsepower=6' ;
MPRINT(EM_DIAGRAM):   label G_horsepower6 = 'Dummy: G_horsepower=6' ;
28808     +
28809     +      label H11 = 'Hidden: H1=1' ;
MPRINT(EM_DIAGRAM):   label H11 = 'Hidden: H1=1' ;
28810     +
28811     +      label H12 = 'Hidden: H1=2' ;
MPRINT(EM_DIAGRAM):   label H12 = 'Hidden: H1=2' ;
28812     +
28813     +      label H13 = 'Hidden: H1=3' ;
MPRINT(EM_DIAGRAM):   label H13 = 'Hidden: H1=3' ;
28814     +
28815     +      label H14 = 'Hidden: H1=4' ;
MPRINT(EM_DIAGRAM):   label H14 = 'Hidden: H1=4' ;
28816     +
28817     +      label H15 = 'Hidden: H1=5' ;
MPRINT(EM_DIAGRAM):   label H15 = 'Hidden: H1=5' ;
28818     +
28819     +      label P_mpg = 'Predicted: mpg' ;
MPRINT(EM_DIAGRAM):   label P_mpg = 'Predicted: mpg' ;
28820     +
28821     +      label R_mpg = 'Residual: mpg' ;
MPRINT(EM_DIAGRAM):   label R_mpg = 'Residual: mpg' ;
28822     +
28823     +      label  _WARN_ = "Warnings";
MPRINT(EM_DIAGRAM):   label _WARN_ = "Warnings";
28824     +
28825     +*** Generate dummy variables for G_horsepower ;
MPRINT(EM_DIAGRAM):   *** Generate dummy variables for G_horsepower ;
28826     +drop G_horsepower0 G_horsepower1 G_horsepower2 G_horsepower3 G_horsepower4
28827     +        G_horsepower5 G_horsepower6 ;
MPRINT(EM_DIAGRAM):   drop G_horsepower0 G_horsepower1 G_horsepower2 G_horsepower3 G_horsepower4 G_horsepower5 G_horsepower6 ;
28828     +*** encoding is sparse, initialize to zero;
MPRINT(EM_DIAGRAM):   *** encoding is sparse, initialize to zero;
28829     +G_horsepower0 = 0;
MPRINT(EM_DIAGRAM):   G_horsepower0 = 0;
28830     +G_horsepower1 = 0;
MPRINT(EM_DIAGRAM):   G_horsepower1 = 0;
28831     +G_horsepower2 = 0;
MPRINT(EM_DIAGRAM):   G_horsepower2 = 0;
28832     +G_horsepower3 = 0;
MPRINT(EM_DIAGRAM):   G_horsepower3 = 0;
28833     +G_horsepower4 = 0;
MPRINT(EM_DIAGRAM):   G_horsepower4 = 0;
28834     +G_horsepower5 = 0;
MPRINT(EM_DIAGRAM):   G_horsepower5 = 0;
28835     +G_horsepower6 = 0;
MPRINT(EM_DIAGRAM):   G_horsepower6 = 0;
28836     +if missing( G_horsepower ) then do;
MPRINT(EM_DIAGRAM):   if missing( G_horsepower ) then do;
28837     +   G_horsepower0 = .;
MPRINT(EM_DIAGRAM):   G_horsepower0 = .;
28838     +   G_horsepower1 = .;
MPRINT(EM_DIAGRAM):   G_horsepower1 = .;
28839     +   G_horsepower2 = .;
MPRINT(EM_DIAGRAM):   G_horsepower2 = .;
28840     +   G_horsepower3 = .;
MPRINT(EM_DIAGRAM):   G_horsepower3 = .;
28841     +   G_horsepower4 = .;
MPRINT(EM_DIAGRAM):   G_horsepower4 = .;
28842     +   G_horsepower5 = .;
MPRINT(EM_DIAGRAM):   G_horsepower5 = .;
28843     +   G_horsepower6 = .;
MPRINT(EM_DIAGRAM):   G_horsepower6 = .;
28844     +   substr(_warn_,1,1) = 'M';
MPRINT(EM_DIAGRAM):   substr(_warn_,1,1) = 'M';
28845     +   _DM_BAD = 1;
MPRINT(EM_DIAGRAM):   _DM_BAD = 1;
28846     +end;
MPRINT(EM_DIAGRAM):   end;
28847     +else do;
MPRINT(EM_DIAGRAM):   else do;
28848     +   length _dm12 $ 12; drop _dm12 ;
MPRINT(EM_DIAGRAM):   length _dm12 $ 12;
MPRINT(EM_DIAGRAM):   drop _dm12 ;
28849     +   _dm12 = put( G_horsepower , BEST12. );
MPRINT(EM_DIAGRAM):   _dm12 = put( G_horsepower , BEST12. );
28850     +   %DMNORMIP( _dm12 )
MPRINT(DMNORMIP):   call dmnorm(_dm12,
MPRINT(DMNORLEN):  32
MPRINT(DMNORMIP):  );
28851     +   _dm_find = 0; drop _dm_find;
MPRINT(EM_DIAGRAM):   _dm_find = 0;
MPRINT(EM_DIAGRAM):   drop _dm_find;
28852     +   if _dm12 <= '3'  then do;
MPRINT(EM_DIAGRAM):   if _dm12 <= '3' then do;
28853     +      if _dm12 <= '1'  then do;
MPRINT(EM_DIAGRAM):   if _dm12 <= '1' then do;
28854     +         if _dm12 = '0'  then do;
MPRINT(EM_DIAGRAM):   if _dm12 = '0' then do;
28855     +            G_horsepower0 = 1;
MPRINT(EM_DIAGRAM):   G_horsepower0 = 1;
28856     +            _dm_find = 1;
MPRINT(EM_DIAGRAM):   _dm_find = 1;
28857     +         end;
MPRINT(EM_DIAGRAM):   end;
28858     +         else do;
MPRINT(EM_DIAGRAM):   else do;
28859     +            if _dm12 = '1'  then do;
MPRINT(EM_DIAGRAM):   if _dm12 = '1' then do;
28860     +               G_horsepower1 = 1;
MPRINT(EM_DIAGRAM):   G_horsepower1 = 1;
28861     +               _dm_find = 1;
MPRINT(EM_DIAGRAM):   _dm_find = 1;
28862     +            end;
MPRINT(EM_DIAGRAM):   end;
28863     +         end;
MPRINT(EM_DIAGRAM):   end;
28864     +      end;
MPRINT(EM_DIAGRAM):   end;
28865     +      else do;
MPRINT(EM_DIAGRAM):   else do;
28866     +         if _dm12 = '2'  then do;
MPRINT(EM_DIAGRAM):   if _dm12 = '2' then do;
28867     +            G_horsepower2 = 1;
MPRINT(EM_DIAGRAM):   G_horsepower2 = 1;
28868     +            _dm_find = 1;
MPRINT(EM_DIAGRAM):   _dm_find = 1;
28869     +         end;
MPRINT(EM_DIAGRAM):   end;
28870     +         else do;
MPRINT(EM_DIAGRAM):   else do;
28871     +            if _dm12 = '3'  then do;
MPRINT(EM_DIAGRAM):   if _dm12 = '3' then do;
28872     +               G_horsepower3 = 1;
MPRINT(EM_DIAGRAM):   G_horsepower3 = 1;
28873     +               _dm_find = 1;
MPRINT(EM_DIAGRAM):   _dm_find = 1;
28874     +            end;
MPRINT(EM_DIAGRAM):   end;
28875     +         end;
MPRINT(EM_DIAGRAM):   end;
28876     +      end;
MPRINT(EM_DIAGRAM):   end;
28877     +   end;
MPRINT(EM_DIAGRAM):   end;
28878     +   else do;
MPRINT(EM_DIAGRAM):   else do;
28879     +      if _dm12 <= '5'  then do;
MPRINT(EM_DIAGRAM):   if _dm12 <= '5' then do;
28880     +         if _dm12 = '4'  then do;
MPRINT(EM_DIAGRAM):   if _dm12 = '4' then do;
28881     +            G_horsepower4 = 1;
MPRINT(EM_DIAGRAM):   G_horsepower4 = 1;
28882     +            _dm_find = 1;
MPRINT(EM_DIAGRAM):   _dm_find = 1;
28883     +         end;
MPRINT(EM_DIAGRAM):   end;
28884     +         else do;
MPRINT(EM_DIAGRAM):   else do;
28885     +            if _dm12 = '5'  then do;
MPRINT(EM_DIAGRAM):   if _dm12 = '5' then do;
28886     +               G_horsepower5 = 1;
MPRINT(EM_DIAGRAM):   G_horsepower5 = 1;
28887     +               _dm_find = 1;
MPRINT(EM_DIAGRAM):   _dm_find = 1;
28888     +            end;
MPRINT(EM_DIAGRAM):   end;
28889     +         end;
MPRINT(EM_DIAGRAM):   end;
28890     +      end;
MPRINT(EM_DIAGRAM):   end;
28891     +      else do;
MPRINT(EM_DIAGRAM):   else do;
28892     +         if _dm12 = '6'  then do;
MPRINT(EM_DIAGRAM):   if _dm12 = '6' then do;
28893     +            G_horsepower6 = 1;
MPRINT(EM_DIAGRAM):   G_horsepower6 = 1;
28894     +            _dm_find = 1;
MPRINT(EM_DIAGRAM):   _dm_find = 1;
28895     +         end;
MPRINT(EM_DIAGRAM):   end;
28896     +         else do;
MPRINT(EM_DIAGRAM):   else do;
28897     +            if _dm12 = '7'  then do;
MPRINT(EM_DIAGRAM):   if _dm12 = '7' then do;
28898     +               G_horsepower0 = -1;
MPRINT(EM_DIAGRAM):   G_horsepower0 = -1;
28899     +               G_horsepower1 = -1;
MPRINT(EM_DIAGRAM):   G_horsepower1 = -1;
28900     +               G_horsepower2 = -1;
MPRINT(EM_DIAGRAM):   G_horsepower2 = -1;
28901     +               G_horsepower3 = -1;
MPRINT(EM_DIAGRAM):   G_horsepower3 = -1;
28902     +               G_horsepower4 = -1;
MPRINT(EM_DIAGRAM):   G_horsepower4 = -1;
28903     +               G_horsepower5 = -1;
MPRINT(EM_DIAGRAM):   G_horsepower5 = -1;
28904     +               G_horsepower6 = -1;
MPRINT(EM_DIAGRAM):   G_horsepower6 = -1;
28905     +               _dm_find = 1;
MPRINT(EM_DIAGRAM):   _dm_find = 1;
28906     +            end;
MPRINT(EM_DIAGRAM):   end;
28907     +         end;
MPRINT(EM_DIAGRAM):   end;
28908     +      end;
MPRINT(EM_DIAGRAM):   end;
28909     +   end;
MPRINT(EM_DIAGRAM):   end;
28910     +   if not _dm_find then do;
MPRINT(EM_DIAGRAM):   if not _dm_find then do;
28911     +      G_horsepower0 = .;
MPRINT(EM_DIAGRAM):   G_horsepower0 = .;
28912     +      G_horsepower1 = .;
MPRINT(EM_DIAGRAM):   G_horsepower1 = .;
28913     +      G_horsepower2 = .;
MPRINT(EM_DIAGRAM):   G_horsepower2 = .;
28914     +      G_horsepower3 = .;
MPRINT(EM_DIAGRAM):   G_horsepower3 = .;
28915     +      G_horsepower4 = .;
MPRINT(EM_DIAGRAM):   G_horsepower4 = .;
28916     +      G_horsepower5 = .;
MPRINT(EM_DIAGRAM):   G_horsepower5 = .;
28917     +      G_horsepower6 = .;
MPRINT(EM_DIAGRAM):   G_horsepower6 = .;
28918     +      substr(_warn_,2,1) = 'U';
MPRINT(EM_DIAGRAM):   substr(_warn_,2,1) = 'U';
28919     +      _DM_BAD = 1;
MPRINT(EM_DIAGRAM):   _DM_BAD = 1;
28920     +   end;
MPRINT(EM_DIAGRAM):   end;
28921     +end;
MPRINT(EM_DIAGRAM):   end;
28922     +
28923     +*** *************************;
MPRINT(EM_DIAGRAM):   *** *************************;
28924     +*** Checking missing input Interval
28925     +*** *************************;
MPRINT(EM_DIAGRAM):   *** Checking missing input Interval *** *************************;
28926     +
28927     +IF NMISS(
28928     +   PWR_displacement ,
28929     +   SQRT_weight ,
28930     +   acceleration ,
28931     +   model ,
28932     +   origin   ) THEN DO;
MPRINT(EM_DIAGRAM):   IF NMISS( PWR_displacement , SQRT_weight , acceleration , model , origin ) THEN DO;
28933     +   SUBSTR(_WARN_, 1, 1) = 'M';
MPRINT(EM_DIAGRAM):   SUBSTR(_WARN_, 1, 1) = 'M';
28934     +
28935     +   _DM_BAD = 1;
MPRINT(EM_DIAGRAM):   _DM_BAD = 1;
28936     +END;
MPRINT(EM_DIAGRAM):   END;
28937     +*** *************************;
MPRINT(EM_DIAGRAM):   *** *************************;
28938     +*** Writing the Node intvl ;
MPRINT(EM_DIAGRAM):   *** Writing the Node intvl ;
28939     +*** *************************;
MPRINT(EM_DIAGRAM):   *** *************************;
28940     +IF _DM_BAD EQ 0 THEN DO;
MPRINT(EM_DIAGRAM):   IF _DM_BAD EQ 0 THEN DO;
28941     +   S_PWR_displacement  =    -3.85946672878638 +     5.56143158103166 *
28942     +        PWR_displacement ;
MPRINT(EM_DIAGRAM):   S_PWR_displacement = -3.85946672878638 + 5.56143158103166 * PWR_displacement ;
28943     +   S_SQRT_weight  =     -2.8995832574349 +      4.9516224140926 * SQRT_weight
28944     +         ;
MPRINT(EM_DIAGRAM):   S_SQRT_weight = -2.8995832574349 + 4.9516224140926 * SQRT_weight ;
28945     +   S_acceleration  =    -5.65655377081867 +      0.3645839108031 *
28946     +        acceleration ;
MPRINT(EM_DIAGRAM):   S_acceleration = -5.65655377081867 + 0.3645839108031 * acceleration ;
28947     +   S_model  =    -20.4776175489859 +     0.26959850875952 * model ;
MPRINT(EM_DIAGRAM):   S_model = -20.4776175489859 + 0.26959850875952 * model ;
28948     +   S_origin  =    -1.96077366996082 +     1.22260005303439 * origin ;
MPRINT(EM_DIAGRAM):   S_origin = -1.96077366996082 + 1.22260005303439 * origin ;
28949     +END;
MPRINT(EM_DIAGRAM):   END;
28950     +ELSE DO;
MPRINT(EM_DIAGRAM):   ELSE DO;
28951     +   IF MISSING( PWR_displacement ) THEN S_PWR_displacement  = . ;
MPRINT(EM_DIAGRAM):   IF MISSING( PWR_displacement ) THEN S_PWR_displacement = . ;
28952     +   ELSE S_PWR_displacement  =    -3.85946672878638 +     5.56143158103166 *
28953     +        PWR_displacement ;
MPRINT(EM_DIAGRAM):   ELSE S_PWR_displacement = -3.85946672878638 + 5.56143158103166 * PWR_displacement ;
28954     +   IF MISSING( SQRT_weight ) THEN S_SQRT_weight  = . ;
MPRINT(EM_DIAGRAM):   IF MISSING( SQRT_weight ) THEN S_SQRT_weight = . ;
28955     +   ELSE S_SQRT_weight  =     -2.8995832574349 +      4.9516224140926 *
28956     +        SQRT_weight ;
MPRINT(EM_DIAGRAM):   ELSE S_SQRT_weight = -2.8995832574349 + 4.9516224140926 * SQRT_weight ;
28957     +   IF MISSING( acceleration ) THEN S_acceleration  = . ;
MPRINT(EM_DIAGRAM):   IF MISSING( acceleration ) THEN S_acceleration = . ;
28958     +   ELSE S_acceleration  =    -5.65655377081867 +      0.3645839108031 *
28959     +        acceleration ;
MPRINT(EM_DIAGRAM):   ELSE S_acceleration = -5.65655377081867 + 0.3645839108031 * acceleration ;
28960     +   IF MISSING( model ) THEN S_model  = . ;
MPRINT(EM_DIAGRAM):   IF MISSING( model ) THEN S_model = . ;
28961     +   ELSE S_model  =    -20.4776175489859 +     0.26959850875952 * model ;
MPRINT(EM_DIAGRAM):   ELSE S_model = -20.4776175489859 + 0.26959850875952 * model ;
28962     +   IF MISSING( origin ) THEN S_origin  = . ;
MPRINT(EM_DIAGRAM):   IF MISSING( origin ) THEN S_origin = . ;
28963     +   ELSE S_origin  =    -1.96077366996082 +     1.22260005303439 * origin ;
MPRINT(EM_DIAGRAM):   ELSE S_origin = -1.96077366996082 + 1.22260005303439 * origin ;
28964     +END;
MPRINT(EM_DIAGRAM):   END;
28965     +*** *************************;
MPRINT(EM_DIAGRAM):   *** *************************;
28966     +*** Writing the Node nom ;
MPRINT(EM_DIAGRAM):   *** Writing the Node nom ;
28967     +*** *************************;
MPRINT(EM_DIAGRAM):   *** *************************;
28968     +*** *************************;
MPRINT(EM_DIAGRAM):   *** *************************;
28969     +*** Writing the Node H1 ;
MPRINT(EM_DIAGRAM):   *** Writing the Node H1 ;
28970     +*** *************************;
MPRINT(EM_DIAGRAM):   *** *************************;
28971     +IF _DM_BAD EQ 0 THEN DO;
MPRINT(EM_DIAGRAM):   IF _DM_BAD EQ 0 THEN DO;
28972     +   H11  =    -0.22561664220788 * S_PWR_displacement  +     0.29279986935289 *
28973     +        S_SQRT_weight  +    -0.08154144101082 * S_acceleration
28974     +          +    -1.57373487646847 * S_model  +    -0.56643338809607 * S_origin
28975     +         ;
MPRINT(EM_DIAGRAM):   H11 = -0.22561664220788 * S_PWR_displacement + 0.29279986935289 * S_SQRT_weight + -0.08154144101082 * S_acceleration + -1.57373487646847 * S_model + -0.56643338809607 * S_origin ;
28976     +   H12  =     4.93599986000727 * S_PWR_displacement  +    -3.01836024392518 *
28977     +        S_SQRT_weight  +     0.41423051735248 * S_acceleration
28978     +          +      0.9905881549869 * S_model  +     5.10007136657153 * S_origin
28979     +         ;
MPRINT(EM_DIAGRAM):   H12 = 4.93599986000727 * S_PWR_displacement + -3.01836024392518 * S_SQRT_weight + 0.41423051735248 * S_acceleration + 0.9905881549869 * S_model + 5.10007136657153 * S_origin ;
28980     +   H13  =    -1.53185013413527 * S_PWR_displacement  +     2.07646959989326 *
28981     +        S_SQRT_weight  +     0.62803777105863 * S_acceleration
28982     +          +    -0.48474075845178 * S_model  +    -2.46960471429882 * S_origin
28983     +         ;
MPRINT(EM_DIAGRAM):   H13 = -1.53185013413527 * S_PWR_displacement + 2.07646959989326 * S_SQRT_weight + 0.62803777105863 * S_acceleration + -0.48474075845178 * S_model + -2.46960471429882 * S_origin ;
28984     +   H14  =     1.96220002879875 * S_PWR_displacement  +    -2.87264187685342 *
28985     +        S_SQRT_weight  +    -0.33516368597319 * S_acceleration
28986     +          +    -2.66240440595274 * S_model  +     2.74431141979393 * S_origin
28987     +         ;
MPRINT(EM_DIAGRAM):   H14 = 1.96220002879875 * S_PWR_displacement + -2.87264187685342 * S_SQRT_weight + -0.33516368597319 * S_acceleration + -2.66240440595274 * S_model + 2.74431141979393 * S_origin ;
28988     +   H15  =    -4.48005247601382 * S_PWR_displacement  +    -0.00584042704999 *
28989     +        S_SQRT_weight  +    -1.88583017304181 * S_acceleration
28990     +          +     0.28789605983299 * S_model  +     0.01833307183986 * S_origin
28991     +         ;
MPRINT(EM_DIAGRAM):   H15 = -4.48005247601382 * S_PWR_displacement + -0.00584042704999 * S_SQRT_weight + -1.88583017304181 * S_acceleration + 0.28789605983299 * S_model + 0.01833307183986 * S_origin ;
28992     +   H11  = H11  +    -0.32589822322206 * G_horsepower0
28993     +          +    -2.11513303881614 * G_horsepower1  +     0.24624362754708 *
28994     +        G_horsepower2  +    -0.20585055130122 * G_horsepower3
28995     +          +    -0.19436717896363 * G_horsepower4  +     0.16856024419836 *
28996     +        G_horsepower5  +     -0.3165843590158 * G_horsepower6 ;
MPRINT(EM_DIAGRAM):   H11 = H11 + -0.32589822322206 * G_horsepower0 + -2.11513303881614 * G_horsepower1 + 0.24624362754708 * G_horsepower2 + -0.20585055130122 * G_horsepower3 + -0.19436717896363 * G_horsepower4 + 0.16856024419836 * G_horsepower5 +
-0.3165843590158 * G_horsepower6 ;
28997     +   H12  = H12  +      -1.053307301652 * G_horsepower0
28998     +          +    -1.34604130948168 * G_horsepower1  +     2.53331408689217 *
28999     +        G_horsepower2  +    -0.88094896944232 * G_horsepower3
29000     +          +    -0.04212737578867 * G_horsepower4  +     1.70833493332698 *
29001     +        G_horsepower5  +     0.50679394243914 * G_horsepower6 ;
MPRINT(EM_DIAGRAM):   H12 = H12 + -1.053307301652 * G_horsepower0 + -1.34604130948168 * G_horsepower1 + 2.53331408689217 * G_horsepower2 + -0.88094896944232 * G_horsepower3 + -0.04212737578867 * G_horsepower4 + 1.70833493332698 * G_horsepower5 +
0.50679394243914 * G_horsepower6 ;
29002     +   H13  = H13  +    -1.10735170928115 * G_horsepower0
29003     +          +    -1.27815205151561 * G_horsepower1  +    -2.93732966593975 *
29004     +        G_horsepower2  +     0.26560257283006 * G_horsepower3
29005     +          +     1.27772842560416 * G_horsepower4  +      0.4182236705835 *
29006     +        G_horsepower5  +     0.96211923165101 * G_horsepower6 ;
MPRINT(EM_DIAGRAM):   H13 = H13 + -1.10735170928115 * G_horsepower0 + -1.27815205151561 * G_horsepower1 + -2.93732966593975 * G_horsepower2 + 0.26560257283006 * G_horsepower3 + 1.27772842560416 * G_horsepower4 + 0.4182236705835 * G_horsepower5 +
0.96211923165101 * G_horsepower6 ;
29007     +   H14  = H14  +     0.70529046022495 * G_horsepower0
29008     +          +        5.00762903292 * G_horsepower1  +     3.12940883992694 *
29009     +        G_horsepower2  +    -0.47131349103044 * G_horsepower3
29010     +          +    -2.50517134874503 * G_horsepower4  +    -0.23400568544976 *
29011     +        G_horsepower5  +    -4.01167816695482 * G_horsepower6 ;
MPRINT(EM_DIAGRAM):   H14 = H14 + 0.70529046022495 * G_horsepower0 + 5.00762903292 * G_horsepower1 + 3.12940883992694 * G_horsepower2 + -0.47131349103044 * G_horsepower3 + -2.50517134874503 * G_horsepower4 + -0.23400568544976 * G_horsepower5 +
-4.01167816695482 * G_horsepower6 ;
29012     +   H15  = H15  +    -0.83580412810395 * G_horsepower0
29013     +          +     0.33584823926172 * G_horsepower1  +     1.47861687233833 *
29014     +        G_horsepower2  +     0.29972014231897 * G_horsepower3
29015     +          +    -0.40796294853021 * G_horsepower4  +    -0.61530226688032 *
29016     +        G_horsepower5  +    -1.22502721368356 * G_horsepower6 ;
MPRINT(EM_DIAGRAM):   H15 = H15 + -0.83580412810395 * G_horsepower0 + 0.33584823926172 * G_horsepower1 + 1.47861687233833 * G_horsepower2 + 0.29972014231897 * G_horsepower3 + -0.40796294853021 * G_horsepower4 + -0.61530226688032 * G_horsepower5 +
-1.22502721368356 * G_horsepower6 ;
29017     +   H11  =    -1.25220742338907 + H11 ;
MPRINT(EM_DIAGRAM):   H11 = -1.25220742338907 + H11 ;
29018     +   H12  =     3.55054085911683 + H12 ;
MPRINT(EM_DIAGRAM):   H12 = 3.55054085911683 + H12 ;
29019     +   H13  =    -1.57744423775478 + H13 ;
MPRINT(EM_DIAGRAM):   H13 = -1.57744423775478 + H13 ;
29020     +   H14  =     1.61611384879506 + H14 ;
MPRINT(EM_DIAGRAM):   H14 = 1.61611384879506 + H14 ;
29021     +   H15  =    -2.43404899996786 + H15 ;
MPRINT(EM_DIAGRAM):   H15 = -2.43404899996786 + H15 ;
29022     +   H11  = TANH(H11 );
MPRINT(EM_DIAGRAM):   H11 = TANH(H11 );
29023     +   H12  = TANH(H12 );
MPRINT(EM_DIAGRAM):   H12 = TANH(H12 );
29024     +   H13  = TANH(H13 );
MPRINT(EM_DIAGRAM):   H13 = TANH(H13 );
29025     +   H14  = TANH(H14 );
MPRINT(EM_DIAGRAM):   H14 = TANH(H14 );
29026     +   H15  = TANH(H15 );
MPRINT(EM_DIAGRAM):   H15 = TANH(H15 );
29027     +END;
MPRINT(EM_DIAGRAM):   END;
29028     +ELSE DO;
MPRINT(EM_DIAGRAM):   ELSE DO;
29029     +   H11  = .;
MPRINT(EM_DIAGRAM):   H11 = .;
29030     +   H12  = .;
MPRINT(EM_DIAGRAM):   H12 = .;
29031     +   H13  = .;
MPRINT(EM_DIAGRAM):   H13 = .;
29032     +   H14  = .;
MPRINT(EM_DIAGRAM):   H14 = .;
29033     +   H15  = .;
MPRINT(EM_DIAGRAM):   H15 = .;
29034     +END;
MPRINT(EM_DIAGRAM):   END;
29035     +*** *************************;
MPRINT(EM_DIAGRAM):   *** *************************;
29036     +*** Writing the Node intervalTargets ;
MPRINT(EM_DIAGRAM):   *** Writing the Node intervalTargets ;
29037     +*** *************************;
MPRINT(EM_DIAGRAM):   *** *************************;
29038     +IF _DM_BAD EQ 0 THEN DO;
MPRINT(EM_DIAGRAM):   IF _DM_BAD EQ 0 THEN DO;
29039     +   P_mpg  =     4.35521208192278 * H11  +    -3.55839496594162 * H12
29040     +          +    -5.14861993092215 * H13  +    -2.82316167679099 * H14
29041     +          +     2.90190723352924 * H15 ;
MPRINT(EM_DIAGRAM):   P_mpg = 4.35521208192278 * H11 + -3.55839496594162 * H12 + -5.14861993092215 * H13 + -2.82316167679099 * H14 + 2.90190723352924 * H15 ;
29042     +   P_mpg  = P_mpg  +     3.23232456419777 * S_PWR_displacement
29043     +          +    -2.67328859312353 * S_SQRT_weight  +     1.92259283968828 *
29044     +        S_acceleration  +     3.07674646933812 * S_model
29045     +          +     1.60808322499289 * S_origin ;
MPRINT(EM_DIAGRAM):   P_mpg = P_mpg + 3.23232456419777 * S_PWR_displacement + -2.67328859312353 * S_SQRT_weight + 1.92259283968828 * S_acceleration + 3.07674646933812 * S_model + 1.60808322499289 * S_origin ;
29046     +   P_mpg  = P_mpg  +    -9.00526279781947 * G_horsepower0
29047     +          +    -2.85437315145606 * G_horsepower1  +    -4.83234195044209 *
29048     +        G_horsepower2  +    -1.19030839841495 * G_horsepower3
29049     +          +      1.2579767801169 * G_horsepower4  +     2.09998268656574 *
29050     +        G_horsepower5  +     2.95490641856222 * G_horsepower6 ;
MPRINT(EM_DIAGRAM):   P_mpg = P_mpg + -9.00526279781947 * G_horsepower0 + -2.85437315145606 * G_horsepower1 + -4.83234195044209 * G_horsepower2 + -1.19030839841495 * G_horsepower3 + 1.2579767801169 * G_horsepower4 + 2.09998268656574 * G_horsepower5 +
2.95490641856222 * G_horsepower6 ;
29051     +   P_mpg  =     29.6876860089066 + P_mpg ;
MPRINT(EM_DIAGRAM):   P_mpg = 29.6876860089066 + P_mpg ;
29052     +END;
MPRINT(EM_DIAGRAM):   END;
29053     +ELSE DO;
MPRINT(EM_DIAGRAM):   ELSE DO;
29054     +   P_mpg  = .;
MPRINT(EM_DIAGRAM):   P_mpg = .;
29055     +END;
MPRINT(EM_DIAGRAM):   END;
29056     +IF _DM_BAD EQ 1 THEN DO;
MPRINT(EM_DIAGRAM):   IF _DM_BAD EQ 1 THEN DO;
29057     +   P_mpg  =     23.5238993710691;
MPRINT(EM_DIAGRAM):   P_mpg = 23.5238993710691;
29058     +END;
MPRINT(EM_DIAGRAM):   END;
29059     +*** *****************************;
MPRINT(EM_DIAGRAM):   *** *****************************;
29060     +*** Writing the Residuals  of the Node intervalTargets ;
MPRINT(EM_DIAGRAM):   *** Writing the Residuals of the Node intervalTargets ;
29061     +*** ******************************;
MPRINT(EM_DIAGRAM):   *** ******************************;
29062     +IF MISSING( mpg ) THEN R_mpg  = . ;
MPRINT(EM_DIAGRAM):   IF MISSING( mpg ) THEN R_mpg = . ;
29063     +ELSE R_mpg  = mpg  - P_mpg ;
MPRINT(EM_DIAGRAM):   ELSE R_mpg = mpg - P_mpg ;
29064     +********************************;
MPRINT(EM_DIAGRAM):   ********************************;
29065     +*** End Scoring Code for Neural;
MPRINT(EM_DIAGRAM):   *** End Scoring Code for Neural;
29066     +********************************;
MPRINT(EM_DIAGRAM):   ********************************;
29067     +drop
29068     +H11
29069     +H12
29070     +H13
29071     +H14
29072     +H15
29073     +;
MPRINT(EM_DIAGRAM):   drop H11 H12 H13 H14 H15 ;
29074     +drop S_:;
MPRINT(EM_DIAGRAM):   drop S_:;
NOTE: %INCLUDE (level 1) ending.
MPRINT(EM_DIAGRAM):   run;
29075      run;
 
NOTE: DATA STEP view saved on file EMWS2.NEURAL_VALIDATE.
NOTE: A stored DATA STEP view cannot run under a different operating system.
NOTE: View EMWS2.VARSEL_VALIDATE.VIEW used (Total process time):
      real time           0.13 seconds
      cpu time            0.10 seconds
 
NOTE: DATA statement used (Total process time):
      real time           0.15 seconds
      cpu time            0.14 seconds
 
 
MPRINT(EM_DIAGRAM):   quit;
29076      quit;
29077      filename emflow;
MPRINT(EM_DIAGRAM):   filename emflow;
NOTE: Fileref EMFLOW has been deassigned.
29078      *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):    *------------------------------------------------------------*;
29079      * Neural: Computing metadata for TRAIN data;
MPRINT(EM_DIAGRAM):   * Neural: Computing metadata for TRAIN data;
29080      *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
 
NOTE: View EMWS2.NEURAL_TRAIN.VIEW used (Total process time):
      real time           0.14 seconds
      cpu time            0.15 seconds
 
MPRINT(EM_DIAGRAM):    *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * &nodeid: Computing Metadata for TRAIN data;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   filename _delta "C:\Users\AutoLogon\Desktop\Roshan Seneca\SEM 2\ROSHAN SEM 2\BAN 210\Final Project\Final Project-Roshan Nair\Workspaces\EMWS2\Neural\CDELTA_TRAIN.sas";
MPRINT(EMADVISECOLUMNS):   proc display c=sashelp.emmeta.advisecolumns.scl;
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):    options validvarname=any;
MPRINT(EMADVISECOLUMNS):   proc contents data=EMWS2.Neural_TRAIN out=_tempAdvisor noprint;
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):   options validvarname=V7;
MPRINT(EMADVISECOLUMNS):    data _null_;
MPRINT(EMADVISECOLUMNS):   dsid = open('EMWS2.Neural_TRAIN');
MPRINT(EMADVISECOLUMNS):   call symput('_dsidTable', strip(put(dsid, best.)));
MPRINT(EMADVISECOLUMNS):   if dsid then do;
MPRINT(EMADVISECOLUMNS):   call symput('_engineTable', attrc(dsid, 'ENGINE'));
MPRINT(EMADVISECOLUMNS):   dsid = close(dsid);
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):    proc contents data=EMWS2.Neural_TRAIN out=WORK.M1P8SENY noprint;
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):    data WORK.M1P8SENY;
MPRINT(EMADVISECOLUMNS):   length NAME $ 64 TYPE $ 1 LABEL $ 200 FORMAT $ 36 INFORMAT $36 INDEX $ 1 INDEXTYPE $ 9;
MPRINT(EMADVISECOLUMNS):   label NAME =;
MPRINT(EMADVISECOLUMNS):   set WORK.M1P8SENY(keep=name type length label format formatl formatd informat informl informd idxusage rename=(type=itype));
MPRINT(EMADVISECOLUMNS):   if itype = 1 then type = 'N';
MPRINT(EMADVISECOLUMNS):   else type = 'C';
MPRINT(EMADVISECOLUMNS):   if formatl > 0 then do;
MPRINT(EMADVISECOLUMNS):   if format ne '' then do;
MPRINT(EMADVISECOLUMNS):   if type='N' then format = strip(format)!!strip(put(formatl, best12.))!!'.'!!strip(put(formatd, best12.));
MPRINT(EMADVISECOLUMNS):   else format = strip(format)!!strip(put(formatl, best12.))!!'.';
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else format = strip(put(formatl, best12.))!!'.'!!strip(put(formatd, best12.));
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else if format ne '' then format = strip(format)!!'.';
MPRINT(EMADVISECOLUMNS):   if informl > 0 then do;
MPRINT(EMADVISECOLUMNS):   if informat ne ' ' then do;
MPRINT(EMADVISECOLUMNS):   if type='N' then informat = strip(informat)!!strip(put(informl, best12.))!!'.'!!strip(put(informd, best12.));
MPRINT(EMADVISECOLUMNS):   else informat = strip(informat)!!strip(put(informl, best12.))!!'.';
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else informat = strip(put(informl, best12.))!!'.'!!strip(put(informd, best12.));
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else if informat ne '' then informat = strip(informat)!!'.';
MPRINT(EMADVISECOLUMNS):   if idxusage = 'NONE' then index ="N";
MPRINT(EMADVISECOLUMNS):   else index = "Y";
MPRINT(EMADVISECOLUMNS):   indextype = idxusage;
MPRINT(EMADVISECOLUMNS):   drop idxusage itype formatl formatd informl informd;
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):    data WORK.M1P8SENY;
MPRINT(EMADVISECOLUMNS):   length UNAME $64;
MPRINT(EMADVISECOLUMNS):   set WORK.M1P8SENY;
MPRINT(EMADVISECOLUMNS):   UNAME = upcase(NAME);
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):    proc sort data=WORK.M235E_GM NOTHREADS;
MPRINT(EMADVISECOLUMNS):   by UNAME;
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):    data WORK.M235E_GM;
MPRINT(EMADVISECOLUMNS):   drop UNAME;
MPRINT(EMADVISECOLUMNS):   set WORK.M235E_GM;
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):    data WORK.M0UDWI_A(keep=NAME ATTR);
MPRINT(EMADVISECOLUMNS):   length ATTR $ 20;
MPRINT(EMADVISECOLUMNS):   set WORK.M235E_GM;
MPRINT(EMADVISECOLUMNS):   if level ne "INTERVAL" then do;
MPRINT(EMADVISECOLUMNS):   if order = ' ' then do;
MPRINT(EMADVISECOLUMNS):   attr = 'ORDER';
MPRINT(EMADVISECOLUMNS):   output;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   if format ne ' ' and formattype = ' ' then do;
MPRINT(EMADVISECOLUMNS):   attr = 'FORMATTYPE';
MPRINT(EMADVISECOLUMNS):   output;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   if role = ' ' then do;
MPRINT(EMADVISECOLUMNS):   attr = 'ROLE';
MPRINT(EMADVISECOLUMNS):   output;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   if level = ' ' then do;
MPRINT(EMADVISECOLUMNS):   attr = 'LEVEL';
MPRINT(EMADVISECOLUMNS):   output;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   if type = ' ' then do;
MPRINT(EMADVISECOLUMNS):   attr = 'TYPE';
MPRINT(EMADVISECOLUMNS):   output;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   if index = ' ' then do;
MPRINT(EMADVISECOLUMNS):   attr = 'INDEX';
MPRINT(EMADVISECOLUMNS):   output;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   if report = ' ' then do;
MPRINT(EMADVISECOLUMNS):   attr = 'REPORT';
MPRINT(EMADVISECOLUMNS):   output;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):   proc sort NOTHREADS;
MPRINT(EMADVISECOLUMNS):   by attr;
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):    data WORK.M235E_GM;
MPRINT(EMADVISECOLUMNS):   length NAME $64 ROLE $ 32 LEVEL $ 10 ORDER $ 8 CREATOR $32 FORMATTYPE $ 10 FAMILY $ 10 LOWERLIMIT 8 UPPERLIMIT 8 REPORT $1 DISTRIBUTION $ 20 COMMENT $64;
MPRINT(EMADVISECOLUMNS):   length levelAssigned 8 roleAssigned 8 PRICE 8;
MPRINT(EMADVISECOLUMNS):   set WORK.M235E_GM;
MPRINT(EMADVISECOLUMNS):   if formattype = ' ' then do;
MPRINT(EMADVISECOLUMNS):   if format ne ' ' then do;
MPRINT(EMADVISECOLUMNS):   if type = 'N' then do;
MPRINT(EMADVISECOLUMNS):   pos = indexc(format,'.1234567890');
MPRINT(EMADVISECOLUMNS):   if pos > 1 then tempfmt = substr(format,1, pos-1);
MPRINT(EMADVISECOLUMNS):   else tempfmt = ' ';
MPRINT(EMADVISECOLUMNS):   flen = length(tempfmt);
MPRINT(EMADVISECOLUMNS):   select;
MPRINT(EMADVISECOLUMNS):   when(tempfmt in ("DATE" "DAY" "DDMMYY" "DOWNAME" "JULDAY" "JULIAN" "MMDDYY" "MMDDYYD" "MMDDYYC" "MMDDYYN" "MMDDYYP" "MMDDYYS" "MONNAME" "MONTH" "MONYY" "NENGO" "QTR" "QTRR" "WEEKDATE" "WEEKDATX" "WEEKDAY" "WORDDATE" "WORDDATX"
"YEAR" "YYMMDD" "YYMON" "YYMMDDC" "YYMMDDD" "YYMMDDN" "YYMMDDP" "YYMMDDS" "EURDFDE" "NJDATE" "NLDATE" "EURDFDD" "EURDFDWN" "EURDFMN" "EURDFMY" "EURDFWK" "EURDFWKX" "EURDFWDX" "EURDFDN" "EURDFDE" )) formattype = 'DATE';
MPRINT(EMADVISECOLUMNS):   when(tempfmt in ("DATETIME" "EURDFDT" "TOD" )) formattype = "DATETIME";
MPRINT(EMADVISECOLUMNS):   when(tempfmt in ("HHMM" "HOUR" "MMSS" "TIME" "TIMEAMPM" )) formattype = "TIME";
MPRINT(EMADVISECOLUMNS):   when(tempfmt in ("COMMA" "COMMAX" "DOLLAR" "DOLLARX" "E" "FRACT" "NEGPAREN" "PERCENT")) formattype="QUANTITY";
MPRINT(EMADVISECOLUMNS):   when(tempfmt in ("BINARY" "HEX" "IB" "OCTAL" "PD" "PIB" "PK" "RB" "SSN" "Z" "ZD")) formattype = "CODING";
MPRINT(EMADVISECOLUMNS):   otherwise do;
MPRINT(EMADVISECOLUMNS):   formattype = "USER";
MPRINT(EMADVISECOLUMNS):   if compress(tempfmt, '0123456789.', '') = '' then formattype='NUM';
MPRINT(EMADVISECOLUMNS):   else if substr(tempfmt, 1, 6)='NLDATE' then formattype = "DATE";
MPRINT(EMADVISECOLUMNS):   else if substr(tempfmt, 1, 6)='NLDATM' then formattype = "DATETIME";
MPRINT(EMADVISECOLUMNS):   else if substr(tempfmt, 1, 4)='NLTIM' then formattype = "TIME";
MPRINT(EMADVISECOLUMNS):   else if flen >= 4 then do;
MPRINT(EMADVISECOLUMNS):   str = substr(tempfmt,1,4);
MPRINT(EMADVISECOLUMNS):   if str in ("MMYY" "YYMM" "YYQR") then formattype ="DATE";
MPRINT(EMADVISECOLUMNS):   else if str = "S370" then formattype = "CODING";
MPRINT(EMADVISECOLUMNS):   else if str = "BEST" then formattype = "NUM";
MPRINT(EMADVISECOLUMNS):   drop str;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else if flen >=3 and substr(tempfmt,1,3) = "YYQ" then formatType = "DATE";
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   drop flen tempfmt pos;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else do;
MPRINT(EMADVISECOLUMNS):   formatType = "CATEGORY";
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   if formatType = "NUM" then do;
MPRINT(EMADVISECOLUMNS):   if index = "Y" then formatType = "DISCRETE";
MPRINT(EMADVISECOLUMNS):   else formatType = "QUANTITY";
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   if level = ' ' then do;
MPRINT(EMADVISECOLUMNS):   if formatType in ("CATEGORY", "CODING", "ID") or type = "C" then level = "NOMINAL";
MPRINT(EMADVISECOLUMNS):   else level = "INTERVAL";
MPRINT(EMADVISECOLUMNS):   levelAssigned = 1;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else level = upcase(level);
MPRINT(EMADVISECOLUMNS):   if role = ' ' then do;
MPRINT(EMADVISECOLUMNS):   length name_prefix $8 _uname $64;
MPRINT(EMADVISECOLUMNS):   drop name_prefix _uname _freqflag;
MPRINT(EMADVISECOLUMNS):   retain _freqflag;
MPRINT(EMADVISECOLUMNS):   if LENGTH> 80 then ROLE = 'TEXT';
MPRINT(EMADVISECOLUMNS):   _uname = upcase(NAME);
MPRINT(EMADVISECOLUMNS):   select(_uname);
MPRINT(EMADVISECOLUMNS):   when('_PARTIND_') do;
MPRINT(EMADVISECOLUMNS):   ROLE = 'ID';
MPRINT(EMADVISECOLUMNS):   LEVEL = 'NOMINAL';
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   when('_WARN_') ROLE = 'ASSESS';
MPRINT(EMADVISECOLUMNS):   when('EM_SEGMENT') do;
MPRINT(EMADVISECOLUMNS):   ROLE = 'SEGMENT';
MPRINT(EMADVISECOLUMNS):   LEVEL = 'NOMINAL';
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   when('_NODE_') do;
MPRINT(EMADVISECOLUMNS):   ROLE = 'SEGMENT';
MPRINT(EMADVISECOLUMNS):   LEVEL = 'NOMINAL';
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   when('EM_CLASSTARGET') ROLE = 'ASSESS';
MPRINT(EMADVISECOLUMNS):   when('EM_VALUETARGET') ROLE = 'ASSESS';
MPRINT(EMADVISECOLUMNS):   when('EM_PREDICTION') ROLE = 'PREDICT';
MPRINT(EMADVISECOLUMNS):   when('EM_PROBABILITY') ROLE = 'PREDICT';
MPRINT(EMADVISECOLUMNS):   when('EM_EVENTPROBABILITY') ROLE = 'PREDICT';
MPRINT(EMADVISECOLUMNS):   when('EM_CLASSIFICATION') ROLE = 'CLASSIFICATION';
MPRINT(EMADVISECOLUMNS):   when('EM_DECISION') ROLE = 'DECISION';
MPRINT(EMADVISECOLUMNS):   when('EM_PROFIT') ROLE = 'ASSESS';
MPRINT(EMADVISECOLUMNS):   when('EM_LOSS') ROLE = 'ASSESS';
MPRINT(EMADVISECOLUMNS):   when('EM_ROI') ROLE = 'ASSESS';
MPRINT(EMADVISECOLUMNS):   when('URI') ROLE = 'URL';
MPRINT(EMADVISECOLUMNS):   when('FILTERED') ROLE = 'TEXTLOC';
MPRINT(EMADVISECOLUMNS):   otherwise do;
MPRINT(EMADVISECOLUMNS):   if upcase(NAME) =: 'ZIP' then do;
MPRINT(EMADVISECOLUMNS):   ROLE = 'REJECTED';
MPRINT(EMADVISECOLUMNS):   LEVEL = 'NOMINAL';
MPRINT(EMADVISECOLUMNS):   COMMENT = 'Rejected by: Exceed the maximum class level of %s';
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else if upcase(NAME) in('FREQ', 'FREQUENCY') then do;
MPRINT(EMADVISECOLUMNS):   ROLE = 'FREQ';
MPRINT(EMADVISECOLUMNS):   if TYPE = 'C' then ROLE = 'INPUT';
MPRINT(EMADVISECOLUMNS):   else if _freqflag =1 then ROLE='REJECTED';
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else do;
MPRINT(EMADVISECOLUMNS):   name_prefix = scan(_uname, 1, '_');
MPRINT(EMADVISECOLUMNS):   if scan(_uname, 2, '_') = '' then name_prefix='';
MPRINT(EMADVISECOLUMNS):   if name_prefix in('F', 'I', 'U') then do;
MPRINT(EMADVISECOLUMNS):   ROLE = 'CLASSIFICATION';
MPRINT(EMADVISECOLUMNS):   LEVEL = 'NOMINAL';
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else if name_prefix in('Q') then ROLE = 'ASSESS';
MPRINT(EMADVISECOLUMNS):   else if name_prefix in('P', 'V') then ROLE = 'PREDICT';
MPRINT(EMADVISECOLUMNS):   else if name_prefix in('R', 'RS', 'RT', 'RD', 'RDS', 'RDT', 'RA', 'RAS', 'RAT') then ROLE = 'RESIDUAL';
MPRINT(EMADVISECOLUMNS):   else if name_prefix ='D' then do;
MPRINT(EMADVISECOLUMNS):   ROLE = 'DECISION';
MPRINT(EMADVISECOLUMNS):   LEVEL = 'NOMINAL';
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else if name_prefix ='B' then do;
MPRINT(EMADVISECOLUMNS):   ROLE = 'SEGMENT';
MPRINT(EMADVISECOLUMNS):   LEVEL = 'NOMINAL';
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else if name_prefix in('EP', 'BP', 'CP', 'EL', 'CL', 'BL', 'W', 'ROI', 'IC') then ROLE = 'ASSESS';
MPRINT(EMADVISECOLUMNS):   else do;
MPRINT(EMADVISECOLUMNS):   array _ROLE_ (19) $32 _TEMPORARY_ ('ASSESS','CLASSIFICATION','CENSOR', 'COST', 'CROSSID', 'DECISION', 'ID','INPUT', 'LABEL', 'MISSING','PREDICT','REFERRER','REJECTED', 'RESIDUAL','SEGMENT', 'SEQUENCE','TARGET', 'TEXT', 'TIMEID');
MPRINT(EMADVISECOLUMNS):   drop _found_ i;
MPRINT(EMADVISECOLUMNS):   _found_=0;
MPRINT(EMADVISECOLUMNS):   do i=1 to 19 until(_found_=1);
MPRINT(EMADVISECOLUMNS):   if index(_uname, trim(_ROLE_{i}))=1 then do;
MPRINT(EMADVISECOLUMNS):   ROLE=_ROLE_{i};
MPRINT(EMADVISECOLUMNS):   if ROLE = 'ID' then LEVEL = 'NOMINAL';
MPRINT(EMADVISECOLUMNS):   else if ROLE = 'SEGMENT' then LEVEL = 'NOMINAL';
MPRINT(EMADVISECOLUMNS):   else if ROLE = 'TIMEID' and TYPE='N' then LEVEL = 'INTERVAL';
MPRINT(EMADVISECOLUMNS):   _found_=1;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   if length(_uname)>2 then do;
MPRINT(EMADVISECOLUMNS):   if substr(reverse(trim(_uname)), 1, 3) = 'DI_' then do;
MPRINT(EMADVISECOLUMNS):   ROLE = 'ID';
MPRINT(EMADVISECOLUMNS):   LEVEL = 'NOMINAL';
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   if ROLE='FREQ' then _freqflag=1;
MPRINT(EMADVISECOLUMNS):   else if ROLE = 'CLASSIFICATION' then LEVEL = 'NOMINAL';
MPRINT(EMADVISECOLUMNS):   if symexist('RATEMKG_ROLE') then do;
MPRINT(EMADVISECOLUMNS):   if upcase(symget('RATEMKG_ROLE')) in('Y', 'YES') then do;
MPRINT(EMADVISECOLUMNS):   if _uname =: 'POLICY' then ROLE = 'POLICYID';
MPRINT(EMADVISECOLUMNS):   else if _uname in ('PARTITION', '_PARTIND_') then ROLE = 'PARTITION';
MPRINT(EMADVISECOLUMNS):   else if type = 'N' then do;
MPRINT(EMADVISECOLUMNS):   if _uname = 'EXPOSURE' then ROLE = 'EXPOSURE';
MPRINT(EMADVISECOLUMNS):   else if _uname = 'YEAR' then ROLE = 'YEAR';
MPRINT(EMADVISECOLUMNS):   else if _uname = 'WEIGHT' then ROLE = 'WEIGHT';
MPRINT(EMADVISECOLUMNS):   else if _uname = 'OFFSET' then ROLE = 'OFFSET';
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   if role = ' ' then do;
MPRINT(EMADVISECOLUMNS):   if formattype in('DATE', 'DATETIME', 'TIME') then role = 'TIMEID';
MPRINT(EMADVISECOLUMNS):   else role = 'INPUT';
MPRINT(EMADVISECOLUMNS):   roleAssigned = 1;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else role = upcase(role);
MPRINT(EMADVISECOLUMNS):   if REPORT = '' then REPORT = 'N';
MPRINT(EMADVISECOLUMNS):   if symexist('dmwb_product') then do;
MPRINT(EMADVISECOLUMNS):   if upcase(symget('dmwb_product')) = 'FACTORYMINER_DATASOURCE' then do;
MPRINT(EMADVISECOLUMNS):   if ROLE ^in('INPUT', 'TARGET', 'REJECTED', 'SEGMENT', 'FREQ', 'ID', 'KEY') then ROLE='REJECTED';
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):    data WORK.M235E_GM;
MPRINT(EMADVISECOLUMNS):   set WORK.M235E_GM;
MPRINT(EMADVISECOLUMNS):   label NAME = "Variable Name" TYPE = "Type" ROLE = "Role" LEVEL= "Measurement Level" ORDER= "Order" CREATOR= "Creator" FORMATTYPE= "Format Type" FAMILY= "Family" DISTRIBUTION= "Distribution" PRICE= "Price" LOWERLIMIT= "Lower
limit" UPPERLIMIT= "Upper Limit" REPORT= "Report" COMMENT= "Comment" INDEX= "Index" INDEXTYPE= "IndexType" LABEL= "Label" LENGTH= "Length";
MPRINT(EMADVISECOLUMNS):   drop levelAssigned roleAssigned;
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):
MPRINT(EM_DIAGRAM):  ;
MPRINT(EM_DIAGRAM):   proc sort data=WORK.COLUMNMETA;
MPRINT(EM_DIAGRAM):   by NAME;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * &nodeid: Merge incoming metadata;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   proc contents data=EMWS2.Varsel_TRAIN noprint out=_temp2(keep=NAME);
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   proc sort data=_temp2;
MPRINT(EM_DIAGRAM):   by NAME;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   proc sort data=EMWS2.Varsel_CMeta_TRAIN out=_temp;
MPRINT(EM_DIAGRAM):   by NAME;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   data EMWS2.Neural_CMeta_TRAIN;
MPRINT(EM_DIAGRAM):   merge WORK.COLUMNMETA(in=_a) _temp2(in=_b) _temp(drop=FORMAT INFORMAT LENGTH INDEX INDEXTYPE in=_c) end=_eof_;
MPRINT(EM_DIAGRAM):   by NAME;
MPRINT(EM_DIAGRAM):   if (^_a and _b) or (^_c and _a and _b) then delete;
MPRINT(EM_DIAGRAM):   if ^_b then CREATOR = "Neural";
MPRINT(EM_DIAGRAM):   length model $200;
MPRINT(EM_DIAGRAM):   label MODEL = "Model Node";
MPRINT(EM_DIAGRAM):   select(upcase(name));
MPRINT(EM_DIAGRAM):   when("P_MPG") creator = "Neural";
MPRINT(EM_DIAGRAM):   when("R_MPG") creator = "Neural";
MPRINT(EM_DIAGRAM):   when("_WARN_") creator = "Neural";
MPRINT(EM_DIAGRAM):   when("MPG") model = "Neural";
MPRINT(EM_DIAGRAM):   when('');
MPRINT(EM_DIAGRAM):   otherwise;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * Neural: Apply Delta Code;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   filename _delta;
29428      data WORK.MODELTEMP_INFO;
MPRINT(EM_DIAGRAM):    data WORK.MODELTEMP_INFO;
29429      set EMWS2.Neural_EMINFO;
MPRINT(EM_DIAGRAM):   set EMWS2.Neural_EMINFO;
29430      where DATA='Neural' and KEY ^in('DECDATA', 'DECMETA', 'IMPORTANCE', 'MODEL');
MPRINT(EM_DIAGRAM):   where DATA='Neural' and KEY ^in('DECDATA', 'DECMETA', 'IMPORTANCE', 'MODEL');
29431      run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 0 observations read from the data set EMWS2.NEURAL_EMINFO.
      WHERE (DATA='Neural') and KEY not in ('DECDATA', 'DECMETA', 'IMPORTANCE', 'MODEL');
NOTE: The data set WORK.MODELTEMP_INFO has 0 observations and 3 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
29432      data EMWS2.Neural_EMINFO;
MPRINT(EM_DIAGRAM):    data EMWS2.Neural_EMINFO;
29433      length TARGET KEY $32 DATA $43;
MPRINT(EM_DIAGRAM):   length TARGET KEY $32 DATA $43;
29434      input TARGET KEY DATA $;
MPRINT(EM_DIAGRAM):   input TARGET KEY DATA $;
29435      cards;
MPRINT(EM_DIAGRAM):   cards;
 
NOTE: The data set EMWS2.NEURAL_EMINFO has 3 observations and 3 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
MPRINT(EM_DIAGRAM):   run;
29439      run;
29440      data EMWS2.Neural_EMINFO;
MPRINT(EM_DIAGRAM):   data EMWS2.Neural_EMINFO;
29441      set EMWS2.Neural_EMINFO WORK.MODELTEMP_INFO;
MPRINT(EM_DIAGRAM):   set EMWS2.Neural_EMINFO WORK.MODELTEMP_INFO;
29442      run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 3 observations read from the data set EMWS2.NEURAL_EMINFO.
NOTE: There were 0 observations read from the data set WORK.MODELTEMP_INFO.
NOTE: The data set EMWS2.NEURAL_EMINFO has 3 observations and 3 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
29443      proc sort data = EMWS2.Neural_EMINFO NOTHREADS;
MPRINT(EM_DIAGRAM):    proc sort data = EMWS2.Neural_EMINFO NOTHREADS;
29444      by TARGET KEY;
MPRINT(EM_DIAGRAM):   by TARGET KEY;
29445      run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 3 observations read from the data set EMWS2.NEURAL_EMINFO.
NOTE: The data set EMWS2.NEURAL_EMINFO has 3 observations and 3 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
NOTE: View EMWS2.NEURAL_TRAIN.VIEW used (Total process time):
      real time           0.13 seconds
      cpu time            0.15 seconds
 
NOTE: View EMWS2.NEURAL_VALIDATE.VIEW used (Total process time):
      real time           0.24 seconds
      cpu time            0.15 seconds
 
MPRINT(EM_DIAGRAM):    proc printto;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    data _null_;
MPRINT(EM_DIAGRAM):   call symput('NLDATE', strip(put(date(), NLDATE.)));
MPRINT(EM_DIAGRAM):   call symput('NLTIME', strip(put(datetime(), NLTIME.)));
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   data _null_;
MPRINT(EM_DIAGRAM):   nldate= sasmsg("sashelp.dmine", "log_date_note", 'N', "August 11, 2022" );
MPRINT(EM_DIAGRAM):   nltime= sasmsg("sashelp.dmine", "log_time_note", 'N', "17:02:03" );
MPRINT(EM_DIAGRAM):   put "*------------------------------------------------------------*";
MPRINT(EM_DIAGRAM):   put "* Report Log";
MPRINT(EM_DIAGRAM):   put nldate;
MPRINT(EM_DIAGRAM):   put nltime;
MPRINT(EM_DIAGRAM):   put "*------------------------------------------------------------*";
MPRINT(EM_DIAGRAM):   run;
*------------------------------------------------------------*
* Report Log
Date:                August 11, 2022
Time:                17:02:03
*------------------------------------------------------------*
MPRINT(EM_DIAGRAM):    filename O1N6RPJZ "C:\Users\AutoLogon\Desktop\Roshan Seneca\SEM 2\ROSHAN SEM 2\BAN 210\Final Project\Final Project-Roshan Nair\Workspaces\EMWS2\Neural\EMREPORT.out" encoding="UTF-8" NOBOM;
MPRINT(EM_DIAGRAM):   proc printto print=O1N6RPJZ new;
MPRINT(EM_DIAGRAM):   run;
29469      data EMWS2.Neural_EMOUTFIT(rename=(_NAME_=TARGET));
MPRINT(EM_DIAGRAM):    data EMWS2.Neural_EMOUTFIT(rename=(_NAME_=TARGET));
29470      set EMWS2.Neural_OUTFIT(where=(_NAME_ eq 'OVERALL'));
MPRINT(EM_DIAGRAM):   set EMWS2.Neural_OUTFIT(where=(_NAME_ eq 'OVERALL'));
29471      label _NAME_ = "%sysfunc(sasmsg(sashelp.dmine, rpt_target_vlabel  , NOQUOTE))";
MPRINT(EM_DIAGRAM):   label _NAME_ = "Target";
29472      if _NAME_='OVERALL' then _NAME_='mpg';
MPRINT(EM_DIAGRAM):   if _NAME_='OVERALL' then _NAME_='mpg';
29473      drop _ITER_;
MPRINT(EM_DIAGRAM):   drop _ITER_;
29474      run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 1 observations read from the data set EMWS2.NEURAL_OUTFIT.
      WHERE _NAME_='OVERALL';
NOTE: The data set EMWS2.NEURAL_EMOUTFIT has 1 observations and 35 variables.
NOTE: DATA statement used (Total process time):
      real time           0.04 seconds
      cpu time            0.01 seconds
 
 
29475      proc sort data=EMWS2.Neural_EMOUTFIT nodupkey;
MPRINT(EM_DIAGRAM):   proc sort data=EMWS2.Neural_EMOUTFIT nodupkey;
29476      by TARGET;
MPRINT(EM_DIAGRAM):   by TARGET;
29477      run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 1 observations read from the data set EMWS2.NEURAL_EMOUTFIT.
NOTE: 0 observations with duplicate key values were deleted.
NOTE: The data set EMWS2.NEURAL_EMOUTFIT has 1 observations and 35 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.03 seconds
      cpu time            0.03 seconds
 
 
29478      data EMWS2.Neural_EMOUTFIT;
MPRINT(EM_DIAGRAM):    data EMWS2.Neural_EMOUTFIT;
29479      set EMWS2.Neural_EMOUTFIT;
MPRINT(EM_DIAGRAM):   set EMWS2.Neural_EMOUTFIT;
29480      length TargetLabel $200;
MPRINT(EM_DIAGRAM):   length TargetLabel $200;
29481      label targetLabel = "%sysfunc(sasmsg(sashelp.dmine, meta_targetlabel_vlabel, NOQUOTE))";
MPRINT(EM_DIAGRAM):   label targetLabel = "Target Label";
29482      run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: Variable TargetLabel is uninitialized.
NOTE: There were 1 observations read from the data set EMWS2.NEURAL_EMOUTFIT.
NOTE: The data set EMWS2.NEURAL_EMOUTFIT has 1 observations and 36 variables.
NOTE: DATA statement used (Total process time):
      real time           0.03 seconds
      cpu time            0.00 seconds
 
 
29483      proc sort data=EMWS2.Neural_EMREPORTFIT nothreads;
MPRINT(EM_DIAGRAM):    proc sort data=EMWS2.Neural_EMREPORTFIT nothreads;
29484      by TARGET;
MPRINT(EM_DIAGRAM):   by TARGET;
29485      run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 21 observations read from the data set EMWS2.NEURAL_EMREPORTFIT.
NOTE: The data set EMWS2.NEURAL_EMREPORTFIT has 21 observations and 7 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.11 seconds
      cpu time            0.03 seconds
 
 
29486      %let _EMwarndup = 0;
29487      %let _EMtargetdup =;
29488      %let _EMASEtargetdup =;
29489      data _null_;
MPRINT(EM_DIAGRAM):    data _null_;
29490      set EMWS2.Neural_EMOUTFIT;
MPRINT(EM_DIAGRAM):   set EMWS2.Neural_EMOUTFIT;
29491      if .<_ASE_<0.000001 then do;
MPRINT(EM_DIAGRAM):   if .<_ASE_<0.000001 then do;
29492      call symput('_EMwarndup', '1');
MPRINT(EM_DIAGRAM):   call symput('_EMwarndup', '1');
29493      call symput('_EMtargetdup', target);
MPRINT(EM_DIAGRAM):   call symput('_EMtargetdup', target);
29494      call symput('_EMASEtargetdup', put(_ASE_, best.));
MPRINT(EM_DIAGRAM):   call symput('_EMASEtargetdup', put(_ASE_, best.));
29495      end;
MPRINT(EM_DIAGRAM):   end;
29496      run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 1 observations read from the data set EMWS2.NEURAL_EMOUTFIT.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
 
 
29497      proc sort data=EMWS2.Varsel_CMeta_TRAIN out=WORK.SUBSETINMETA;
MPRINT(EM_DIAGRAM):    proc sort data=EMWS2.Varsel_CMeta_TRAIN out=WORK.SUBSETINMETA;
29498      by NAME;
MPRINT(EM_DIAGRAM):   by NAME;
29499      run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 9 observations read from the data set EMWS2.VARSEL_CMETA_TRAIN.
NOTE: The data set WORK.SUBSETINMETA has 9 observations and 20 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.03 seconds
      cpu time            0.03 seconds
 
 
29500      proc sort data=EMWS2.Neural_VariableSet out=WORK.SUBSETVARSET(keep=NAME REPORT);
MPRINT(EM_DIAGRAM):   proc sort data=EMWS2.Neural_VariableSet out=WORK.SUBSETVARSET(keep=NAME REPORT);
29501      by NAME;
MPRINT(EM_DIAGRAM):   by NAME;
29502      run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 7 observations read from the data set EMWS2.NEURAL_VARIABLESET.
NOTE: The data set WORK.SUBSETVARSET has 7 observations and 2 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.27 seconds
      cpu time            0.01 seconds
 
 
29503      data WORK.ASSESS_META;
MPRINT(EM_DIAGRAM):   data WORK.ASSESS_META;
29504      merge WORK.SUBSETINMETA WORK.SUBSETVARSET;
MPRINT(EM_DIAGRAM):   merge WORK.SUBSETINMETA WORK.SUBSETVARSET;
29505      by NAME;
MPRINT(EM_DIAGRAM):   by NAME;
29506      run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 9 observations read from the data set WORK.SUBSETINMETA.
NOTE: There were 7 observations read from the data set WORK.SUBSETVARSET.
NOTE: The data set WORK.ASSESS_META has 9 observations and 20 variables.
NOTE: DATA statement used (Total process time):
      real time           0.03 seconds
      cpu time            0.03 seconds
 
 
29507      data EM_temp_assessMeta;
MPRINT(EM_DIAGRAM):    data EM_temp_assessMeta;
29508      set EMWS2.Neural_CMeta_TRAIN;
MPRINT(EM_DIAGRAM):   set EMWS2.Neural_CMeta_TRAIN;
29509      where role in('DECISION', 'PREDICT', 'RESIDUAL', 'CLASSIFICATION', 'ASSESS', 'COST');
MPRINT(EM_DIAGRAM):   where role in('DECISION', 'PREDICT', 'RESIDUAL', 'CLASSIFICATION', 'ASSESS', 'COST');
29510      run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 3 observations read from the data set EMWS2.NEURAL_CMETA_TRAIN.
      WHERE role in ('ASSESS', 'CLASSIFICATION', 'COST', 'DECISION', 'PREDICT', 'RESIDUAL');
NOTE: The data set WORK.EM_TEMP_ASSESSMETA has 3 observations and 21 variables.
NOTE: DATA statement used (Total process time):
      real time           0.03 seconds
      cpu time            0.03 seconds
 
 
29511      data EM_temp_assessdata;
MPRINT(EM_DIAGRAM):    data EM_temp_assessdata;
29512      set EMWS2.Neural_TRAIN(keep=
29513      P_mpg
29514      R_mpg
29515      _WARN_
29516      mpg
29517      );
MPRINT(EM_DIAGRAM):   set EMWS2.Neural_TRAIN(keep= P_mpg R_mpg _WARN_ mpg );
29518      run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 318 observations read from the data set EMWS2.PART_TRAIN.
NOTE: There were 318 observations read from the data set EMWS2.TRANS_TRAIN.
NOTE: There were 318 observations read from the data set EMWS2.IMPT_TRAIN.
NOTE: View EMWS2.NEURAL_TRAIN.VIEW used (Total process time):
      real time           0.21 seconds
      cpu time            0.20 seconds
 
NOTE: There were 318 observations read from the data set EMWS2.VARSEL_TRAIN.
NOTE: There were 318 observations read from the data set EMWS2.NEURAL_TRAIN.
NOTE: The data set WORK.EM_TEMP_ASSESSDATA has 318 observations and 4 variables.
NOTE: DATA statement used (Total process time):
      real time           0.24 seconds
      cpu time            0.25 seconds
 
 
MPRINT(EM_DIAGRAM):    data WORK._RESMETA;
MPRINT(EM_DIAGRAM):   length NAME $32 LEVEL $8 ROLE $32 type $1;
MPRINT(EM_DIAGRAM):   NAME="R_mpg";
MPRINT(EM_DIAGRAM):   ROLE='INPUT';
MPRINT(EM_DIAGRAM):   LEVEL='INTERVAL';
MPRINT(EM_DIAGRAM):   TYPE='N';
MPRINT(EM_DIAGRAM):   output;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    *------------------------------------------------------------* ;
MPRINT(EM_DIAGRAM):   * Neural: STDIZE Variables Macro ;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------* ;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * Neural: Computing Summary Statistics;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   proc stdize data = EM_temp_assessdata out=_null_ outstat=WORK.Neural_STAT add=0 fuzz=1E-14 initial=MAD vardef=df method=STD mult=1 pctlmtd=ORD_STAT pctldef=2 pctlpts=( 0 5 10 15 20 25 30 35 40 45 50 55 60 65 70 75 80 85 90 95 100 ) ;
MPRINT(EM_DIAGRAM):   var
MPRINT(STDIZEVAR):   R_mpg
MPRINT(EM_DIAGRAM):  ;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   quit;
MPRINT(EM_DIAGRAM):    data WORK.NeuralBOXDATA;
MPRINT(EM_DIAGRAM):   set WORK.Neural_STAT;
MPRINT(EM_DIAGRAM):   where _TYPE_ in('LOCATION', 'SCALE', 'P0', 'P5', 'P10', 'P15', 'P20' 'P25', 'P50', 'P75', 'P80', 'P85', 'P90', 'P95', 'P100');
MPRINT(EM_DIAGRAM):   if _TYPE_ = 'LOCATION' then _TYPE_='MEAN';
MPRINT(EM_DIAGRAM):   else if _TYPE_ = 'SCALE' then _TYPE_='STD';
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   proc sort data=WORK.NeuralBOXDATA NOTHREADS;
MPRINT(EM_DIAGRAM):   by _TYPE_;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   proc transpose data=WORK.NeuralBOXDATA out=WORK.NeuralBOXDATA;
MPRINT(EM_DIAGRAM):   id _TYPE_;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   data WORK.NeuralBOXDATA;
MPRINT(EM_DIAGRAM):   set WORK.NeuralBOXDATA;
MPRINT(EM_DIAGRAM):   UPPERWHISKER = P75 + 1.5*abs(P75 - P25);
MPRINT(EM_DIAGRAM):   LOWERWHISKER = P25 - 1.5*abs(P75 - P25);
MPRINT(EM_DIAGRAM):   if P100<=UPPERWHISKER then do;
MPRINT(EM_DIAGRAM):   UPPERWHISKER=P100;
MPRINT(EM_DIAGRAM):   P100=.;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   if P95<=UPPERWHISKER then P95=.;
MPRINT(EM_DIAGRAM):   if P90<=UPPERWHISKER then P90=.;
MPRINT(EM_DIAGRAM):   if P85<=UPPERWHISKER then P85=.;
MPRINT(EM_DIAGRAM):   if P80<=UPPERWHISKER then P80=.;
MPRINT(EM_DIAGRAM):   if LOWERWHISKER<=P0 then do;
MPRINT(EM_DIAGRAM):   LOWERWHISKER=P0;
MPRINT(EM_DIAGRAM):   P0=.;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   if LOWERWHISKER<=P20 then P20=.;
MPRINT(EM_DIAGRAM):   if LOWERWHISKER<=P15 then P15=.;
MPRINT(EM_DIAGRAM):   if LOWERWHISKER<=P10 then P10=.;
MPRINT(EM_DIAGRAM):   if LOWERWHISKER<=P5 then P5=.;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   proc transpose data=WORK.NeuralBOXDATA out=WORK.NeuralBOXDATA(rename=(COL1=VALUE _name_=_VARIABLE_)) NAME=XLABEL;
MPRINT(EM_DIAGRAM):   by _NAME_;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   data WORK.NeuralBOXDATA;
MPRINT(EM_DIAGRAM):   length XLABEL $12;
MPRINT(EM_DIAGRAM):   set WORK.NeuralBOXDATA;
MPRINT(EM_DIAGRAM):   label _VARIABLE_=;
MPRINT(EM_DIAGRAM):   label XLABEL=;
MPRINT(EM_DIAGRAM):   where VALUE ne .;
MPRINT(EM_DIAGRAM):   if XLABEL in('P100', 'P95', 'P90', 'P85', 'P80', 'P20', 'P15', 'P10', 'P5', 'P0') then XLABEL = 'OUTLIER';
MPRINT(EM_DIAGRAM):   else if XLABEL='P50' then XLABEL='MEDIAN';
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   proc sort data=WORK.NeuralBOXDATA NOTHREADS;
MPRINT(EM_DIAGRAM):   by VALUE;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    data EMWS2.Neural_EMRESIDUAL;
MPRINT(EM_DIAGRAM):   length TARGET $32 TARGETLABEL $200 DATAROLE $32;
MPRINT(EM_DIAGRAM):   label target = "Target Variable";
MPRINT(EM_DIAGRAM):   label targetlabel = "Target Label";
MPRINT(EM_DIAGRAM):   label datarole = "Data Role";
MPRINT(EM_DIAGRAM):   label VALUE = "Value";
MPRINT(EM_DIAGRAM):   label XLABEL = "Box Plot Marker";
MPRINT(EM_DIAGRAM):   label _VARIABLE_ = "Residual Variable";
MPRINT(EM_DIAGRAM):   set WORK.NeuralBOXDATA;
MPRINT(EM_DIAGRAM):   retain dataRole "TRAIN";
MPRINT(EM_DIAGRAM):   TARGET = substr(_VARIABLE_, 3);
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    data ASSESS_REPORTMETA;
MPRINT(EM_DIAGRAM):   set EMWS2.Neural_VariableSet;
MPRINT(EM_DIAGRAM):   where REPORT='Y';
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   filename temp catalog 'sashelp.emassmt.em_assess.source';
MPRINT(EM_DIAGRAM):   filename temp;
MPRINT(EM_DIAGRAM):    data _null_;
MPRINT(EM_DIAGRAM):   set EMWS2.Neural_mpg_DM;
MPRINT(EM_DIAGRAM):   where _TYPE_="TARGET";
MPRINT(EM_DIAGRAM):   call symput('ASSMT_EVENT', strip(event));
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):
MPRINT(EM_ASSESS):   data _ea_tmpdata;
MPRINT(EM_ASSESS):   set EM_temp_assessdata;
MPRINT(EM_ASSESS):   _tmpfreqvar_=1;
MPRINT(EM_ASSESS):   run;
MPRINT(EM_CHECKEMSETINIT):   DATA _NULL_;
MPRINT(EM_CHECKEMSETINIT):   EM_SETINIT = 'N';
MPRINT(EM_CHECKEMSETINIT):   IF SYSPROD('PRODNUM50') THEN EM_SETINIT = 'Y';
MPRINT(EM_CHECKEMSETINIT):   ELSE IF SYSPROD('PRODNUM448') THEN EM_SETINIT = 'Y';
MPRINT(EM_CHECKEMSETINIT):   ELSE IF SYSPROD('PRODNUM102') THEN EM_SETINIT = 'Y';
MPRINT(EM_CHECKEMSETINIT):   ELSE IF SYSPROD('PRODNUM103') THEN EM_SETINIT = 'Y';
MPRINT(EM_CHECKEMSETINIT):   CALL SYMPUT('EM_SETINIT', EM_SETINIT);
MPRINT(EM_CHECKEMSETINIT):   RUN;
MPRINT(EM_ASSESS):  ;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   * ............ Reading in reporting data set;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   DATA _NULL_;
MPRINT(EM_ASSESS):   SET ASSESS_REPORTMETA END = EOF;
MPRINT(EM_ASSESS):   IF TYPE = "C" OR UPCASE (LEVEL) IN ("NOMINAL", "BINARY" , "ORDINAL") THEN DO;
MPRINT(EM_ASSESS):   IF UPCASE (NAME) NE UPCASE ("mpg") THEN DO;
MPRINT(EM_ASSESS):   NUMCTOREPORT + 1;
MPRINT(EM_ASSESS):   CALL SYMPUTX ("REPORTC" || LEFT (PUT (NUMCTOREPORT, 5.)), NAME);
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   ELSE CALL SYMPUTX ("RPRT_TRGT", "C");
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   ELSE IF TYPE = "N" THEN DO;
MPRINT(EM_ASSESS):   IF UPCASE(NAME) NE UPCASE ("mpg") THEN DO;
MPRINT(EM_ASSESS):   NUMNTOREPORT + 1;
MPRINT(EM_ASSESS):   CALL SYMPUTX ("REPORTN" || LEFT (PUT (NUMNTOREPORT, 5.)), NAME);
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   ELSE CALL SYMPUTX ("RPRT_TRGT", "N");
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   IF EOF THEN DO;
MPRINT(EM_ASSESS):   CALL SYMPUTX ("NUMNTOREPORT", NUMNTOREPORT);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("NUMCTOREPORT", NUMCTOREPORT);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("NUMTOREPORT", SUM (NUMNTOREPORT, NUMCTOREPORT));
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   RUN;
MPRINT(EM_ASSESS):   PROC DMDB DATA = _ea_tmpdata VAROUT = VAROUT DMDBCAT = _D ;
 
 
MPRINT(EM_ASSESS):   VAR P_mpg _tmpfreqvar_ ;
MPRINT(EM_ASSESS):   FREQ _tmpfreqvar_;
MPRINT(EM_ASSESS):   RUN ;
MPRINT(EM_ASSESS):   QUIT;
MPRINT(EM_ASSESS):   DATA _NULL_ ;
MPRINT(EM_ASSESS):   * ;
MPRINT(EM_ASSESS):   * ...FLAG0_1 = ..... TARGET IS 0, 1 & EVENT = 1;
 
MPRINT(EM_ASSESS):   ;
MPRINT(EM_ASSESS):   length __event__ $ 32;
MPRINT(EM_ASSESS):   RETAIN FLAG0_1 1 NUM1 . NUM0 . __event__ "_missing_" ;
 
MPRINT(EM_ASSESS):   SET VAROUT END = EOF;
 
MPRINT(EM_ASSESS):   RETAIN CUMFREQ 0;
MPRINT(EM_ASSESS):   IF UPCASE(NAME) = UPCASE("P_mpg") THEN CUMFREQ + N ;
MPRINT(EM_ASSESS):   CALL SYMPUTX ("D_TARGET", " " );
MPRINT(EM_ASSESS):   IF EOF THEN DO;
MPRINT(EM_ASSESS):   CALL SYMPUTX ("NUMDECISIONS", 0 );
MPRINT(EM_ASSESS):   CALL SYMPUTX ("NUMOBS", CUMFREQ);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("FLAG0_1", "INTERVAL");
MPRINT(EM_ASSESS):   CALL SYMPUTX ("TARGETTYPE", "N");
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   RUN;
MPRINT(EM_ASSESS):   DATA _NULL_;
MPRINT(EM_ASSESS):   SET VAROUT END = EOF;
MPRINT(EM_ASSESS):   IF UPCASE (NAME) = UPCASE ("P_mpg") THEN DO;
MPRINT(EM_ASSESS):   IF N = 0 THEN DO;
MPRINT(EM_ASSESS):   PUT //// "          Warning: All posterior probabilities are missing values ";
MPRINT(EM_ASSESS):   PUT ///;
MPRINT(EM_ASSESS):   CALL SYMPUTX ("ALLMISS", 1);
MPRINT(EM_ASSESS):   STOP;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   ELSE CALL SYMPUTX ("ALLMISS", 0);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("MINPROB", MIN);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("MAXPROB", MAX);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("DIFF", MAX - MIN);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("NMISSPROB", NMISS);
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   ELSE IF UPCASE (NAME) = UPCASE ("_tmpfreqvar_") THEN DO;
MPRINT(EM_ASSESS):   AUXMIN = MIN - INT (MIN);
MPRINT(EM_ASSESS):   AUXMAX = MAX - INT (MAX);
MPRINT(EM_ASSESS):   IF AUXMIN > 0 OR AUXMAX > 0 THEN CALL SYMPUTX ("USEWEIGHT", "Y");
MPRINT(EM_ASSESS):   ELSE CALL SYMPUTX ("USEWEIGHT", "N");
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   RUN;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   *... Start of Interval Depvar Case;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   * ............. IF THERE IS FREQ VARIABLE OUTDIST INTERVAL;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   PROC SUMMARY DATA = _ea_tmpdata (KEEP = P_mpg mpg _tmpfreqvar_ WHERE = (mpg > .)) NWAY;
MPRINT(EM_ASSESS):   CLASS P_mpg ;
MPRINT(EM_ASSESS):   VAR mpg ;
MPRINT(EM_ASSESS):   FREQ _tmpfreqvar_ ;
MPRINT(EM_ASSESS):   OUTPUT OUT = ANYSUM (DROP = _TYPE_) MEAN = _MEANTARGET MIN = _MINTARGET MAX = _MAXTARGET ;
MPRINT(EM_ASSESS):   RUN;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   * ...... ADD BINS TO DATA ;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   * ..... INTERVAL TARGET CASE ;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   DATA WORK._TEMPSCOREDIST ( KEEP = TARGET P_LABEL LOWP UPP SCORE N _TARGETMEAN_ BIN _TARGETMIN_ _TARGETMAX_ _MEANP_ _MINP_ _MAXP_ ) WORK._TEMPRANK (KEEP = BIN TARGET DATAROLE DECILE N _TARGETMEAN_ _TARGETMIN_ _TARGETMAX_ _MEANP_ _MINP_
_MAXP_ ) ;
MPRINT(EM_ASSESS):   SET ANYSUM END = EOF;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   * ................... START OF RETAIN AREA. CONTINOUS DEP VAR ;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   RETAIN TARGET "mpg" DATAROLE "TRAIN" NUMOBS1 - NUMOBS20 0 MAXTGT1 - MAXTGT20 . MINTGT1 - MINTGT20 . MNTGT1 - MNTGT20 0 MAXPTGT1 - MAXPTGT20 . MINPTGT1 - MINPTGT20 . MNPTGT1 - MNPTGT20 0 RNUMOBS1 - RNUMOBS20 0 RMAXTGT1 - RMAXTGT20 .
RMINTGT1 - RMINTGT20 . RMNTGT1 - RMNTGT20 0 RMAXPTGT1 - RMAXPTGT20 . RMINPTGT1 - RMINPTGT20 . RMNPTGT1 - RMNPTGT20 0 ;
MPRINT(EM_ASSESS):   DROP _FREQ_ N1 NUMOBS1 - NUMOBS20 MAXTGT1 - MAXTGT20 MINTGT1 - MINTGT20 MNTGT1 - MNTGT20 MAXPTGT1 - MAXPTGT20 MINPTGT1 - MINPTGT20 MNPTGT1 - MNPTGT20 RNUMOBS1 - RNUMOBS20 RMAXTGT1 - RMAXTGT20 RMINTGT1 - RMINTGT20 RMNTGT1 - RMNTGT20
RMAXPTGT1 - RMAXPTGT20 RMINPTGT1 - RMINPTGT20 RMNPTGT1 - RMNPTGT20 ;
MPRINT(EM_ASSESS):   ARRAY NUMOBSS (20) NUMOBS1 - NUMOBS20;
MPRINT(EM_ASSESS):   ARRAY MAXTGTS (20) MAXTGT1 - MAXTGT20;
MPRINT(EM_ASSESS):   ARRAY MINTGTS (20) MINTGT1 - MINTGT20;
MPRINT(EM_ASSESS):   ARRAY MNTGTS (20) MNTGT1 - MNTGT20;
MPRINT(EM_ASSESS):   ARRAY MAXPTGTS (20) MAXPTGT1 - MAXPTGT20;
MPRINT(EM_ASSESS):   ARRAY MINPTGTS (20) MINPTGT1 - MINPTGT20;
MPRINT(EM_ASSESS):   ARRAY MNPTGTS (20) MNPTGT1 - MNPTGT20;
MPRINT(EM_ASSESS):   ARRAY RNUMOBSS (20) RNUMOBS1 - RNUMOBS20;
MPRINT(EM_ASSESS):   ARRAY RMAXTGTS (20) RMAXTGT1 - RMAXTGT20;
MPRINT(EM_ASSESS):   ARRAY RMINTGTS (20) RMINTGT1 - RMINTGT20;
MPRINT(EM_ASSESS):   ARRAY RMNTGTS (20) RMNTGT1 - RMNTGT20;
MPRINT(EM_ASSESS):   ARRAY RMAXPTGTS (20) RMAXPTGT1 - RMAXPTGT20;
MPRINT(EM_ASSESS):   ARRAY RMINPTGTS (20) RMINPTGT1 - RMINPTGT20;
MPRINT(EM_ASSESS):   ARRAY RMNPTGTS (20) RMNPTGT1 - RMNPTGT20;
MPRINT(EM_ASSESS):   IF _MEANTARGET > . THEN mpg = _MEANTARGET ;
MPRINT(EM_ASSESS):   ;
MPRINT(EM_ASSESS):   N1 + _FREQ_;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   * .......... Outdist Processing For Interval Target;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   SCRBIN = MIN (CEIL (( P_mpg - 10.274424714) / 1.7055395349), 20);
MPRINT(EM_ASSESS):   IF SCRBIN <= 0 THEN SCRBIN = 1;
MPRINT(EM_ASSESS):   SCRBIN = 20 + 1 - SCRBIN;
MPRINT(EM_ASSESS):   NUMOBSS ( SCRBIN) = SUM (NUMOBSS ( SCRBIN) , _FREQ_ );
MPRINT(EM_ASSESS):   MNTGTS ( SCRBIN) = SUM (MNTGTS ( SCRBIN), mpg * _FREQ_);
MPRINT(EM_ASSESS):   MAXTGTS ( SCRBIN) = MAX (MAXTGTS (SCRBIN), _MAXTARGET);
MPRINT(EM_ASSESS):   MINTGTS ( SCRBIN) = MIN (MINTGTS (SCRBIN), _MINTARGET);
MPRINT(EM_ASSESS):   MAXPTGTS ( SCRBIN) = MAX (MAXPTGTS ( SCRBIN), P_mpg);
MPRINT(EM_ASSESS):   MINPTGTS ( SCRBIN) = MIN (MINPTGTS ( SCRBIN), P_mpg);
MPRINT(EM_ASSESS):   MNPTGTS ( SCRBIN) = SUM (MNPTGTS ( SCRBIN), P_mpg * _FREQ_);
MPRINT(EM_ASSESS):   BIN = CEIL (N1 * 20 / 318);
MPRINT(EM_ASSESS):   IF BIN <= 0 THEN BIN = 1;
MPRINT(EM_ASSESS):   IF BIN > 20 THEN BIN = 20;
MPRINT(EM_ASSESS):   IF BIN < 1 THEN BIN = 1;
MPRINT(EM_ASSESS):   BIN = 21 - BIN;
MPRINT(EM_ASSESS):   RNUMOBSS ( BIN) = SUM (RNUMOBSS ( BIN) , _FREQ_ );
MPRINT(EM_ASSESS):   RMNTGTS ( BIN) = SUM (RMNTGTS ( BIN), mpg * _FREQ_);
MPRINT(EM_ASSESS):   RMAXTGTS ( BIN) = MAX (RMAXTGTS (BIN), _MAXTARGET);
MPRINT(EM_ASSESS):   RMINTGTS ( BIN) = MIN (RMINTGTS (BIN), _MINTARGET);
MPRINT(EM_ASSESS):   RMAXPTGTS ( BIN) = MAX (RMAXPTGTS ( BIN), P_mpg);
MPRINT(EM_ASSESS):   RMINPTGTS ( BIN) = MIN (RMINPTGTS ( BIN), P_mpg);
MPRINT(EM_ASSESS):   RMNPTGTS ( BIN) = SUM (RMNPTGTS ( BIN), P_mpg * _FREQ_);
MPRINT(EM_ASSESS):   IF EOF THEN DO;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   * Start of Outdist Area, Continuous Dep Var;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   UPP = 44.385215412;
MPRINT(EM_ASSESS):   DO SCRBIN = 1 TO 20;
MPRINT(EM_ASSESS):   LOWP = UPP - 1.7055395349;
MPRINT(EM_ASSESS):   N = NUMOBSS (SCRBIN);
MPRINT(EM_ASSESS):   IF N > 0 THEN DO;
MPRINT(EM_ASSESS):   _TARGETMEAN_ = MNTGTS (SCRBIN) / N ;
MPRINT(EM_ASSESS):   _MEANP_ = MNPTGTS (SCRBIN) / N ;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   ELSE DO;
MPRINT(EM_ASSESS):   _TARGETMEAN_ = .;
MPRINT(EM_ASSESS):   _MEANP_ = .;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   _TARGETMIN_ = MINTGTS (SCRBIN);
MPRINT(EM_ASSESS):   _TARGETMAX_ = MAXTGTS (SCRBIN);
MPRINT(EM_ASSESS):   _MINP_ = MINPTGTS (SCRBIN);
MPRINT(EM_ASSESS):   _MAXP_ = MAXPTGTS (SCRBIN);
MPRINT(EM_ASSESS):   SCORE = MEAN (UPP, LOWP);
MPRINT(EM_ASSESS):   P_LABEL = COMPBL (PUT (LOWP, 12.3)) || " - " || COMPBL (PUT (UPP, 12.3));
MPRINT(EM_ASSESS):   BIN = SCRBIN;
MPRINT(EM_ASSESS):   OUTPUT WORK._TEMPSCOREDIST;
MPRINT(EM_ASSESS):   UPP = LOWP;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   * ..... DO SCRBIN = .... ;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   * ...... Output Outranks Continuous Case ;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   DO BIN = 1 TO 20;
MPRINT(EM_ASSESS):   N = RNUMOBSS (BIN);
MPRINT(EM_ASSESS):   DECILE = BIN * 100 / 20;
MPRINT(EM_ASSESS):   IF N > 0 THEN DO;
MPRINT(EM_ASSESS):   _TARGETMEAN_ = RMNTGTS (BIN) / N ;
MPRINT(EM_ASSESS):   _MEANP_ = RMNPTGTS (BIN) / N ;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   ELSE DO;
MPRINT(EM_ASSESS):   _TARGETMEAN_ = .;
MPRINT(EM_ASSESS):   _MEANP_ = .;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   _TARGETMIN_ = RMINTGTS (BIN);
MPRINT(EM_ASSESS):   _TARGETMAX_ = RMAXTGTS (BIN);
MPRINT(EM_ASSESS):   _MINP_ = RMINPTGTS (BIN);
MPRINT(EM_ASSESS):   _MAXP_ = RMAXPTGTS (BIN);
MPRINT(EM_ASSESS):   P_LABEL = COMPBL (PUT (_MINP_, 12.3)) || " - " || COMPBL (PUT (_MAXP_, 12.3));
MPRINT(EM_ASSESS):   OUTPUT WORK._TEMPRANK;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   * ..... DO _K = 1 TO DECILEBIN ;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   * ..... IF EOF ;
MPRINT(EM_ASSESS):   LABEL BIN = "Bin" _MEANP_ = "Mean Predicted" _MINP_ = "Min Predicted" _MAXP_ = "Max Predicted" _TARGETMAX_ = "Max Target" _TARGETMEAN_= "Mean Target" _TARGETMIN_ = "Min Target" DATAROLE = "Data Role" N = "Number of Observations"
TARGET = "Target Variable" LOWP = "Lower Bound" UPP = "Upper Bound" score = "Model Score" scrbin = "Bin" DECILE = "Depth" ;
MPRINT(EM_ASSESS):   RUN;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   * ...................... End Of Interval Processing;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   * ...........Start OF Outdist Modification;
MPRINT(EM_ASSESS):   *;
 
MPRINT(EM_ASSESS):   PROC DATASETS NOLIST LIB = WORK;
MPRINT(EM_ASSESS):   MODIFY _TEMPSCOREDIST;
MPRINT(EM_ASSESS):   ;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   * .................... OUTDIST MODIFICATION LABEL AREA;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   LABEL BIN = "Bin" N = "Number of Observations" P_LABEL = "Range for Predicted" _MEANP_ = "Mean Predicted" _MINP_ = "Min Predicted" _MAXP_ = "Max Predicted" SCORE = "Model Score" ;
MPRINT(EM_ASSESS):   RUN;
MPRINT(EM_ASSESS):   QUIT;
MPRINT(EM_ASSESS):   DATA WORK._TEMPSCOREDIST;
MPRINT(EM_ASSESS):   SET WORK._TEMPSCOREDIST (WHERE = (_MEANP_ > .));
MPRINT(EM_ASSESS):   RUN;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   * ........... END OF OUTDIST MODIFICATION;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   * ...........Start of OUTRANKS Modification;
MPRINT(EM_ASSESS):   *;
 
MPRINT(EM_ASSESS):   PROC DATASETS NOLIST LIB = WORK;
MPRINT(EM_ASSESS):   MODIFY _TEMPRANK;
MPRINT(EM_ASSESS):   RUN;
MPRINT(EM_ASSESS):   QUIT;
MPRINT(EM_ASSESS):   DATA WORK._TEMPRANK;
MPRINT(EM_ASSESS):   SET WORK._TEMPRANK (WHERE = (_MEANP_ > .));
MPRINT(EM_ASSESS):   RUN;
MPRINT(EM_ASSESS):   proc datasets lib=work nolist;
MPRINT(EM_ASSESS):   delete _ea_tmpdata;
MPRINT(EM_ASSESS):   run;
MPRINT(EM_ASSESS):   quit;
MPRINT(EM_ASSESS):  ;
MPRINT(EM_ASSESS):   OPTION ERRORS = 20;
MPRINT(EM_DIAGRAM):  ;
MPRINT(EM_DIAGRAM):    data WORK._TEMPRANK;
MPRINT(EM_DIAGRAM):   length target $32 TARGETLABEL $200 dataRole $20;
MPRINT(EM_DIAGRAM):   label TARGETLABEL = "Target Label";
MPRINT(EM_DIAGRAM):   set WORK._TEMPRANK;
MPRINT(EM_DIAGRAM):   retain target "mpg";
MPRINT(EM_DIAGRAM):   retain dataRole "TRAIN";
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   data EMWS2.Neural_EMRANK;
MPRINT(EM_DIAGRAM):   set WORK._TEMPRANK;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    data WORK._TEMPSCOREDIST;
MPRINT(EM_DIAGRAM):   length target $32 TARGETLABEL $200 dataRole $20;
MPRINT(EM_DIAGRAM):   label TARGETLABEL = "Target Label";
MPRINT(EM_DIAGRAM):   set WORK._TEMPSCOREDIST;
MPRINT(EM_DIAGRAM):   retain target "mpg";
MPRINT(EM_DIAGRAM):   retain dataRole "TRAIN";
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   data EMWS2.Neural_EMSCOREDIST;
MPRINT(EM_DIAGRAM):   set WORK._TEMPSCOREDIST;
MPRINT(EM_DIAGRAM):   run;
33849      data EM_temp_assessMeta;
MPRINT(EM_DIAGRAM):    data EM_temp_assessMeta;
33850      set EMWS2.Neural_CMeta_TRAIN;
MPRINT(EM_DIAGRAM):   set EMWS2.Neural_CMeta_TRAIN;
33851      where role in('DECISION', 'PREDICT', 'RESIDUAL', 'CLASSIFICATION', 'ASSESS', 'COST');
MPRINT(EM_DIAGRAM):   where role in('DECISION', 'PREDICT', 'RESIDUAL', 'CLASSIFICATION', 'ASSESS', 'COST');
33852      run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 3 observations read from the data set EMWS2.NEURAL_CMETA_TRAIN.
      WHERE role in ('ASSESS', 'CLASSIFICATION', 'COST', 'DECISION', 'PREDICT', 'RESIDUAL');
NOTE: The data set WORK.EM_TEMP_ASSESSMETA has 3 observations and 21 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
33853      data EM_temp_assessdata;
MPRINT(EM_DIAGRAM):    data EM_temp_assessdata;
33854      set EMWS2.Neural_VALIDATE(keep=
33855      P_mpg
33856      R_mpg
33857      _WARN_
33858      mpg
33859      );
MPRINT(EM_DIAGRAM):   set EMWS2.Neural_VALIDATE(keep= P_mpg R_mpg _WARN_ mpg );
33860      run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 80 observations read from the data set EMWS2.PART_VALIDATE.
NOTE: There were 80 observations read from the data set EMWS2.TRANS_VALIDATE.
NOTE: There were 80 observations read from the data set EMWS2.IMPT_VALIDATE.
NOTE: View EMWS2.NEURAL_VALIDATE.VIEW used (Total process time):
      real time           0.14 seconds
      cpu time            0.14 seconds
 
NOTE: There were 80 observations read from the data set EMWS2.VARSEL_VALIDATE.
NOTE: There were 80 observations read from the data set EMWS2.NEURAL_VALIDATE.
NOTE: The data set WORK.EM_TEMP_ASSESSDATA has 80 observations and 4 variables.
NOTE: DATA statement used (Total process time):
      real time           0.17 seconds
      cpu time            0.18 seconds
 
 
MPRINT(EM_DIAGRAM):    data WORK._RESMETA;
MPRINT(EM_DIAGRAM):   length NAME $32 LEVEL $8 ROLE $32 type $1;
MPRINT(EM_DIAGRAM):   NAME="R_mpg";
MPRINT(EM_DIAGRAM):   ROLE='INPUT';
MPRINT(EM_DIAGRAM):   LEVEL='INTERVAL';
MPRINT(EM_DIAGRAM):   TYPE='N';
MPRINT(EM_DIAGRAM):   output;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    *------------------------------------------------------------* ;
MPRINT(EM_DIAGRAM):   * Neural: STDIZE Variables Macro ;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------* ;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * Neural: Computing Summary Statistics;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   proc stdize data = EM_temp_assessdata out=_null_ outstat=WORK.Neural_STAT add=0 fuzz=1E-14 initial=MAD vardef=df method=STD mult=1 pctlmtd=ORD_STAT pctldef=2 pctlpts=( 0 5 10 15 20 25 30 35 40 45 50 55 60 65 70 75 80 85 90 95 100 ) ;
MPRINT(EM_DIAGRAM):   var
MPRINT(STDIZEVAR):   R_mpg
MPRINT(EM_DIAGRAM):  ;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   quit;
MPRINT(EM_DIAGRAM):    data WORK.NeuralBOXDATA;
MPRINT(EM_DIAGRAM):   set WORK.Neural_STAT;
MPRINT(EM_DIAGRAM):   where _TYPE_ in('LOCATION', 'SCALE', 'P0', 'P5', 'P10', 'P15', 'P20' 'P25', 'P50', 'P75', 'P80', 'P85', 'P90', 'P95', 'P100');
MPRINT(EM_DIAGRAM):   if _TYPE_ = 'LOCATION' then _TYPE_='MEAN';
MPRINT(EM_DIAGRAM):   else if _TYPE_ = 'SCALE' then _TYPE_='STD';
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   proc sort data=WORK.NeuralBOXDATA NOTHREADS;
MPRINT(EM_DIAGRAM):   by _TYPE_;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   proc transpose data=WORK.NeuralBOXDATA out=WORK.NeuralBOXDATA;
MPRINT(EM_DIAGRAM):   id _TYPE_;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   data WORK.NeuralBOXDATA;
MPRINT(EM_DIAGRAM):   set WORK.NeuralBOXDATA;
MPRINT(EM_DIAGRAM):   UPPERWHISKER = P75 + 1.5*abs(P75 - P25);
MPRINT(EM_DIAGRAM):   LOWERWHISKER = P25 - 1.5*abs(P75 - P25);
MPRINT(EM_DIAGRAM):   if P100<=UPPERWHISKER then do;
MPRINT(EM_DIAGRAM):   UPPERWHISKER=P100;
MPRINT(EM_DIAGRAM):   P100=.;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   if P95<=UPPERWHISKER then P95=.;
MPRINT(EM_DIAGRAM):   if P90<=UPPERWHISKER then P90=.;
MPRINT(EM_DIAGRAM):   if P85<=UPPERWHISKER then P85=.;
MPRINT(EM_DIAGRAM):   if P80<=UPPERWHISKER then P80=.;
MPRINT(EM_DIAGRAM):   if LOWERWHISKER<=P0 then do;
MPRINT(EM_DIAGRAM):   LOWERWHISKER=P0;
MPRINT(EM_DIAGRAM):   P0=.;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   if LOWERWHISKER<=P20 then P20=.;
MPRINT(EM_DIAGRAM):   if LOWERWHISKER<=P15 then P15=.;
MPRINT(EM_DIAGRAM):   if LOWERWHISKER<=P10 then P10=.;
MPRINT(EM_DIAGRAM):   if LOWERWHISKER<=P5 then P5=.;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   proc transpose data=WORK.NeuralBOXDATA out=WORK.NeuralBOXDATA(rename=(COL1=VALUE _name_=_VARIABLE_)) NAME=XLABEL;
MPRINT(EM_DIAGRAM):   by _NAME_;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   data WORK.NeuralBOXDATA;
MPRINT(EM_DIAGRAM):   length XLABEL $12;
MPRINT(EM_DIAGRAM):   set WORK.NeuralBOXDATA;
MPRINT(EM_DIAGRAM):   label _VARIABLE_=;
MPRINT(EM_DIAGRAM):   label XLABEL=;
MPRINT(EM_DIAGRAM):   where VALUE ne .;
MPRINT(EM_DIAGRAM):   if XLABEL in('P100', 'P95', 'P90', 'P85', 'P80', 'P20', 'P15', 'P10', 'P5', 'P0') then XLABEL = 'OUTLIER';
MPRINT(EM_DIAGRAM):   else if XLABEL='P50' then XLABEL='MEDIAN';
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   proc sort data=WORK.NeuralBOXDATA NOTHREADS;
MPRINT(EM_DIAGRAM):   by VALUE;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    data WORK.NeuralBOXDATA;
MPRINT(EM_DIAGRAM):   length TARGET $32 TARGETLABEL $200 DATAROLE $32;
MPRINT(EM_DIAGRAM):   label target = "Target Variable";
MPRINT(EM_DIAGRAM):   label targetlabel = "Target Label";
MPRINT(EM_DIAGRAM):   label datarole = "Data Role";
MPRINT(EM_DIAGRAM):   label VALUE = "Value";
MPRINT(EM_DIAGRAM):   label XLABEL = "Box Plot Marker";
MPRINT(EM_DIAGRAM):   label _VARIABLE_ = "Residual Variable";
MPRINT(EM_DIAGRAM):   set WORK.NeuralBOXDATA;
MPRINT(EM_DIAGRAM):   retain dataRole "VALIDATE";
MPRINT(EM_DIAGRAM):   TARGET = substr(_VARIABLE_, 3);
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    data EMWS2.Neural_EMRESIDUAL;
MPRINT(EM_DIAGRAM):   set EMWS2.Neural_EMRESIDUAL WORK.NeuralBOXDATA;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    data ASSESS_REPORTMETA;
MPRINT(EM_DIAGRAM):   set EMWS2.Neural_VariableSet;
MPRINT(EM_DIAGRAM):   where REPORT='Y';
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   filename temp catalog 'sashelp.emassmt.em_assess.source';
MPRINT(EM_DIAGRAM):   filename temp;
MPRINT(EM_DIAGRAM):    data _null_;
MPRINT(EM_DIAGRAM):   set EMWS2.Neural_mpg_DM;
MPRINT(EM_DIAGRAM):   where _TYPE_="TARGET";
MPRINT(EM_DIAGRAM):   call symput('ASSMT_EVENT', strip(event));
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):
MPRINT(EM_ASSESS):   data _ea_tmpdata;
MPRINT(EM_ASSESS):   set EM_temp_assessdata;
MPRINT(EM_ASSESS):   _tmpfreqvar_=1;
MPRINT(EM_ASSESS):   run;
MPRINT(EM_CHECKEMSETINIT):   DATA _NULL_;
MPRINT(EM_CHECKEMSETINIT):   EM_SETINIT = 'N';
MPRINT(EM_CHECKEMSETINIT):   IF SYSPROD('PRODNUM50') THEN EM_SETINIT = 'Y';
MPRINT(EM_CHECKEMSETINIT):   ELSE IF SYSPROD('PRODNUM448') THEN EM_SETINIT = 'Y';
MPRINT(EM_CHECKEMSETINIT):   ELSE IF SYSPROD('PRODNUM102') THEN EM_SETINIT = 'Y';
MPRINT(EM_CHECKEMSETINIT):   ELSE IF SYSPROD('PRODNUM103') THEN EM_SETINIT = 'Y';
MPRINT(EM_CHECKEMSETINIT):   CALL SYMPUT('EM_SETINIT', EM_SETINIT);
MPRINT(EM_CHECKEMSETINIT):   RUN;
MPRINT(EM_ASSESS):  ;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   * ............ Reading in reporting data set;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   DATA _NULL_;
MPRINT(EM_ASSESS):   SET ASSESS_REPORTMETA END = EOF;
MPRINT(EM_ASSESS):   IF TYPE = "C" OR UPCASE (LEVEL) IN ("NOMINAL", "BINARY" , "ORDINAL") THEN DO;
MPRINT(EM_ASSESS):   IF UPCASE (NAME) NE UPCASE ("mpg") THEN DO;
MPRINT(EM_ASSESS):   NUMCTOREPORT + 1;
MPRINT(EM_ASSESS):   CALL SYMPUTX ("REPORTC" || LEFT (PUT (NUMCTOREPORT, 5.)), NAME);
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   ELSE CALL SYMPUTX ("RPRT_TRGT", "C");
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   ELSE IF TYPE = "N" THEN DO;
MPRINT(EM_ASSESS):   IF UPCASE(NAME) NE UPCASE ("mpg") THEN DO;
MPRINT(EM_ASSESS):   NUMNTOREPORT + 1;
MPRINT(EM_ASSESS):   CALL SYMPUTX ("REPORTN" || LEFT (PUT (NUMNTOREPORT, 5.)), NAME);
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   ELSE CALL SYMPUTX ("RPRT_TRGT", "N");
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   IF EOF THEN DO;
MPRINT(EM_ASSESS):   CALL SYMPUTX ("NUMNTOREPORT", NUMNTOREPORT);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("NUMCTOREPORT", NUMCTOREPORT);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("NUMTOREPORT", SUM (NUMNTOREPORT, NUMCTOREPORT));
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   RUN;
MPRINT(EM_ASSESS):   PROC DMDB DATA = _ea_tmpdata VAROUT = VAROUT DMDBCAT = _D ;
 
 
MPRINT(EM_ASSESS):   VAR P_mpg _tmpfreqvar_ ;
MPRINT(EM_ASSESS):   FREQ _tmpfreqvar_;
MPRINT(EM_ASSESS):   RUN ;
MPRINT(EM_ASSESS):   QUIT;
MPRINT(EM_ASSESS):   DATA _NULL_ ;
MPRINT(EM_ASSESS):   * ;
MPRINT(EM_ASSESS):   * ...FLAG0_1 = ..... TARGET IS 0, 1 & EVENT = 1;
 
MPRINT(EM_ASSESS):   ;
MPRINT(EM_ASSESS):   length __event__ $ 32;
MPRINT(EM_ASSESS):   RETAIN FLAG0_1 1 NUM1 . NUM0 . __event__ "_missing_" ;
 
MPRINT(EM_ASSESS):   SET VAROUT END = EOF;
 
MPRINT(EM_ASSESS):   RETAIN CUMFREQ 0;
MPRINT(EM_ASSESS):   IF UPCASE(NAME) = UPCASE("P_mpg") THEN CUMFREQ + N ;
MPRINT(EM_ASSESS):   CALL SYMPUTX ("D_TARGET", " " );
MPRINT(EM_ASSESS):   IF EOF THEN DO;
MPRINT(EM_ASSESS):   CALL SYMPUTX ("NUMDECISIONS", 0 );
MPRINT(EM_ASSESS):   CALL SYMPUTX ("NUMOBS", CUMFREQ);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("FLAG0_1", "INTERVAL");
MPRINT(EM_ASSESS):   CALL SYMPUTX ("TARGETTYPE", "N");
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   RUN;
MPRINT(EM_ASSESS):   DATA _NULL_;
MPRINT(EM_ASSESS):   SET VAROUT END = EOF;
MPRINT(EM_ASSESS):   IF UPCASE (NAME) = UPCASE ("P_mpg") THEN DO;
MPRINT(EM_ASSESS):   IF N = 0 THEN DO;
MPRINT(EM_ASSESS):   PUT //// "          Warning: All posterior probabilities are missing values ";
MPRINT(EM_ASSESS):   PUT ///;
MPRINT(EM_ASSESS):   CALL SYMPUTX ("ALLMISS", 1);
MPRINT(EM_ASSESS):   STOP;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   ELSE CALL SYMPUTX ("ALLMISS", 0);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("MINPROB", MIN);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("MAXPROB", MAX);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("DIFF", MAX - MIN);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("NMISSPROB", NMISS);
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   ELSE IF UPCASE (NAME) = UPCASE ("_tmpfreqvar_") THEN DO;
MPRINT(EM_ASSESS):   AUXMIN = MIN - INT (MIN);
MPRINT(EM_ASSESS):   AUXMAX = MAX - INT (MAX);
MPRINT(EM_ASSESS):   IF AUXMIN > 0 OR AUXMAX > 0 THEN CALL SYMPUTX ("USEWEIGHT", "Y");
MPRINT(EM_ASSESS):   ELSE CALL SYMPUTX ("USEWEIGHT", "N");
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   RUN;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   *... Start of Interval Depvar Case;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   * ............. IF THERE IS FREQ VARIABLE OUTDIST INTERVAL;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   PROC SUMMARY DATA = _ea_tmpdata (KEEP = P_mpg mpg _tmpfreqvar_ WHERE = (mpg > .)) NWAY;
MPRINT(EM_ASSESS):   CLASS P_mpg ;
MPRINT(EM_ASSESS):   VAR mpg ;
MPRINT(EM_ASSESS):   FREQ _tmpfreqvar_ ;
MPRINT(EM_ASSESS):   OUTPUT OUT = ANYSUM (DROP = _TYPE_) MEAN = _MEANTARGET MIN = _MINTARGET MAX = _MAXTARGET ;
MPRINT(EM_ASSESS):   RUN;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   * ...... ADD BINS TO DATA ;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   * ..... INTERVAL TARGET CASE ;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   DATA WORK._TEMPSCOREDIST ( KEEP = TARGET P_LABEL LOWP UPP SCORE N _TARGETMEAN_ BIN _TARGETMIN_ _TARGETMAX_ _MEANP_ _MINP_ _MAXP_ ) WORK._TEMPRANK (KEEP = BIN TARGET DATAROLE DECILE N _TARGETMEAN_ _TARGETMIN_ _TARGETMAX_ _MEANP_ _MINP_
_MAXP_ ) ;
MPRINT(EM_ASSESS):   SET ANYSUM END = EOF;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   * ................... START OF RETAIN AREA. CONTINOUS DEP VAR ;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   RETAIN TARGET "mpg" DATAROLE "VALIDATE" NUMOBS1 - NUMOBS20 0 MAXTGT1 - MAXTGT20 . MINTGT1 - MINTGT20 . MNTGT1 - MNTGT20 0 MAXPTGT1 - MAXPTGT20 . MINPTGT1 - MINPTGT20 . MNPTGT1 - MNPTGT20 0 RNUMOBS1 - RNUMOBS20 0 RMAXTGT1 - RMAXTGT20 .
RMINTGT1 - RMINTGT20 . RMNTGT1 - RMNTGT20 0 RMAXPTGT1 - RMAXPTGT20 . RMINPTGT1 - RMINPTGT20 . RMNPTGT1 - RMNPTGT20 0 ;
MPRINT(EM_ASSESS):   DROP _FREQ_ N1 NUMOBS1 - NUMOBS20 MAXTGT1 - MAXTGT20 MINTGT1 - MINTGT20 MNTGT1 - MNTGT20 MAXPTGT1 - MAXPTGT20 MINPTGT1 - MINPTGT20 MNPTGT1 - MNPTGT20 RNUMOBS1 - RNUMOBS20 RMAXTGT1 - RMAXTGT20 RMINTGT1 - RMINTGT20 RMNTGT1 - RMNTGT20
RMAXPTGT1 - RMAXPTGT20 RMINPTGT1 - RMINPTGT20 RMNPTGT1 - RMNPTGT20 ;
MPRINT(EM_ASSESS):   ARRAY NUMOBSS (20) NUMOBS1 - NUMOBS20;
MPRINT(EM_ASSESS):   ARRAY MAXTGTS (20) MAXTGT1 - MAXTGT20;
MPRINT(EM_ASSESS):   ARRAY MINTGTS (20) MINTGT1 - MINTGT20;
MPRINT(EM_ASSESS):   ARRAY MNTGTS (20) MNTGT1 - MNTGT20;
MPRINT(EM_ASSESS):   ARRAY MAXPTGTS (20) MAXPTGT1 - MAXPTGT20;
MPRINT(EM_ASSESS):   ARRAY MINPTGTS (20) MINPTGT1 - MINPTGT20;
MPRINT(EM_ASSESS):   ARRAY MNPTGTS (20) MNPTGT1 - MNPTGT20;
MPRINT(EM_ASSESS):   ARRAY RNUMOBSS (20) RNUMOBS1 - RNUMOBS20;
MPRINT(EM_ASSESS):   ARRAY RMAXTGTS (20) RMAXTGT1 - RMAXTGT20;
MPRINT(EM_ASSESS):   ARRAY RMINTGTS (20) RMINTGT1 - RMINTGT20;
MPRINT(EM_ASSESS):   ARRAY RMNTGTS (20) RMNTGT1 - RMNTGT20;
MPRINT(EM_ASSESS):   ARRAY RMAXPTGTS (20) RMAXPTGT1 - RMAXPTGT20;
MPRINT(EM_ASSESS):   ARRAY RMINPTGTS (20) RMINPTGT1 - RMINPTGT20;
MPRINT(EM_ASSESS):   ARRAY RMNPTGTS (20) RMNPTGT1 - RMNPTGT20;
MPRINT(EM_ASSESS):   IF _MEANTARGET > . THEN mpg = _MEANTARGET ;
MPRINT(EM_ASSESS):   ;
MPRINT(EM_ASSESS):   N1 + _FREQ_;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   * .......... Outdist Processing For Interval Target;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   SCRBIN = MIN (CEIL (( P_mpg - 12.288083561) / 1.31986909105), 20);
MPRINT(EM_ASSESS):   IF SCRBIN <= 0 THEN SCRBIN = 1;
MPRINT(EM_ASSESS):   SCRBIN = 20 + 1 - SCRBIN;
MPRINT(EM_ASSESS):   NUMOBSS ( SCRBIN) = SUM (NUMOBSS ( SCRBIN) , _FREQ_ );
MPRINT(EM_ASSESS):   MNTGTS ( SCRBIN) = SUM (MNTGTS ( SCRBIN), mpg * _FREQ_);
MPRINT(EM_ASSESS):   MAXTGTS ( SCRBIN) = MAX (MAXTGTS (SCRBIN), _MAXTARGET);
MPRINT(EM_ASSESS):   MINTGTS ( SCRBIN) = MIN (MINTGTS (SCRBIN), _MINTARGET);
MPRINT(EM_ASSESS):   MAXPTGTS ( SCRBIN) = MAX (MAXPTGTS ( SCRBIN), P_mpg);
MPRINT(EM_ASSESS):   MINPTGTS ( SCRBIN) = MIN (MINPTGTS ( SCRBIN), P_mpg);
MPRINT(EM_ASSESS):   MNPTGTS ( SCRBIN) = SUM (MNPTGTS ( SCRBIN), P_mpg * _FREQ_);
MPRINT(EM_ASSESS):   BIN = CEIL (N1 * 20 / 80);
MPRINT(EM_ASSESS):   IF BIN <= 0 THEN BIN = 1;
MPRINT(EM_ASSESS):   IF BIN > 20 THEN BIN = 20;
MPRINT(EM_ASSESS):   IF BIN < 1 THEN BIN = 1;
MPRINT(EM_ASSESS):   BIN = 21 - BIN;
MPRINT(EM_ASSESS):   RNUMOBSS ( BIN) = SUM (RNUMOBSS ( BIN) , _FREQ_ );
MPRINT(EM_ASSESS):   RMNTGTS ( BIN) = SUM (RMNTGTS ( BIN), mpg * _FREQ_);
MPRINT(EM_ASSESS):   RMAXTGTS ( BIN) = MAX (RMAXTGTS (BIN), _MAXTARGET);
MPRINT(EM_ASSESS):   RMINTGTS ( BIN) = MIN (RMINTGTS (BIN), _MINTARGET);
MPRINT(EM_ASSESS):   RMAXPTGTS ( BIN) = MAX (RMAXPTGTS ( BIN), P_mpg);
MPRINT(EM_ASSESS):   RMINPTGTS ( BIN) = MIN (RMINPTGTS ( BIN), P_mpg);
MPRINT(EM_ASSESS):   RMNPTGTS ( BIN) = SUM (RMNPTGTS ( BIN), P_mpg * _FREQ_);
MPRINT(EM_ASSESS):   IF EOF THEN DO;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   * Start of Outdist Area, Continuous Dep Var;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   UPP = 38.685465382;
MPRINT(EM_ASSESS):   DO SCRBIN = 1 TO 20;
MPRINT(EM_ASSESS):   LOWP = UPP - 1.31986909105;
MPRINT(EM_ASSESS):   N = NUMOBSS (SCRBIN);
MPRINT(EM_ASSESS):   IF N > 0 THEN DO;
MPRINT(EM_ASSESS):   _TARGETMEAN_ = MNTGTS (SCRBIN) / N ;
MPRINT(EM_ASSESS):   _MEANP_ = MNPTGTS (SCRBIN) / N ;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   ELSE DO;
MPRINT(EM_ASSESS):   _TARGETMEAN_ = .;
MPRINT(EM_ASSESS):   _MEANP_ = .;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   _TARGETMIN_ = MINTGTS (SCRBIN);
MPRINT(EM_ASSESS):   _TARGETMAX_ = MAXTGTS (SCRBIN);
MPRINT(EM_ASSESS):   _MINP_ = MINPTGTS (SCRBIN);
MPRINT(EM_ASSESS):   _MAXP_ = MAXPTGTS (SCRBIN);
MPRINT(EM_ASSESS):   SCORE = MEAN (UPP, LOWP);
MPRINT(EM_ASSESS):   P_LABEL = COMPBL (PUT (LOWP, 12.3)) || " - " || COMPBL (PUT (UPP, 12.3));
MPRINT(EM_ASSESS):   BIN = SCRBIN;
MPRINT(EM_ASSESS):   OUTPUT WORK._TEMPSCOREDIST;
MPRINT(EM_ASSESS):   UPP = LOWP;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   * ..... DO SCRBIN = .... ;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   * ...... Output Outranks Continuous Case ;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   DO BIN = 1 TO 20;
MPRINT(EM_ASSESS):   N = RNUMOBSS (BIN);
MPRINT(EM_ASSESS):   DECILE = BIN * 100 / 20;
MPRINT(EM_ASSESS):   IF N > 0 THEN DO;
MPRINT(EM_ASSESS):   _TARGETMEAN_ = RMNTGTS (BIN) / N ;
MPRINT(EM_ASSESS):   _MEANP_ = RMNPTGTS (BIN) / N ;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   ELSE DO;
MPRINT(EM_ASSESS):   _TARGETMEAN_ = .;
MPRINT(EM_ASSESS):   _MEANP_ = .;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   _TARGETMIN_ = RMINTGTS (BIN);
MPRINT(EM_ASSESS):   _TARGETMAX_ = RMAXTGTS (BIN);
MPRINT(EM_ASSESS):   _MINP_ = RMINPTGTS (BIN);
MPRINT(EM_ASSESS):   _MAXP_ = RMAXPTGTS (BIN);
MPRINT(EM_ASSESS):   P_LABEL = COMPBL (PUT (_MINP_, 12.3)) || " - " || COMPBL (PUT (_MAXP_, 12.3));
MPRINT(EM_ASSESS):   OUTPUT WORK._TEMPRANK;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   * ..... DO _K = 1 TO DECILEBIN ;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   * ..... IF EOF ;
MPRINT(EM_ASSESS):   LABEL BIN = "Bin" _MEANP_ = "Mean Predicted" _MINP_ = "Min Predicted" _MAXP_ = "Max Predicted" _TARGETMAX_ = "Max Target" _TARGETMEAN_= "Mean Target" _TARGETMIN_ = "Min Target" DATAROLE = "Data Role" N = "Number of Observations"
TARGET = "Target Variable" LOWP = "Lower Bound" UPP = "Upper Bound" score = "Model Score" scrbin = "Bin" DECILE = "Depth" ;
MPRINT(EM_ASSESS):   RUN;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   * ...................... End Of Interval Processing;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   * ...........Start OF Outdist Modification;
MPRINT(EM_ASSESS):   *;
 
MPRINT(EM_ASSESS):   PROC DATASETS NOLIST LIB = WORK;
MPRINT(EM_ASSESS):   MODIFY _TEMPSCOREDIST;
MPRINT(EM_ASSESS):   ;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   * .................... OUTDIST MODIFICATION LABEL AREA;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   LABEL BIN = "Bin" N = "Number of Observations" P_LABEL = "Range for Predicted" _MEANP_ = "Mean Predicted" _MINP_ = "Min Predicted" _MAXP_ = "Max Predicted" SCORE = "Model Score" ;
MPRINT(EM_ASSESS):   RUN;
MPRINT(EM_ASSESS):   QUIT;
MPRINT(EM_ASSESS):   DATA WORK._TEMPSCOREDIST;
MPRINT(EM_ASSESS):   SET WORK._TEMPSCOREDIST (WHERE = (_MEANP_ > .));
MPRINT(EM_ASSESS):   RUN;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   * ........... END OF OUTDIST MODIFICATION;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   * ...........Start of OUTRANKS Modification;
MPRINT(EM_ASSESS):   *;
 
MPRINT(EM_ASSESS):   PROC DATASETS NOLIST LIB = WORK;
MPRINT(EM_ASSESS):   MODIFY _TEMPRANK;
MPRINT(EM_ASSESS):   RUN;
MPRINT(EM_ASSESS):   QUIT;
MPRINT(EM_ASSESS):   DATA WORK._TEMPRANK;
MPRINT(EM_ASSESS):   SET WORK._TEMPRANK (WHERE = (_MEANP_ > .));
MPRINT(EM_ASSESS):   RUN;
MPRINT(EM_ASSESS):   proc datasets lib=work nolist;
MPRINT(EM_ASSESS):   delete _ea_tmpdata;
MPRINT(EM_ASSESS):   run;
MPRINT(EM_ASSESS):   quit;
MPRINT(EM_ASSESS):  ;
MPRINT(EM_ASSESS):   OPTION ERRORS = 20;
MPRINT(EM_DIAGRAM):  ;
MPRINT(EM_DIAGRAM):    data WORK._TEMPRANK;
MPRINT(EM_DIAGRAM):   length target $32 TARGETLABEL $200 dataRole $20;
MPRINT(EM_DIAGRAM):   label TARGETLABEL = "Target Label";
MPRINT(EM_DIAGRAM):   set WORK._TEMPRANK;
MPRINT(EM_DIAGRAM):   retain target "mpg";
MPRINT(EM_DIAGRAM):   retain dataRole "VALIDATE";
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   data EMWS2.Neural_EMRANK;
MPRINT(EM_DIAGRAM):   length target $32;
MPRINT(EM_DIAGRAM):   length TARGETLABEL $200;
MPRINT(EM_DIAGRAM):   length dataRole $20;
MPRINT(EM_DIAGRAM):   set EMWS2.Neural_EMRANK WORK._TEMPRANK;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    data WORK._TEMPSCOREDIST;
MPRINT(EM_DIAGRAM):   length target $32 TARGETLABEL $200 dataRole $20;
MPRINT(EM_DIAGRAM):   label TARGETLABEL = "Target Label";
MPRINT(EM_DIAGRAM):   set WORK._TEMPSCOREDIST;
MPRINT(EM_DIAGRAM):   retain target "mpg";
MPRINT(EM_DIAGRAM):   retain dataRole "VALIDATE";
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   data EMWS2.Neural_EMSCOREDIST;
MPRINT(EM_DIAGRAM):   length target $32;
MPRINT(EM_DIAGRAM):   length TARGETLABEL $200;
MPRINT(EM_DIAGRAM):   length dataRole $20;
MPRINT(EM_DIAGRAM):   length P_LABEL $27;
MPRINT(EM_DIAGRAM):   set EMWS2.Neural_EMSCOREDIST WORK._TEMPSCOREDIST;
MPRINT(EM_DIAGRAM):   run;
38201      %let _cn = %sysfunc(getoption(CENTER));
38202      options nocenter;
MPRINT(EM_DIAGRAM):    options nocenter;
38203      proc print data=EMWS2.Neural_EMREPORTFIT noobs label;
MPRINT(EM_DIAGRAM):   proc print data=EMWS2.Neural_EMREPORTFIT noobs label;
38204      var STAT LABEL TRAIN
38205      VALIDATE
38206      ;
MPRINT(EM_DIAGRAM):   var STAT LABEL TRAIN VALIDATE ;
38207      by TARGET TARGETLABEL;
MPRINT(EM_DIAGRAM):   by TARGET TARGETLABEL;
38208      title9 ' ';
MPRINT(EM_DIAGRAM):   title9 ' ';
38209      title10 "%sysfunc(sasmsg(sashelp.dmine, rpt_fitstat_title  , NOQUOTE))";
MPRINT(EM_DIAGRAM):   title10 "Fit Statistics";
MPRINT(EM_DIAGRAM):   run;
38210      run;
 
NOTE: There were 21 observations read from the data set EMWS2.NEURAL_EMREPORTFIT.
NOTE: The PROCEDURE PRINT printed page 13.
NOTE: PROCEDURE PRINT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
38211      title10;
MPRINT(EM_DIAGRAM):   title10;
38212      options &_cn;
MPRINT(EM_DIAGRAM):   options NOCENTER;
38213      proc datasets library=EMWS2 nolist;
MPRINT(EM_DIAGRAM):    proc datasets library=EMWS2 nolist;
38214      modify Neural_EMRANK;
MPRINT(EM_DIAGRAM):   modify Neural_EMRANK;
MPRINT(EM_DIAGRAM):   label target = "Target Variable";
38215      label target = "%sysfunc(sasmsg(sashelp.dmine, rpt_targetvar_vlabel ,   NOQUOTE))";
MPRINT(EM_DIAGRAM):   label datarole = "Data Role";
38216      label datarole = "%sysfunc(sasmsg(sashelp.dmine, rpt_datarole_vlabel ,    NOQUOTE))";
MPRINT(EM_DIAGRAM):   run;
38217      run;
 
NOTE: MODIFY was successful for EMWS2.NEURAL_EMRANK.DATA.
38218      quit;
MPRINT(EM_DIAGRAM):   quit;
 
NOTE: PROCEDURE DATASETS used (Total process time):
      real time           0.06 seconds
      cpu time            0.06 seconds
 
 
38219      %let _cn = %sysfunc(getoption(CENTER));
38220      options nocenter;
MPRINT(EM_DIAGRAM):    options nocenter;
38221      proc print data=EMWS2.Neural_EMRANK label noobs;
MPRINT(EM_DIAGRAM):   proc print data=EMWS2.Neural_EMRANK label noobs;
38222      var
38223      decile N _targetMean_ _meanP_;
MPRINT(EM_DIAGRAM):   var decile N _targetMean_ _meanP_;
38224      by
38225      notsorted DATAROLE
38226      notsorted TARGET
38227      notsorted TARGETLABEL
38228      ;
MPRINT(EM_DIAGRAM):   by notsorted DATAROLE notsorted TARGET notsorted TARGETLABEL ;
38229      title9 ' ';
MPRINT(EM_DIAGRAM):   title9 ' ';
38230      title10 "%sysfunc(sasmsg(sashelp.dmine, rpt_scoreranking_title , NOQUOTE))";
MPRINT(EM_DIAGRAM):   title10 "Assessment Score Rankings";
MPRINT(EM_DIAGRAM):   run;
38231      run;
 
NOTE: There were 38 observations read from the data set EMWS2.NEURAL_EMRANK.
NOTE: The PROCEDURE PRINT printed page 14.
NOTE: PROCEDURE PRINT used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
38232      title10;
MPRINT(EM_DIAGRAM):   title10;
38233      options &_cn;
MPRINT(EM_DIAGRAM):   options NOCENTER;
38234      proc datasets library=EMWS2 nolist;
MPRINT(EM_DIAGRAM):    proc datasets library=EMWS2 nolist;
38235      modify Neural_EMSCOREDIST;
MPRINT(EM_DIAGRAM):   modify Neural_EMSCOREDIST;
MPRINT(EM_DIAGRAM):   label target = "Target Variable";
38236      label target = "%sysfunc(sasmsg(sashelp.dmine, rpt_targetvar_vlabel ,      NOQUOTE))";
MPRINT(EM_DIAGRAM):   label datarole = "Data Role";
38237      label datarole = "%sysfunc(sasmsg(sashelp.dmine, rpt_datarole_vlabel ,    NOQUOTE))";
MPRINT(EM_DIAGRAM):   run;
38238      run;
 
NOTE: MODIFY was successful for EMWS2.NEURAL_EMSCOREDIST.DATA.
38239      quit;
MPRINT(EM_DIAGRAM):   quit;
 
NOTE: PROCEDURE DATASETS used (Total process time):
      real time           0.06 seconds
      cpu time            0.06 seconds
 
 
MPRINT(EM_DIAGRAM):    options nocenter;
MPRINT(EM_DIAGRAM):   proc print data=EMWS2.Neural_EMSCOREDIST label noobs;
MPRINT(EM_DIAGRAM):   var p_label _targetMean_ _meanp_ n score;
MPRINT(EM_DIAGRAM):   by notsorted DATAROLE notsorted TARGET notsorted TARGETLABEL ;
MPRINT(EM_DIAGRAM):   where TARGET in( "mpg" );
MPRINT(EM_DIAGRAM):   label target = "Target Variable";
MPRINT(EM_DIAGRAM):   label TARGETLABEL = "Target Label";
MPRINT(EM_DIAGRAM):   label datarole = "Data Role";
MPRINT(EM_DIAGRAM):   title9 ' ';
MPRINT(EM_DIAGRAM):   title10 "Assessment Score Distribution";
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   title10;
MPRINT(EM_DIAGRAM):   options NOCENTER;
MPRINT(EM_DIAGRAM):   proc printto;
MPRINT(EM_DIAGRAM):   run;
