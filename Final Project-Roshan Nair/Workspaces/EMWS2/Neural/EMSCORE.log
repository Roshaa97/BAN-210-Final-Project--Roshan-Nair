MPRINT(EM_DIAGRAM):    data _null_;
MPRINT(EM_DIAGRAM):   call symput('NLDATE', strip(put(date(), NLDATE.)));
MPRINT(EM_DIAGRAM):   call symput('NLTIME', strip(put(datetime(), NLTIME.)));
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   data _null_;
MPRINT(EM_DIAGRAM):   nldate= sasmsg("sashelp.dmine", "log_date_note", 'N', "August 11, 2022" );
MPRINT(EM_DIAGRAM):   nltime= sasmsg("sashelp.dmine", "log_time_note", 'N', "17:02:00" );
MPRINT(EM_DIAGRAM):   put "*------------------------------------------------------------*";
MPRINT(EM_DIAGRAM):   put "* Score Log";
MPRINT(EM_DIAGRAM):   put nldate;
MPRINT(EM_DIAGRAM):   put nltime;
MPRINT(EM_DIAGRAM):   put "*------------------------------------------------------------*";
MPRINT(EM_DIAGRAM):   run;
*------------------------------------------------------------*
* Score Log
Date:                August 11, 2022
Time:                17:02:00
*------------------------------------------------------------*
MPRINT(EM_DIAGRAM):    filename O1N2JA7S "C:\Users\AutoLogon\Desktop\Roshan Seneca\SEM 2\ROSHAN SEM 2\BAN 210\Final Project\Final Project-Roshan Nair\Workspaces\EMWS2\Neural\EMSCORE.out" encoding="UTF-8" NOBOM;
MPRINT(EM_DIAGRAM):   proc printto print=O1N2JA7S new;
MPRINT(EM_DIAGRAM):   run;
NOTE: This SAS session is using a registry in WORK.  All changes will be lost at the end of this session.
28442      data work.outkey;
MPRINT(EM_DIAGRAM):    data work.outkey;
28443      set EMWS2.Neural_OUTKEY;
MPRINT(EM_DIAGRAM):   set EMWS2.Neural_OUTKEY;
28444      if upcase(ROLE) = 'HIDDEN';
MPRINT(EM_DIAGRAM):   if upcase(ROLE) = 'HIDDEN';
28445      run;
MPRINT(EM_DIAGRAM):   run;

NOTE: There were 21 observations read from the data set EMWS2.NEURAL_OUTKEY.
NOTE: The data set WORK.OUTKEY has 5 observations and 8 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
      

28446      filename emflow "C:\Users\AutoLogon\Desktop\Roshan Seneca\SEM 2\ROSHAN SEM 2\BAN 210\Final Project\Final Project-Roshan Nair\Workspaces\EMWS2\Neural\EMFLOWSCORE.sas";
MPRINT(EM_DIAGRAM):    filename emflow "C:\Users\AutoLogon\Desktop\Roshan Seneca\SEM 2\ROSHAN SEM 2\BAN 210\Final Project\Final Project-Roshan Nair\Workspaces\EMWS2\Neural\EMFLOWSCORE.sas";
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * Neural: Scoring DATA data;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
28447      *------------------------------------------------------------*;
28448      * Neural: Scoring DATA data;
28449      *------------------------------------------------------------*;
28450      data EMWS2.Neural_TRAIN
28451      / view=EMWS2.Neural_TRAIN
28452      ;
MPRINT(EM_DIAGRAM):   data EMWS2.Neural_TRAIN / view=EMWS2.Neural_TRAIN ;
28453      set EMWS2.Varsel_TRAIN
28454      ;
MPRINT(EM_DIAGRAM):   set EMWS2.Varsel_TRAIN ;
28455      %inc emflow;
NOTE: %INCLUDE (level 1) file EMFLOW is file C:\Users\AutoLogon\Desktop\Roshan Seneca\SEM 2\ROSHAN SEM 2\BAN 210\Final Project\Final Project-Roshan Nair\Workspaces\EMWS2\Neural\EMFLOWSCORE.sas.
28456     +***********************************;
MPRINT(EM_DIAGRAM):   ***********************************;
28457     +*** Begin Scoring Code for Neural;
MPRINT(EM_DIAGRAM):   *** Begin Scoring Code for Neural;
28458     +***********************************;
MPRINT(EM_DIAGRAM):   ***********************************;
28459     +DROP _DM_BAD _EPS _NOCL_ _MAX_ _MAXP_ _SUM_ _NTRIALS;
MPRINT(EM_DIAGRAM):   DROP _DM_BAD _EPS _NOCL_ _MAX_ _MAXP_ _SUM_ _NTRIALS;
28460     + _DM_BAD = 0;
MPRINT(EM_DIAGRAM):   _DM_BAD = 0;
28461     + _NOCL_ = .;
MPRINT(EM_DIAGRAM):   _NOCL_ = .;
28462     + _MAX_ = .;
MPRINT(EM_DIAGRAM):   _MAX_ = .;
28463     + _MAXP_ = .;
MPRINT(EM_DIAGRAM):   _MAXP_ = .;
28464     + _SUM_ = .;
MPRINT(EM_DIAGRAM):   _SUM_ = .;
28465     + _NTRIALS = .;
MPRINT(EM_DIAGRAM):   _NTRIALS = .;
28466     + _EPS =                1E-10;
MPRINT(EM_DIAGRAM):   _EPS = 1E-10;
28467     +LENGTH _WARN_ $4
28468     +;
MPRINT(EM_DIAGRAM):   LENGTH _WARN_ $4 ;
28469     +      label S_PWR_displacement = 'Standard: PWR_displacement' ;
MPRINT(EM_DIAGRAM):   label S_PWR_displacement = 'Standard: PWR_displacement' ;
28470     +
28471     +      label S_SQRT_weight = 'Standard: SQRT_weight' ;
MPRINT(EM_DIAGRAM):   label S_SQRT_weight = 'Standard: SQRT_weight' ;
28472     +
28473     +      label S_acceleration = 'Standard: acceleration' ;
MPRINT(EM_DIAGRAM):   label S_acceleration = 'Standard: acceleration' ;
28474     +
28475     +      label S_model = 'Standard: model' ;
MPRINT(EM_DIAGRAM):   label S_model = 'Standard: model' ;
28476     +
28477     +      label S_origin = 'Standard: origin' ;
MPRINT(EM_DIAGRAM):   label S_origin = 'Standard: origin' ;
28478     +
28479     +      label G_horsepower0 = 'Dummy: G_horsepower=0' ;
MPRINT(EM_DIAGRAM):   label G_horsepower0 = 'Dummy: G_horsepower=0' ;
28480     +
28481     +      label G_horsepower1 = 'Dummy: G_horsepower=1' ;
MPRINT(EM_DIAGRAM):   label G_horsepower1 = 'Dummy: G_horsepower=1' ;
28482     +
28483     +      label G_horsepower2 = 'Dummy: G_horsepower=2' ;
MPRINT(EM_DIAGRAM):   label G_horsepower2 = 'Dummy: G_horsepower=2' ;
28484     +
28485     +      label G_horsepower3 = 'Dummy: G_horsepower=3' ;
MPRINT(EM_DIAGRAM):   label G_horsepower3 = 'Dummy: G_horsepower=3' ;
28486     +
28487     +      label G_horsepower4 = 'Dummy: G_horsepower=4' ;
MPRINT(EM_DIAGRAM):   label G_horsepower4 = 'Dummy: G_horsepower=4' ;
28488     +
28489     +      label G_horsepower5 = 'Dummy: G_horsepower=5' ;
MPRINT(EM_DIAGRAM):   label G_horsepower5 = 'Dummy: G_horsepower=5' ;
28490     +
28491     +      label G_horsepower6 = 'Dummy: G_horsepower=6' ;
MPRINT(EM_DIAGRAM):   label G_horsepower6 = 'Dummy: G_horsepower=6' ;
28492     +
28493     +      label H11 = 'Hidden: H1=1' ;
MPRINT(EM_DIAGRAM):   label H11 = 'Hidden: H1=1' ;
28494     +
28495     +      label H12 = 'Hidden: H1=2' ;
MPRINT(EM_DIAGRAM):   label H12 = 'Hidden: H1=2' ;
28496     +
28497     +      label H13 = 'Hidden: H1=3' ;
MPRINT(EM_DIAGRAM):   label H13 = 'Hidden: H1=3' ;
28498     +
28499     +      label H14 = 'Hidden: H1=4' ;
MPRINT(EM_DIAGRAM):   label H14 = 'Hidden: H1=4' ;
28500     +
28501     +      label H15 = 'Hidden: H1=5' ;
MPRINT(EM_DIAGRAM):   label H15 = 'Hidden: H1=5' ;
28502     +
28503     +      label P_mpg = 'Predicted: mpg' ;
MPRINT(EM_DIAGRAM):   label P_mpg = 'Predicted: mpg' ;
28504     +
28505     +      label R_mpg = 'Residual: mpg' ;
MPRINT(EM_DIAGRAM):   label R_mpg = 'Residual: mpg' ;
28506     +
28507     +      label  _WARN_ = "Warnings";
MPRINT(EM_DIAGRAM):   label _WARN_ = "Warnings";
28508     +
28509     +*** Generate dummy variables for G_horsepower ;
MPRINT(EM_DIAGRAM):   *** Generate dummy variables for G_horsepower ;
28510     +drop G_horsepower0 G_horsepower1 G_horsepower2 G_horsepower3 G_horsepower4
28511     +        G_horsepower5 G_horsepower6 ;
MPRINT(EM_DIAGRAM):   drop G_horsepower0 G_horsepower1 G_horsepower2 G_horsepower3 G_horsepower4 G_horsepower5 G_horsepower6 ;
28512     +*** encoding is sparse, initialize to zero;
MPRINT(EM_DIAGRAM):   *** encoding is sparse, initialize to zero;
28513     +G_horsepower0 = 0;
MPRINT(EM_DIAGRAM):   G_horsepower0 = 0;
28514     +G_horsepower1 = 0;
MPRINT(EM_DIAGRAM):   G_horsepower1 = 0;
28515     +G_horsepower2 = 0;
MPRINT(EM_DIAGRAM):   G_horsepower2 = 0;
28516     +G_horsepower3 = 0;
MPRINT(EM_DIAGRAM):   G_horsepower3 = 0;
28517     +G_horsepower4 = 0;
MPRINT(EM_DIAGRAM):   G_horsepower4 = 0;
28518     +G_horsepower5 = 0;
MPRINT(EM_DIAGRAM):   G_horsepower5 = 0;
28519     +G_horsepower6 = 0;
MPRINT(EM_DIAGRAM):   G_horsepower6 = 0;
28520     +if missing( G_horsepower ) then do;
MPRINT(EM_DIAGRAM):   if missing( G_horsepower ) then do;
28521     +   G_horsepower0 = .;
MPRINT(EM_DIAGRAM):   G_horsepower0 = .;
28522     +   G_horsepower1 = .;
MPRINT(EM_DIAGRAM):   G_horsepower1 = .;
28523     +   G_horsepower2 = .;
MPRINT(EM_DIAGRAM):   G_horsepower2 = .;
28524     +   G_horsepower3 = .;
MPRINT(EM_DIAGRAM):   G_horsepower3 = .;
28525     +   G_horsepower4 = .;
MPRINT(EM_DIAGRAM):   G_horsepower4 = .;
28526     +   G_horsepower5 = .;
MPRINT(EM_DIAGRAM):   G_horsepower5 = .;
28527     +   G_horsepower6 = .;
MPRINT(EM_DIAGRAM):   G_horsepower6 = .;
28528     +   substr(_warn_,1,1) = 'M';
MPRINT(EM_DIAGRAM):   substr(_warn_,1,1) = 'M';
28529     +   _DM_BAD = 1;
MPRINT(EM_DIAGRAM):   _DM_BAD = 1;
28530     +end;
MPRINT(EM_DIAGRAM):   end;
28531     +else do;
MPRINT(EM_DIAGRAM):   else do;
28532     +   length _dm12 $ 12; drop _dm12 ;
MPRINT(EM_DIAGRAM):   length _dm12 $ 12;
MPRINT(EM_DIAGRAM):   drop _dm12 ;
28533     +   _dm12 = put( G_horsepower , BEST12. );
MPRINT(EM_DIAGRAM):   _dm12 = put( G_horsepower , BEST12. );
28534     +   %DMNORMIP( _dm12 )
MPRINT(DMNORMIP):   call dmnorm(_dm12,
MPRINT(DMNORLEN):  32
MPRINT(DMNORMIP):  );
28535     +   _dm_find = 0; drop _dm_find;
MPRINT(EM_DIAGRAM):   _dm_find = 0;
MPRINT(EM_DIAGRAM):   drop _dm_find;
28536     +   if _dm12 <= '3'  then do;
MPRINT(EM_DIAGRAM):   if _dm12 <= '3' then do;
28537     +      if _dm12 <= '1'  then do;
MPRINT(EM_DIAGRAM):   if _dm12 <= '1' then do;
28538     +         if _dm12 = '0'  then do;
MPRINT(EM_DIAGRAM):   if _dm12 = '0' then do;
28539     +            G_horsepower0 = 1;
MPRINT(EM_DIAGRAM):   G_horsepower0 = 1;
28540     +            _dm_find = 1;
MPRINT(EM_DIAGRAM):   _dm_find = 1;
28541     +         end;
MPRINT(EM_DIAGRAM):   end;
28542     +         else do;
MPRINT(EM_DIAGRAM):   else do;
28543     +            if _dm12 = '1'  then do;
MPRINT(EM_DIAGRAM):   if _dm12 = '1' then do;
28544     +               G_horsepower1 = 1;
MPRINT(EM_DIAGRAM):   G_horsepower1 = 1;
28545     +               _dm_find = 1;
MPRINT(EM_DIAGRAM):   _dm_find = 1;
28546     +            end;
MPRINT(EM_DIAGRAM):   end;
28547     +         end;
MPRINT(EM_DIAGRAM):   end;
28548     +      end;
MPRINT(EM_DIAGRAM):   end;
28549     +      else do;
MPRINT(EM_DIAGRAM):   else do;
28550     +         if _dm12 = '2'  then do;
MPRINT(EM_DIAGRAM):   if _dm12 = '2' then do;
28551     +            G_horsepower2 = 1;
MPRINT(EM_DIAGRAM):   G_horsepower2 = 1;
28552     +            _dm_find = 1;
MPRINT(EM_DIAGRAM):   _dm_find = 1;
28553     +         end;
MPRINT(EM_DIAGRAM):   end;
28554     +         else do;
MPRINT(EM_DIAGRAM):   else do;
28555     +            if _dm12 = '3'  then do;
MPRINT(EM_DIAGRAM):   if _dm12 = '3' then do;
28556     +               G_horsepower3 = 1;
MPRINT(EM_DIAGRAM):   G_horsepower3 = 1;
28557     +               _dm_find = 1;
MPRINT(EM_DIAGRAM):   _dm_find = 1;
28558     +            end;
MPRINT(EM_DIAGRAM):   end;
28559     +         end;
MPRINT(EM_DIAGRAM):   end;
28560     +      end;
MPRINT(EM_DIAGRAM):   end;
28561     +   end;
MPRINT(EM_DIAGRAM):   end;
28562     +   else do;
MPRINT(EM_DIAGRAM):   else do;
28563     +      if _dm12 <= '5'  then do;
MPRINT(EM_DIAGRAM):   if _dm12 <= '5' then do;
28564     +         if _dm12 = '4'  then do;
MPRINT(EM_DIAGRAM):   if _dm12 = '4' then do;
28565     +            G_horsepower4 = 1;
MPRINT(EM_DIAGRAM):   G_horsepower4 = 1;
28566     +            _dm_find = 1;
MPRINT(EM_DIAGRAM):   _dm_find = 1;
28567     +         end;
MPRINT(EM_DIAGRAM):   end;
28568     +         else do;
MPRINT(EM_DIAGRAM):   else do;
28569     +            if _dm12 = '5'  then do;
MPRINT(EM_DIAGRAM):   if _dm12 = '5' then do;
28570     +               G_horsepower5 = 1;
MPRINT(EM_DIAGRAM):   G_horsepower5 = 1;
28571     +               _dm_find = 1;
MPRINT(EM_DIAGRAM):   _dm_find = 1;
28572     +            end;
MPRINT(EM_DIAGRAM):   end;
28573     +         end;
MPRINT(EM_DIAGRAM):   end;
28574     +      end;
MPRINT(EM_DIAGRAM):   end;
28575     +      else do;
MPRINT(EM_DIAGRAM):   else do;
28576     +         if _dm12 = '6'  then do;
MPRINT(EM_DIAGRAM):   if _dm12 = '6' then do;
28577     +            G_horsepower6 = 1;
MPRINT(EM_DIAGRAM):   G_horsepower6 = 1;
28578     +            _dm_find = 1;
MPRINT(EM_DIAGRAM):   _dm_find = 1;
28579     +         end;
MPRINT(EM_DIAGRAM):   end;
28580     +         else do;
MPRINT(EM_DIAGRAM):   else do;
28581     +            if _dm12 = '7'  then do;
MPRINT(EM_DIAGRAM):   if _dm12 = '7' then do;
28582     +               G_horsepower0 = -1;
MPRINT(EM_DIAGRAM):   G_horsepower0 = -1;
28583     +               G_horsepower1 = -1;
MPRINT(EM_DIAGRAM):   G_horsepower1 = -1;
28584     +               G_horsepower2 = -1;
MPRINT(EM_DIAGRAM):   G_horsepower2 = -1;
28585     +               G_horsepower3 = -1;
MPRINT(EM_DIAGRAM):   G_horsepower3 = -1;
28586     +               G_horsepower4 = -1;
MPRINT(EM_DIAGRAM):   G_horsepower4 = -1;
28587     +               G_horsepower5 = -1;
MPRINT(EM_DIAGRAM):   G_horsepower5 = -1;
28588     +               G_horsepower6 = -1;
MPRINT(EM_DIAGRAM):   G_horsepower6 = -1;
28589     +               _dm_find = 1;
MPRINT(EM_DIAGRAM):   _dm_find = 1;
28590     +            end;
MPRINT(EM_DIAGRAM):   end;
28591     +         end;
MPRINT(EM_DIAGRAM):   end;
28592     +      end;
MPRINT(EM_DIAGRAM):   end;
28593     +   end;
MPRINT(EM_DIAGRAM):   end;
28594     +   if not _dm_find then do;
MPRINT(EM_DIAGRAM):   if not _dm_find then do;
28595     +      G_horsepower0 = .;
MPRINT(EM_DIAGRAM):   G_horsepower0 = .;
28596     +      G_horsepower1 = .;
MPRINT(EM_DIAGRAM):   G_horsepower1 = .;
28597     +      G_horsepower2 = .;
MPRINT(EM_DIAGRAM):   G_horsepower2 = .;
28598     +      G_horsepower3 = .;
MPRINT(EM_DIAGRAM):   G_horsepower3 = .;
28599     +      G_horsepower4 = .;
MPRINT(EM_DIAGRAM):   G_horsepower4 = .;
28600     +      G_horsepower5 = .;
MPRINT(EM_DIAGRAM):   G_horsepower5 = .;
28601     +      G_horsepower6 = .;
MPRINT(EM_DIAGRAM):   G_horsepower6 = .;
28602     +      substr(_warn_,2,1) = 'U';
MPRINT(EM_DIAGRAM):   substr(_warn_,2,1) = 'U';
28603     +      _DM_BAD = 1;
MPRINT(EM_DIAGRAM):   _DM_BAD = 1;
28604     +   end;
MPRINT(EM_DIAGRAM):   end;
28605     +end;
MPRINT(EM_DIAGRAM):   end;
28606     +
28607     +*** *************************;
MPRINT(EM_DIAGRAM):   *** *************************;
28608     +*** Checking missing input Interval
28609     +*** *************************;
MPRINT(EM_DIAGRAM):   *** Checking missing input Interval *** *************************;
28610     +
28611     +IF NMISS(
28612     +   PWR_displacement ,
28613     +   SQRT_weight ,
28614     +   acceleration ,
28615     +   model ,
28616     +   origin   ) THEN DO;
MPRINT(EM_DIAGRAM):   IF NMISS( PWR_displacement , SQRT_weight , acceleration , model , origin ) THEN DO;
28617     +   SUBSTR(_WARN_, 1, 1) = 'M';
MPRINT(EM_DIAGRAM):   SUBSTR(_WARN_, 1, 1) = 'M';
28618     +
28619     +   _DM_BAD = 1;
MPRINT(EM_DIAGRAM):   _DM_BAD = 1;
28620     +END;
MPRINT(EM_DIAGRAM):   END;
28621     +*** *************************;
MPRINT(EM_DIAGRAM):   *** *************************;
28622     +*** Writing the Node intvl ;
MPRINT(EM_DIAGRAM):   *** Writing the Node intvl ;
28623     +*** *************************;
MPRINT(EM_DIAGRAM):   *** *************************;
28624     +IF _DM_BAD EQ 0 THEN DO;
MPRINT(EM_DIAGRAM):   IF _DM_BAD EQ 0 THEN DO;
28625     +   S_PWR_displacement  =    -3.85946672878638 +     5.56143158103166 *
28626     +        PWR_displacement ;
MPRINT(EM_DIAGRAM):   S_PWR_displacement = -3.85946672878638 + 5.56143158103166 * PWR_displacement ;
28627     +   S_SQRT_weight  =     -2.8995832574349 +      4.9516224140926 * SQRT_weight
28628     +         ;
MPRINT(EM_DIAGRAM):   S_SQRT_weight = -2.8995832574349 + 4.9516224140926 * SQRT_weight ;
28629     +   S_acceleration  =    -5.65655377081867 +      0.3645839108031 *
28630     +        acceleration ;
MPRINT(EM_DIAGRAM):   S_acceleration = -5.65655377081867 + 0.3645839108031 * acceleration ;
28631     +   S_model  =    -20.4776175489859 +     0.26959850875952 * model ;
MPRINT(EM_DIAGRAM):   S_model = -20.4776175489859 + 0.26959850875952 * model ;
28632     +   S_origin  =    -1.96077366996082 +     1.22260005303439 * origin ;
MPRINT(EM_DIAGRAM):   S_origin = -1.96077366996082 + 1.22260005303439 * origin ;
28633     +END;
MPRINT(EM_DIAGRAM):   END;
28634     +ELSE DO;
MPRINT(EM_DIAGRAM):   ELSE DO;
28635     +   IF MISSING( PWR_displacement ) THEN S_PWR_displacement  = . ;
MPRINT(EM_DIAGRAM):   IF MISSING( PWR_displacement ) THEN S_PWR_displacement = . ;
28636     +   ELSE S_PWR_displacement  =    -3.85946672878638 +     5.56143158103166 *
28637     +        PWR_displacement ;
MPRINT(EM_DIAGRAM):   ELSE S_PWR_displacement = -3.85946672878638 + 5.56143158103166 * PWR_displacement ;
28638     +   IF MISSING( SQRT_weight ) THEN S_SQRT_weight  = . ;
MPRINT(EM_DIAGRAM):   IF MISSING( SQRT_weight ) THEN S_SQRT_weight = . ;
28639     +   ELSE S_SQRT_weight  =     -2.8995832574349 +      4.9516224140926 *
28640     +        SQRT_weight ;
MPRINT(EM_DIAGRAM):   ELSE S_SQRT_weight = -2.8995832574349 + 4.9516224140926 * SQRT_weight ;
28641     +   IF MISSING( acceleration ) THEN S_acceleration  = . ;
MPRINT(EM_DIAGRAM):   IF MISSING( acceleration ) THEN S_acceleration = . ;
28642     +   ELSE S_acceleration  =    -5.65655377081867 +      0.3645839108031 *
28643     +        acceleration ;
MPRINT(EM_DIAGRAM):   ELSE S_acceleration = -5.65655377081867 + 0.3645839108031 * acceleration ;
28644     +   IF MISSING( model ) THEN S_model  = . ;
MPRINT(EM_DIAGRAM):   IF MISSING( model ) THEN S_model = . ;
28645     +   ELSE S_model  =    -20.4776175489859 +     0.26959850875952 * model ;
MPRINT(EM_DIAGRAM):   ELSE S_model = -20.4776175489859 + 0.26959850875952 * model ;
28646     +   IF MISSING( origin ) THEN S_origin  = . ;
MPRINT(EM_DIAGRAM):   IF MISSING( origin ) THEN S_origin = . ;
28647     +   ELSE S_origin  =    -1.96077366996082 +     1.22260005303439 * origin ;
MPRINT(EM_DIAGRAM):   ELSE S_origin = -1.96077366996082 + 1.22260005303439 * origin ;
28648     +END;
MPRINT(EM_DIAGRAM):   END;
28649     +*** *************************;
MPRINT(EM_DIAGRAM):   *** *************************;
28650     +*** Writing the Node nom ;
MPRINT(EM_DIAGRAM):   *** Writing the Node nom ;
28651     +*** *************************;
MPRINT(EM_DIAGRAM):   *** *************************;
28652     +*** *************************;
MPRINT(EM_DIAGRAM):   *** *************************;
28653     +*** Writing the Node H1 ;
MPRINT(EM_DIAGRAM):   *** Writing the Node H1 ;
28654     +*** *************************;
MPRINT(EM_DIAGRAM):   *** *************************;
28655     +IF _DM_BAD EQ 0 THEN DO;
MPRINT(EM_DIAGRAM):   IF _DM_BAD EQ 0 THEN DO;
28656     +   H11  =    -0.22561664220788 * S_PWR_displacement  +     0.29279986935289 *
28657     +        S_SQRT_weight  +    -0.08154144101082 * S_acceleration
28658     +          +    -1.57373487646847 * S_model  +    -0.56643338809607 * S_origin
28659     +         ;
MPRINT(EM_DIAGRAM):   H11 = -0.22561664220788 * S_PWR_displacement + 0.29279986935289 * S_SQRT_weight + -0.08154144101082 * S_acceleration + -1.57373487646847 * S_model + -0.56643338809607 * S_origin ;
28660     +   H12  =     4.93599986000727 * S_PWR_displacement  +    -3.01836024392518 *
28661     +        S_SQRT_weight  +     0.41423051735248 * S_acceleration
28662     +          +      0.9905881549869 * S_model  +     5.10007136657153 * S_origin
28663     +         ;
MPRINT(EM_DIAGRAM):   H12 = 4.93599986000727 * S_PWR_displacement + -3.01836024392518 * S_SQRT_weight + 0.41423051735248 * S_acceleration + 0.9905881549869 * S_model + 5.10007136657153 * S_origin ;
28664     +   H13  =    -1.53185013413527 * S_PWR_displacement  +     2.07646959989326 *
28665     +        S_SQRT_weight  +     0.62803777105863 * S_acceleration
28666     +          +    -0.48474075845178 * S_model  +    -2.46960471429882 * S_origin
28667     +         ;
MPRINT(EM_DIAGRAM):   H13 = -1.53185013413527 * S_PWR_displacement + 2.07646959989326 * S_SQRT_weight + 0.62803777105863 * S_acceleration + -0.48474075845178 * S_model + -2.46960471429882 * S_origin ;
28668     +   H14  =     1.96220002879875 * S_PWR_displacement  +    -2.87264187685342 *
28669     +        S_SQRT_weight  +    -0.33516368597319 * S_acceleration
28670     +          +    -2.66240440595274 * S_model  +     2.74431141979393 * S_origin
28671     +         ;
MPRINT(EM_DIAGRAM):   H14 = 1.96220002879875 * S_PWR_displacement + -2.87264187685342 * S_SQRT_weight + -0.33516368597319 * S_acceleration + -2.66240440595274 * S_model + 2.74431141979393 * S_origin ;
28672     +   H15  =    -4.48005247601382 * S_PWR_displacement  +    -0.00584042704999 *
28673     +        S_SQRT_weight  +    -1.88583017304181 * S_acceleration
28674     +          +     0.28789605983299 * S_model  +     0.01833307183986 * S_origin
28675     +         ;
MPRINT(EM_DIAGRAM):   H15 = -4.48005247601382 * S_PWR_displacement + -0.00584042704999 * S_SQRT_weight + -1.88583017304181 * S_acceleration + 0.28789605983299 * S_model + 0.01833307183986 * S_origin ;
28676     +   H11  = H11  +    -0.32589822322206 * G_horsepower0
28677     +          +    -2.11513303881614 * G_horsepower1  +     0.24624362754708 *
28678     +        G_horsepower2  +    -0.20585055130122 * G_horsepower3
28679     +          +    -0.19436717896363 * G_horsepower4  +     0.16856024419836 *
28680     +        G_horsepower5  +     -0.3165843590158 * G_horsepower6 ;
MPRINT(EM_DIAGRAM):   H11 = H11 + -0.32589822322206 * G_horsepower0 + -2.11513303881614 * G_horsepower1 + 0.24624362754708 * G_horsepower2 + -0.20585055130122 * G_horsepower3 + -0.19436717896363 * G_horsepower4 + 0.16856024419836 * G_horsepower5 + 
-0.3165843590158 * G_horsepower6 ;
28681     +   H12  = H12  +      -1.053307301652 * G_horsepower0
28682     +          +    -1.34604130948168 * G_horsepower1  +     2.53331408689217 *
28683     +        G_horsepower2  +    -0.88094896944232 * G_horsepower3
28684     +          +    -0.04212737578867 * G_horsepower4  +     1.70833493332698 *
28685     +        G_horsepower5  +     0.50679394243914 * G_horsepower6 ;
MPRINT(EM_DIAGRAM):   H12 = H12 + -1.053307301652 * G_horsepower0 + -1.34604130948168 * G_horsepower1 + 2.53331408689217 * G_horsepower2 + -0.88094896944232 * G_horsepower3 + -0.04212737578867 * G_horsepower4 + 1.70833493332698 * G_horsepower5 + 
0.50679394243914 * G_horsepower6 ;
28686     +   H13  = H13  +    -1.10735170928115 * G_horsepower0
28687     +          +    -1.27815205151561 * G_horsepower1  +    -2.93732966593975 *
28688     +        G_horsepower2  +     0.26560257283006 * G_horsepower3
28689     +          +     1.27772842560416 * G_horsepower4  +      0.4182236705835 *
28690     +        G_horsepower5  +     0.96211923165101 * G_horsepower6 ;
MPRINT(EM_DIAGRAM):   H13 = H13 + -1.10735170928115 * G_horsepower0 + -1.27815205151561 * G_horsepower1 + -2.93732966593975 * G_horsepower2 + 0.26560257283006 * G_horsepower3 + 1.27772842560416 * G_horsepower4 + 0.4182236705835 * G_horsepower5 + 
0.96211923165101 * G_horsepower6 ;
28691     +   H14  = H14  +     0.70529046022495 * G_horsepower0
28692     +          +        5.00762903292 * G_horsepower1  +     3.12940883992694 *
28693     +        G_horsepower2  +    -0.47131349103044 * G_horsepower3
28694     +          +    -2.50517134874503 * G_horsepower4  +    -0.23400568544976 *
28695     +        G_horsepower5  +    -4.01167816695482 * G_horsepower6 ;
MPRINT(EM_DIAGRAM):   H14 = H14 + 0.70529046022495 * G_horsepower0 + 5.00762903292 * G_horsepower1 + 3.12940883992694 * G_horsepower2 + -0.47131349103044 * G_horsepower3 + -2.50517134874503 * G_horsepower4 + -0.23400568544976 * G_horsepower5 + 
-4.01167816695482 * G_horsepower6 ;
28696     +   H15  = H15  +    -0.83580412810395 * G_horsepower0
28697     +          +     0.33584823926172 * G_horsepower1  +     1.47861687233833 *
28698     +        G_horsepower2  +     0.29972014231897 * G_horsepower3
28699     +          +    -0.40796294853021 * G_horsepower4  +    -0.61530226688032 *
28700     +        G_horsepower5  +    -1.22502721368356 * G_horsepower6 ;
MPRINT(EM_DIAGRAM):   H15 = H15 + -0.83580412810395 * G_horsepower0 + 0.33584823926172 * G_horsepower1 + 1.47861687233833 * G_horsepower2 + 0.29972014231897 * G_horsepower3 + -0.40796294853021 * G_horsepower4 + -0.61530226688032 * G_horsepower5 + 
-1.22502721368356 * G_horsepower6 ;
28701     +   H11  =    -1.25220742338907 + H11 ;
MPRINT(EM_DIAGRAM):   H11 = -1.25220742338907 + H11 ;
28702     +   H12  =     3.55054085911683 + H12 ;
MPRINT(EM_DIAGRAM):   H12 = 3.55054085911683 + H12 ;
28703     +   H13  =    -1.57744423775478 + H13 ;
MPRINT(EM_DIAGRAM):   H13 = -1.57744423775478 + H13 ;
28704     +   H14  =     1.61611384879506 + H14 ;
MPRINT(EM_DIAGRAM):   H14 = 1.61611384879506 + H14 ;
28705     +   H15  =    -2.43404899996786 + H15 ;
MPRINT(EM_DIAGRAM):   H15 = -2.43404899996786 + H15 ;
28706     +   H11  = TANH(H11 );
MPRINT(EM_DIAGRAM):   H11 = TANH(H11 );
28707     +   H12  = TANH(H12 );
MPRINT(EM_DIAGRAM):   H12 = TANH(H12 );
28708     +   H13  = TANH(H13 );
MPRINT(EM_DIAGRAM):   H13 = TANH(H13 );
28709     +   H14  = TANH(H14 );
MPRINT(EM_DIAGRAM):   H14 = TANH(H14 );
28710     +   H15  = TANH(H15 );
MPRINT(EM_DIAGRAM):   H15 = TANH(H15 );
28711     +END;
MPRINT(EM_DIAGRAM):   END;
28712     +ELSE DO;
MPRINT(EM_DIAGRAM):   ELSE DO;
28713     +   H11  = .;
MPRINT(EM_DIAGRAM):   H11 = .;
28714     +   H12  = .;
MPRINT(EM_DIAGRAM):   H12 = .;
28715     +   H13  = .;
MPRINT(EM_DIAGRAM):   H13 = .;
28716     +   H14  = .;
MPRINT(EM_DIAGRAM):   H14 = .;
28717     +   H15  = .;
MPRINT(EM_DIAGRAM):   H15 = .;
28718     +END;
MPRINT(EM_DIAGRAM):   END;
28719     +*** *************************;
MPRINT(EM_DIAGRAM):   *** *************************;
28720     +*** Writing the Node intervalTargets ;
MPRINT(EM_DIAGRAM):   *** Writing the Node intervalTargets ;
28721     +*** *************************;
MPRINT(EM_DIAGRAM):   *** *************************;
28722     +IF _DM_BAD EQ 0 THEN DO;
MPRINT(EM_DIAGRAM):   IF _DM_BAD EQ 0 THEN DO;
28723     +   P_mpg  =     4.35521208192278 * H11  +    -3.55839496594162 * H12
28724     +          +    -5.14861993092215 * H13  +    -2.82316167679099 * H14
28725     +          +     2.90190723352924 * H15 ;
MPRINT(EM_DIAGRAM):   P_mpg = 4.35521208192278 * H11 + -3.55839496594162 * H12 + -5.14861993092215 * H13 + -2.82316167679099 * H14 + 2.90190723352924 * H15 ;
28726     +   P_mpg  = P_mpg  +     3.23232456419777 * S_PWR_displacement
28727     +          +    -2.67328859312353 * S_SQRT_weight  +     1.92259283968828 *
28728     +        S_acceleration  +     3.07674646933812 * S_model
28729     +          +     1.60808322499289 * S_origin ;
MPRINT(EM_DIAGRAM):   P_mpg = P_mpg + 3.23232456419777 * S_PWR_displacement + -2.67328859312353 * S_SQRT_weight + 1.92259283968828 * S_acceleration + 3.07674646933812 * S_model + 1.60808322499289 * S_origin ;
28730     +   P_mpg  = P_mpg  +    -9.00526279781947 * G_horsepower0
28731     +          +    -2.85437315145606 * G_horsepower1  +    -4.83234195044209 *
28732     +        G_horsepower2  +    -1.19030839841495 * G_horsepower3
28733     +          +      1.2579767801169 * G_horsepower4  +     2.09998268656574 *
28734     +        G_horsepower5  +     2.95490641856222 * G_horsepower6 ;
MPRINT(EM_DIAGRAM):   P_mpg = P_mpg + -9.00526279781947 * G_horsepower0 + -2.85437315145606 * G_horsepower1 + -4.83234195044209 * G_horsepower2 + -1.19030839841495 * G_horsepower3 + 1.2579767801169 * G_horsepower4 + 2.09998268656574 * G_horsepower5 + 
2.95490641856222 * G_horsepower6 ;
28735     +   P_mpg  =     29.6876860089066 + P_mpg ;
MPRINT(EM_DIAGRAM):   P_mpg = 29.6876860089066 + P_mpg ;
28736     +END;
MPRINT(EM_DIAGRAM):   END;
28737     +ELSE DO;
MPRINT(EM_DIAGRAM):   ELSE DO;
28738     +   P_mpg  = .;
MPRINT(EM_DIAGRAM):   P_mpg = .;
28739     +END;
MPRINT(EM_DIAGRAM):   END;
28740     +IF _DM_BAD EQ 1 THEN DO;
MPRINT(EM_DIAGRAM):   IF _DM_BAD EQ 1 THEN DO;
28741     +   P_mpg  =     23.5238993710691;
MPRINT(EM_DIAGRAM):   P_mpg = 23.5238993710691;
28742     +END;
MPRINT(EM_DIAGRAM):   END;
28743     +*** *****************************;
MPRINT(EM_DIAGRAM):   *** *****************************;
28744     +*** Writing the Residuals  of the Node intervalTargets ;
MPRINT(EM_DIAGRAM):   *** Writing the Residuals of the Node intervalTargets ;
28745     +*** ******************************;
MPRINT(EM_DIAGRAM):   *** ******************************;
28746     +IF MISSING( mpg ) THEN R_mpg  = . ;
MPRINT(EM_DIAGRAM):   IF MISSING( mpg ) THEN R_mpg = . ;
28747     +ELSE R_mpg  = mpg  - P_mpg ;
MPRINT(EM_DIAGRAM):   ELSE R_mpg = mpg - P_mpg ;
28748     +********************************;
MPRINT(EM_DIAGRAM):   ********************************;
28749     +*** End Scoring Code for Neural;
MPRINT(EM_DIAGRAM):   *** End Scoring Code for Neural;
28750     +********************************;
MPRINT(EM_DIAGRAM):   ********************************;
28751     +drop
28752     +H11
28753     +H12
28754     +H13
28755     +H14
28756     +H15
28757     +;
MPRINT(EM_DIAGRAM):   drop H11 H12 H13 H14 H15 ;
28758     +drop S_:;
MPRINT(EM_DIAGRAM):   drop S_:;
NOTE: %INCLUDE (level 1) ending.
MPRINT(EM_DIAGRAM):   run;
28759      run;

NOTE: DATA STEP view saved on file EMWS2.NEURAL_TRAIN.
NOTE: A stored DATA STEP view cannot run under a different operating system.
NOTE: View EMWS2.VARSEL_TRAIN.VIEW used (Total process time):
      real time           0.12 seconds
      cpu time            0.12 seconds
      
NOTE: DATA statement used (Total process time):
      real time           0.14 seconds
      cpu time            0.15 seconds
      

MPRINT(EM_DIAGRAM):   quit;
28760      quit;
28761      filename emflow;
MPRINT(EM_DIAGRAM):   filename emflow;
NOTE: Fileref EMFLOW has been deassigned.
28762      filename emflow "C:\Users\AutoLogon\Desktop\Roshan Seneca\SEM 2\ROSHAN SEM 2\BAN 210\Final Project\Final Project-Roshan Nair\Workspaces\EMWS2\Neural\EMFLOWSCORE.sas";
MPRINT(EM_DIAGRAM):    filename emflow "C:\Users\AutoLogon\Desktop\Roshan Seneca\SEM 2\ROSHAN SEM 2\BAN 210\Final Project\Final Project-Roshan Nair\Workspaces\EMWS2\Neural\EMFLOWSCORE.sas";
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * Neural: Scoring VALIDATE data;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
28763      *------------------------------------------------------------*;
28764      * Neural: Scoring VALIDATE data;
28765      *------------------------------------------------------------*;
28766      data EMWS2.Neural_VALIDATE
28767      / view=EMWS2.Neural_VALIDATE
28768      ;
MPRINT(EM_DIAGRAM):   data EMWS2.Neural_VALIDATE / view=EMWS2.Neural_VALIDATE ;
28769      set EMWS2.Varsel_VALIDATE
28770      ;
MPRINT(EM_DIAGRAM):   set EMWS2.Varsel_VALIDATE ;
28771      %inc emflow;
NOTE: %INCLUDE (level 1) file EMFLOW is file C:\Users\AutoLogon\Desktop\Roshan Seneca\SEM 2\ROSHAN SEM 2\BAN 210\Final Project\Final Project-Roshan Nair\Workspaces\EMWS2\Neural\EMFLOWSCORE.sas.
28772     +***********************************;
MPRINT(EM_DIAGRAM):   ***********************************;
28773     +*** Begin Scoring Code for Neural;
MPRINT(EM_DIAGRAM):   *** Begin Scoring Code for Neural;
28774     +***********************************;
MPRINT(EM_DIAGRAM):   ***********************************;
28775     +DROP _DM_BAD _EPS _NOCL_ _MAX_ _MAXP_ _SUM_ _NTRIALS;
MPRINT(EM_DIAGRAM):   DROP _DM_BAD _EPS _NOCL_ _MAX_ _MAXP_ _SUM_ _NTRIALS;
28776     + _DM_BAD = 0;
MPRINT(EM_DIAGRAM):   _DM_BAD = 0;
28777     + _NOCL_ = .;
MPRINT(EM_DIAGRAM):   _NOCL_ = .;
28778     + _MAX_ = .;
MPRINT(EM_DIAGRAM):   _MAX_ = .;
28779     + _MAXP_ = .;
MPRINT(EM_DIAGRAM):   _MAXP_ = .;
28780     + _SUM_ = .;
MPRINT(EM_DIAGRAM):   _SUM_ = .;
28781     + _NTRIALS = .;
MPRINT(EM_DIAGRAM):   _NTRIALS = .;
28782     + _EPS =                1E-10;
MPRINT(EM_DIAGRAM):   _EPS = 1E-10;
28783     +LENGTH _WARN_ $4
28784     +;
MPRINT(EM_DIAGRAM):   LENGTH _WARN_ $4 ;
28785     +      label S_PWR_displacement = 'Standard: PWR_displacement' ;
MPRINT(EM_DIAGRAM):   label S_PWR_displacement = 'Standard: PWR_displacement' ;
28786     +
28787     +      label S_SQRT_weight = 'Standard: SQRT_weight' ;
MPRINT(EM_DIAGRAM):   label S_SQRT_weight = 'Standard: SQRT_weight' ;
28788     +
28789     +      label S_acceleration = 'Standard: acceleration' ;
MPRINT(EM_DIAGRAM):   label S_acceleration = 'Standard: acceleration' ;
28790     +
28791     +      label S_model = 'Standard: model' ;
MPRINT(EM_DIAGRAM):   label S_model = 'Standard: model' ;
28792     +
28793     +      label S_origin = 'Standard: origin' ;
MPRINT(EM_DIAGRAM):   label S_origin = 'Standard: origin' ;
28794     +
28795     +      label G_horsepower0 = 'Dummy: G_horsepower=0' ;
MPRINT(EM_DIAGRAM):   label G_horsepower0 = 'Dummy: G_horsepower=0' ;
28796     +
28797     +      label G_horsepower1 = 'Dummy: G_horsepower=1' ;
MPRINT(EM_DIAGRAM):   label G_horsepower1 = 'Dummy: G_horsepower=1' ;
28798     +
28799     +      label G_horsepower2 = 'Dummy: G_horsepower=2' ;
MPRINT(EM_DIAGRAM):   label G_horsepower2 = 'Dummy: G_horsepower=2' ;
28800     +
28801     +      label G_horsepower3 = 'Dummy: G_horsepower=3' ;
MPRINT(EM_DIAGRAM):   label G_horsepower3 = 'Dummy: G_horsepower=3' ;
28802     +
28803     +      label G_horsepower4 = 'Dummy: G_horsepower=4' ;
MPRINT(EM_DIAGRAM):   label G_horsepower4 = 'Dummy: G_horsepower=4' ;
28804     +
28805     +      label G_horsepower5 = 'Dummy: G_horsepower=5' ;
MPRINT(EM_DIAGRAM):   label G_horsepower5 = 'Dummy: G_horsepower=5' ;
28806     +
28807     +      label G_horsepower6 = 'Dummy: G_horsepower=6' ;
MPRINT(EM_DIAGRAM):   label G_horsepower6 = 'Dummy: G_horsepower=6' ;
28808     +
28809     +      label H11 = 'Hidden: H1=1' ;
MPRINT(EM_DIAGRAM):   label H11 = 'Hidden: H1=1' ;
28810     +
28811     +      label H12 = 'Hidden: H1=2' ;
MPRINT(EM_DIAGRAM):   label H12 = 'Hidden: H1=2' ;
28812     +
28813     +      label H13 = 'Hidden: H1=3' ;
MPRINT(EM_DIAGRAM):   label H13 = 'Hidden: H1=3' ;
28814     +
28815     +      label H14 = 'Hidden: H1=4' ;
MPRINT(EM_DIAGRAM):   label H14 = 'Hidden: H1=4' ;
28816     +
28817     +      label H15 = 'Hidden: H1=5' ;
MPRINT(EM_DIAGRAM):   label H15 = 'Hidden: H1=5' ;
28818     +
28819     +      label P_mpg = 'Predicted: mpg' ;
MPRINT(EM_DIAGRAM):   label P_mpg = 'Predicted: mpg' ;
28820     +
28821     +      label R_mpg = 'Residual: mpg' ;
MPRINT(EM_DIAGRAM):   label R_mpg = 'Residual: mpg' ;
28822     +
28823     +      label  _WARN_ = "Warnings";
MPRINT(EM_DIAGRAM):   label _WARN_ = "Warnings";
28824     +
28825     +*** Generate dummy variables for G_horsepower ;
MPRINT(EM_DIAGRAM):   *** Generate dummy variables for G_horsepower ;
28826     +drop G_horsepower0 G_horsepower1 G_horsepower2 G_horsepower3 G_horsepower4
28827     +        G_horsepower5 G_horsepower6 ;
MPRINT(EM_DIAGRAM):   drop G_horsepower0 G_horsepower1 G_horsepower2 G_horsepower3 G_horsepower4 G_horsepower5 G_horsepower6 ;
28828     +*** encoding is sparse, initialize to zero;
MPRINT(EM_DIAGRAM):   *** encoding is sparse, initialize to zero;
28829     +G_horsepower0 = 0;
MPRINT(EM_DIAGRAM):   G_horsepower0 = 0;
28830     +G_horsepower1 = 0;
MPRINT(EM_DIAGRAM):   G_horsepower1 = 0;
28831     +G_horsepower2 = 0;
MPRINT(EM_DIAGRAM):   G_horsepower2 = 0;
28832     +G_horsepower3 = 0;
MPRINT(EM_DIAGRAM):   G_horsepower3 = 0;
28833     +G_horsepower4 = 0;
MPRINT(EM_DIAGRAM):   G_horsepower4 = 0;
28834     +G_horsepower5 = 0;
MPRINT(EM_DIAGRAM):   G_horsepower5 = 0;
28835     +G_horsepower6 = 0;
MPRINT(EM_DIAGRAM):   G_horsepower6 = 0;
28836     +if missing( G_horsepower ) then do;
MPRINT(EM_DIAGRAM):   if missing( G_horsepower ) then do;
28837     +   G_horsepower0 = .;
MPRINT(EM_DIAGRAM):   G_horsepower0 = .;
28838     +   G_horsepower1 = .;
MPRINT(EM_DIAGRAM):   G_horsepower1 = .;
28839     +   G_horsepower2 = .;
MPRINT(EM_DIAGRAM):   G_horsepower2 = .;
28840     +   G_horsepower3 = .;
MPRINT(EM_DIAGRAM):   G_horsepower3 = .;
28841     +   G_horsepower4 = .;
MPRINT(EM_DIAGRAM):   G_horsepower4 = .;
28842     +   G_horsepower5 = .;
MPRINT(EM_DIAGRAM):   G_horsepower5 = .;
28843     +   G_horsepower6 = .;
MPRINT(EM_DIAGRAM):   G_horsepower6 = .;
28844     +   substr(_warn_,1,1) = 'M';
MPRINT(EM_DIAGRAM):   substr(_warn_,1,1) = 'M';
28845     +   _DM_BAD = 1;
MPRINT(EM_DIAGRAM):   _DM_BAD = 1;
28846     +end;
MPRINT(EM_DIAGRAM):   end;
28847     +else do;
MPRINT(EM_DIAGRAM):   else do;
28848     +   length _dm12 $ 12; drop _dm12 ;
MPRINT(EM_DIAGRAM):   length _dm12 $ 12;
MPRINT(EM_DIAGRAM):   drop _dm12 ;
28849     +   _dm12 = put( G_horsepower , BEST12. );
MPRINT(EM_DIAGRAM):   _dm12 = put( G_horsepower , BEST12. );
28850     +   %DMNORMIP( _dm12 )
MPRINT(DMNORMIP):   call dmnorm(_dm12,
MPRINT(DMNORLEN):  32
MPRINT(DMNORMIP):  );
28851     +   _dm_find = 0; drop _dm_find;
MPRINT(EM_DIAGRAM):   _dm_find = 0;
MPRINT(EM_DIAGRAM):   drop _dm_find;
28852     +   if _dm12 <= '3'  then do;
MPRINT(EM_DIAGRAM):   if _dm12 <= '3' then do;
28853     +      if _dm12 <= '1'  then do;
MPRINT(EM_DIAGRAM):   if _dm12 <= '1' then do;
28854     +         if _dm12 = '0'  then do;
MPRINT(EM_DIAGRAM):   if _dm12 = '0' then do;
28855     +            G_horsepower0 = 1;
MPRINT(EM_DIAGRAM):   G_horsepower0 = 1;
28856     +            _dm_find = 1;
MPRINT(EM_DIAGRAM):   _dm_find = 1;
28857     +         end;
MPRINT(EM_DIAGRAM):   end;
28858     +         else do;
MPRINT(EM_DIAGRAM):   else do;
28859     +            if _dm12 = '1'  then do;
MPRINT(EM_DIAGRAM):   if _dm12 = '1' then do;
28860     +               G_horsepower1 = 1;
MPRINT(EM_DIAGRAM):   G_horsepower1 = 1;
28861     +               _dm_find = 1;
MPRINT(EM_DIAGRAM):   _dm_find = 1;
28862     +            end;
MPRINT(EM_DIAGRAM):   end;
28863     +         end;
MPRINT(EM_DIAGRAM):   end;
28864     +      end;
MPRINT(EM_DIAGRAM):   end;
28865     +      else do;
MPRINT(EM_DIAGRAM):   else do;
28866     +         if _dm12 = '2'  then do;
MPRINT(EM_DIAGRAM):   if _dm12 = '2' then do;
28867     +            G_horsepower2 = 1;
MPRINT(EM_DIAGRAM):   G_horsepower2 = 1;
28868     +            _dm_find = 1;
MPRINT(EM_DIAGRAM):   _dm_find = 1;
28869     +         end;
MPRINT(EM_DIAGRAM):   end;
28870     +         else do;
MPRINT(EM_DIAGRAM):   else do;
28871     +            if _dm12 = '3'  then do;
MPRINT(EM_DIAGRAM):   if _dm12 = '3' then do;
28872     +               G_horsepower3 = 1;
MPRINT(EM_DIAGRAM):   G_horsepower3 = 1;
28873     +               _dm_find = 1;
MPRINT(EM_DIAGRAM):   _dm_find = 1;
28874     +            end;
MPRINT(EM_DIAGRAM):   end;
28875     +         end;
MPRINT(EM_DIAGRAM):   end;
28876     +      end;
MPRINT(EM_DIAGRAM):   end;
28877     +   end;
MPRINT(EM_DIAGRAM):   end;
28878     +   else do;
MPRINT(EM_DIAGRAM):   else do;
28879     +      if _dm12 <= '5'  then do;
MPRINT(EM_DIAGRAM):   if _dm12 <= '5' then do;
28880     +         if _dm12 = '4'  then do;
MPRINT(EM_DIAGRAM):   if _dm12 = '4' then do;
28881     +            G_horsepower4 = 1;
MPRINT(EM_DIAGRAM):   G_horsepower4 = 1;
28882     +            _dm_find = 1;
MPRINT(EM_DIAGRAM):   _dm_find = 1;
28883     +         end;
MPRINT(EM_DIAGRAM):   end;
28884     +         else do;
MPRINT(EM_DIAGRAM):   else do;
28885     +            if _dm12 = '5'  then do;
MPRINT(EM_DIAGRAM):   if _dm12 = '5' then do;
28886     +               G_horsepower5 = 1;
MPRINT(EM_DIAGRAM):   G_horsepower5 = 1;
28887     +               _dm_find = 1;
MPRINT(EM_DIAGRAM):   _dm_find = 1;
28888     +            end;
MPRINT(EM_DIAGRAM):   end;
28889     +         end;
MPRINT(EM_DIAGRAM):   end;
28890     +      end;
MPRINT(EM_DIAGRAM):   end;
28891     +      else do;
MPRINT(EM_DIAGRAM):   else do;
28892     +         if _dm12 = '6'  then do;
MPRINT(EM_DIAGRAM):   if _dm12 = '6' then do;
28893     +            G_horsepower6 = 1;
MPRINT(EM_DIAGRAM):   G_horsepower6 = 1;
28894     +            _dm_find = 1;
MPRINT(EM_DIAGRAM):   _dm_find = 1;
28895     +         end;
MPRINT(EM_DIAGRAM):   end;
28896     +         else do;
MPRINT(EM_DIAGRAM):   else do;
28897     +            if _dm12 = '7'  then do;
MPRINT(EM_DIAGRAM):   if _dm12 = '7' then do;
28898     +               G_horsepower0 = -1;
MPRINT(EM_DIAGRAM):   G_horsepower0 = -1;
28899     +               G_horsepower1 = -1;
MPRINT(EM_DIAGRAM):   G_horsepower1 = -1;
28900     +               G_horsepower2 = -1;
MPRINT(EM_DIAGRAM):   G_horsepower2 = -1;
28901     +               G_horsepower3 = -1;
MPRINT(EM_DIAGRAM):   G_horsepower3 = -1;
28902     +               G_horsepower4 = -1;
MPRINT(EM_DIAGRAM):   G_horsepower4 = -1;
28903     +               G_horsepower5 = -1;
MPRINT(EM_DIAGRAM):   G_horsepower5 = -1;
28904     +               G_horsepower6 = -1;
MPRINT(EM_DIAGRAM):   G_horsepower6 = -1;
28905     +               _dm_find = 1;
MPRINT(EM_DIAGRAM):   _dm_find = 1;
28906     +            end;
MPRINT(EM_DIAGRAM):   end;
28907     +         end;
MPRINT(EM_DIAGRAM):   end;
28908     +      end;
MPRINT(EM_DIAGRAM):   end;
28909     +   end;
MPRINT(EM_DIAGRAM):   end;
28910     +   if not _dm_find then do;
MPRINT(EM_DIAGRAM):   if not _dm_find then do;
28911     +      G_horsepower0 = .;
MPRINT(EM_DIAGRAM):   G_horsepower0 = .;
28912     +      G_horsepower1 = .;
MPRINT(EM_DIAGRAM):   G_horsepower1 = .;
28913     +      G_horsepower2 = .;
MPRINT(EM_DIAGRAM):   G_horsepower2 = .;
28914     +      G_horsepower3 = .;
MPRINT(EM_DIAGRAM):   G_horsepower3 = .;
28915     +      G_horsepower4 = .;
MPRINT(EM_DIAGRAM):   G_horsepower4 = .;
28916     +      G_horsepower5 = .;
MPRINT(EM_DIAGRAM):   G_horsepower5 = .;
28917     +      G_horsepower6 = .;
MPRINT(EM_DIAGRAM):   G_horsepower6 = .;
28918     +      substr(_warn_,2,1) = 'U';
MPRINT(EM_DIAGRAM):   substr(_warn_,2,1) = 'U';
28919     +      _DM_BAD = 1;
MPRINT(EM_DIAGRAM):   _DM_BAD = 1;
28920     +   end;
MPRINT(EM_DIAGRAM):   end;
28921     +end;
MPRINT(EM_DIAGRAM):   end;
28922     +
28923     +*** *************************;
MPRINT(EM_DIAGRAM):   *** *************************;
28924     +*** Checking missing input Interval
28925     +*** *************************;
MPRINT(EM_DIAGRAM):   *** Checking missing input Interval *** *************************;
28926     +
28927     +IF NMISS(
28928     +   PWR_displacement ,
28929     +   SQRT_weight ,
28930     +   acceleration ,
28931     +   model ,
28932     +   origin   ) THEN DO;
MPRINT(EM_DIAGRAM):   IF NMISS( PWR_displacement , SQRT_weight , acceleration , model , origin ) THEN DO;
28933     +   SUBSTR(_WARN_, 1, 1) = 'M';
MPRINT(EM_DIAGRAM):   SUBSTR(_WARN_, 1, 1) = 'M';
28934     +
28935     +   _DM_BAD = 1;
MPRINT(EM_DIAGRAM):   _DM_BAD = 1;
28936     +END;
MPRINT(EM_DIAGRAM):   END;
28937     +*** *************************;
MPRINT(EM_DIAGRAM):   *** *************************;
28938     +*** Writing the Node intvl ;
MPRINT(EM_DIAGRAM):   *** Writing the Node intvl ;
28939     +*** *************************;
MPRINT(EM_DIAGRAM):   *** *************************;
28940     +IF _DM_BAD EQ 0 THEN DO;
MPRINT(EM_DIAGRAM):   IF _DM_BAD EQ 0 THEN DO;
28941     +   S_PWR_displacement  =    -3.85946672878638 +     5.56143158103166 *
28942     +        PWR_displacement ;
MPRINT(EM_DIAGRAM):   S_PWR_displacement = -3.85946672878638 + 5.56143158103166 * PWR_displacement ;
28943     +   S_SQRT_weight  =     -2.8995832574349 +      4.9516224140926 * SQRT_weight
28944     +         ;
MPRINT(EM_DIAGRAM):   S_SQRT_weight = -2.8995832574349 + 4.9516224140926 * SQRT_weight ;
28945     +   S_acceleration  =    -5.65655377081867 +      0.3645839108031 *
28946     +        acceleration ;
MPRINT(EM_DIAGRAM):   S_acceleration = -5.65655377081867 + 0.3645839108031 * acceleration ;
28947     +   S_model  =    -20.4776175489859 +     0.26959850875952 * model ;
MPRINT(EM_DIAGRAM):   S_model = -20.4776175489859 + 0.26959850875952 * model ;
28948     +   S_origin  =    -1.96077366996082 +     1.22260005303439 * origin ;
MPRINT(EM_DIAGRAM):   S_origin = -1.96077366996082 + 1.22260005303439 * origin ;
28949     +END;
MPRINT(EM_DIAGRAM):   END;
28950     +ELSE DO;
MPRINT(EM_DIAGRAM):   ELSE DO;
28951     +   IF MISSING( PWR_displacement ) THEN S_PWR_displacement  = . ;
MPRINT(EM_DIAGRAM):   IF MISSING( PWR_displacement ) THEN S_PWR_displacement = . ;
28952     +   ELSE S_PWR_displacement  =    -3.85946672878638 +     5.56143158103166 *
28953     +        PWR_displacement ;
MPRINT(EM_DIAGRAM):   ELSE S_PWR_displacement = -3.85946672878638 + 5.56143158103166 * PWR_displacement ;
28954     +   IF MISSING( SQRT_weight ) THEN S_SQRT_weight  = . ;
MPRINT(EM_DIAGRAM):   IF MISSING( SQRT_weight ) THEN S_SQRT_weight = . ;
28955     +   ELSE S_SQRT_weight  =     -2.8995832574349 +      4.9516224140926 *
28956     +        SQRT_weight ;
MPRINT(EM_DIAGRAM):   ELSE S_SQRT_weight = -2.8995832574349 + 4.9516224140926 * SQRT_weight ;
28957     +   IF MISSING( acceleration ) THEN S_acceleration  = . ;
MPRINT(EM_DIAGRAM):   IF MISSING( acceleration ) THEN S_acceleration = . ;
28958     +   ELSE S_acceleration  =    -5.65655377081867 +      0.3645839108031 *
28959     +        acceleration ;
MPRINT(EM_DIAGRAM):   ELSE S_acceleration = -5.65655377081867 + 0.3645839108031 * acceleration ;
28960     +   IF MISSING( model ) THEN S_model  = . ;
MPRINT(EM_DIAGRAM):   IF MISSING( model ) THEN S_model = . ;
28961     +   ELSE S_model  =    -20.4776175489859 +     0.26959850875952 * model ;
MPRINT(EM_DIAGRAM):   ELSE S_model = -20.4776175489859 + 0.26959850875952 * model ;
28962     +   IF MISSING( origin ) THEN S_origin  = . ;
MPRINT(EM_DIAGRAM):   IF MISSING( origin ) THEN S_origin = . ;
28963     +   ELSE S_origin  =    -1.96077366996082 +     1.22260005303439 * origin ;
MPRINT(EM_DIAGRAM):   ELSE S_origin = -1.96077366996082 + 1.22260005303439 * origin ;
28964     +END;
MPRINT(EM_DIAGRAM):   END;
28965     +*** *************************;
MPRINT(EM_DIAGRAM):   *** *************************;
28966     +*** Writing the Node nom ;
MPRINT(EM_DIAGRAM):   *** Writing the Node nom ;
28967     +*** *************************;
MPRINT(EM_DIAGRAM):   *** *************************;
28968     +*** *************************;
MPRINT(EM_DIAGRAM):   *** *************************;
28969     +*** Writing the Node H1 ;
MPRINT(EM_DIAGRAM):   *** Writing the Node H1 ;
28970     +*** *************************;
MPRINT(EM_DIAGRAM):   *** *************************;
28971     +IF _DM_BAD EQ 0 THEN DO;
MPRINT(EM_DIAGRAM):   IF _DM_BAD EQ 0 THEN DO;
28972     +   H11  =    -0.22561664220788 * S_PWR_displacement  +     0.29279986935289 *
28973     +        S_SQRT_weight  +    -0.08154144101082 * S_acceleration
28974     +          +    -1.57373487646847 * S_model  +    -0.56643338809607 * S_origin
28975     +         ;
MPRINT(EM_DIAGRAM):   H11 = -0.22561664220788 * S_PWR_displacement + 0.29279986935289 * S_SQRT_weight + -0.08154144101082 * S_acceleration + -1.57373487646847 * S_model + -0.56643338809607 * S_origin ;
28976     +   H12  =     4.93599986000727 * S_PWR_displacement  +    -3.01836024392518 *
28977     +        S_SQRT_weight  +     0.41423051735248 * S_acceleration
28978     +          +      0.9905881549869 * S_model  +     5.10007136657153 * S_origin
28979     +         ;
MPRINT(EM_DIAGRAM):   H12 = 4.93599986000727 * S_PWR_displacement + -3.01836024392518 * S_SQRT_weight + 0.41423051735248 * S_acceleration + 0.9905881549869 * S_model + 5.10007136657153 * S_origin ;
28980     +   H13  =    -1.53185013413527 * S_PWR_displacement  +     2.07646959989326 *
28981     +        S_SQRT_weight  +     0.62803777105863 * S_acceleration
28982     +          +    -0.48474075845178 * S_model  +    -2.46960471429882 * S_origin
28983     +         ;
MPRINT(EM_DIAGRAM):   H13 = -1.53185013413527 * S_PWR_displacement + 2.07646959989326 * S_SQRT_weight + 0.62803777105863 * S_acceleration + -0.48474075845178 * S_model + -2.46960471429882 * S_origin ;
28984     +   H14  =     1.96220002879875 * S_PWR_displacement  +    -2.87264187685342 *
28985     +        S_SQRT_weight  +    -0.33516368597319 * S_acceleration
28986     +          +    -2.66240440595274 * S_model  +     2.74431141979393 * S_origin
28987     +         ;
MPRINT(EM_DIAGRAM):   H14 = 1.96220002879875 * S_PWR_displacement + -2.87264187685342 * S_SQRT_weight + -0.33516368597319 * S_acceleration + -2.66240440595274 * S_model + 2.74431141979393 * S_origin ;
28988     +   H15  =    -4.48005247601382 * S_PWR_displacement  +    -0.00584042704999 *
28989     +        S_SQRT_weight  +    -1.88583017304181 * S_acceleration
28990     +          +     0.28789605983299 * S_model  +     0.01833307183986 * S_origin
28991     +         ;
MPRINT(EM_DIAGRAM):   H15 = -4.48005247601382 * S_PWR_displacement + -0.00584042704999 * S_SQRT_weight + -1.88583017304181 * S_acceleration + 0.28789605983299 * S_model + 0.01833307183986 * S_origin ;
28992     +   H11  = H11  +    -0.32589822322206 * G_horsepower0
28993     +          +    -2.11513303881614 * G_horsepower1  +     0.24624362754708 *
28994     +        G_horsepower2  +    -0.20585055130122 * G_horsepower3
28995     +          +    -0.19436717896363 * G_horsepower4  +     0.16856024419836 *
28996     +        G_horsepower5  +     -0.3165843590158 * G_horsepower6 ;
MPRINT(EM_DIAGRAM):   H11 = H11 + -0.32589822322206 * G_horsepower0 + -2.11513303881614 * G_horsepower1 + 0.24624362754708 * G_horsepower2 + -0.20585055130122 * G_horsepower3 + -0.19436717896363 * G_horsepower4 + 0.16856024419836 * G_horsepower5 + 
-0.3165843590158 * G_horsepower6 ;
28997     +   H12  = H12  +      -1.053307301652 * G_horsepower0
28998     +          +    -1.34604130948168 * G_horsepower1  +     2.53331408689217 *
28999     +        G_horsepower2  +    -0.88094896944232 * G_horsepower3
29000     +          +    -0.04212737578867 * G_horsepower4  +     1.70833493332698 *
29001     +        G_horsepower5  +     0.50679394243914 * G_horsepower6 ;
MPRINT(EM_DIAGRAM):   H12 = H12 + -1.053307301652 * G_horsepower0 + -1.34604130948168 * G_horsepower1 + 2.53331408689217 * G_horsepower2 + -0.88094896944232 * G_horsepower3 + -0.04212737578867 * G_horsepower4 + 1.70833493332698 * G_horsepower5 + 
0.50679394243914 * G_horsepower6 ;
29002     +   H13  = H13  +    -1.10735170928115 * G_horsepower0
29003     +          +    -1.27815205151561 * G_horsepower1  +    -2.93732966593975 *
29004     +        G_horsepower2  +     0.26560257283006 * G_horsepower3
29005     +          +     1.27772842560416 * G_horsepower4  +      0.4182236705835 *
29006     +        G_horsepower5  +     0.96211923165101 * G_horsepower6 ;
MPRINT(EM_DIAGRAM):   H13 = H13 + -1.10735170928115 * G_horsepower0 + -1.27815205151561 * G_horsepower1 + -2.93732966593975 * G_horsepower2 + 0.26560257283006 * G_horsepower3 + 1.27772842560416 * G_horsepower4 + 0.4182236705835 * G_horsepower5 + 
0.96211923165101 * G_horsepower6 ;
29007     +   H14  = H14  +     0.70529046022495 * G_horsepower0
29008     +          +        5.00762903292 * G_horsepower1  +     3.12940883992694 *
29009     +        G_horsepower2  +    -0.47131349103044 * G_horsepower3
29010     +          +    -2.50517134874503 * G_horsepower4  +    -0.23400568544976 *
29011     +        G_horsepower5  +    -4.01167816695482 * G_horsepower6 ;
MPRINT(EM_DIAGRAM):   H14 = H14 + 0.70529046022495 * G_horsepower0 + 5.00762903292 * G_horsepower1 + 3.12940883992694 * G_horsepower2 + -0.47131349103044 * G_horsepower3 + -2.50517134874503 * G_horsepower4 + -0.23400568544976 * G_horsepower5 + 
-4.01167816695482 * G_horsepower6 ;
29012     +   H15  = H15  +    -0.83580412810395 * G_horsepower0
29013     +          +     0.33584823926172 * G_horsepower1  +     1.47861687233833 *
29014     +        G_horsepower2  +     0.29972014231897 * G_horsepower3
29015     +          +    -0.40796294853021 * G_horsepower4  +    -0.61530226688032 *
29016     +        G_horsepower5  +    -1.22502721368356 * G_horsepower6 ;
MPRINT(EM_DIAGRAM):   H15 = H15 + -0.83580412810395 * G_horsepower0 + 0.33584823926172 * G_horsepower1 + 1.47861687233833 * G_horsepower2 + 0.29972014231897 * G_horsepower3 + -0.40796294853021 * G_horsepower4 + -0.61530226688032 * G_horsepower5 + 
-1.22502721368356 * G_horsepower6 ;
29017     +   H11  =    -1.25220742338907 + H11 ;
MPRINT(EM_DIAGRAM):   H11 = -1.25220742338907 + H11 ;
29018     +   H12  =     3.55054085911683 + H12 ;
MPRINT(EM_DIAGRAM):   H12 = 3.55054085911683 + H12 ;
29019     +   H13  =    -1.57744423775478 + H13 ;
MPRINT(EM_DIAGRAM):   H13 = -1.57744423775478 + H13 ;
29020     +   H14  =     1.61611384879506 + H14 ;
MPRINT(EM_DIAGRAM):   H14 = 1.61611384879506 + H14 ;
29021     +   H15  =    -2.43404899996786 + H15 ;
MPRINT(EM_DIAGRAM):   H15 = -2.43404899996786 + H15 ;
29022     +   H11  = TANH(H11 );
MPRINT(EM_DIAGRAM):   H11 = TANH(H11 );
29023     +   H12  = TANH(H12 );
MPRINT(EM_DIAGRAM):   H12 = TANH(H12 );
29024     +   H13  = TANH(H13 );
MPRINT(EM_DIAGRAM):   H13 = TANH(H13 );
29025     +   H14  = TANH(H14 );
MPRINT(EM_DIAGRAM):   H14 = TANH(H14 );
29026     +   H15  = TANH(H15 );
MPRINT(EM_DIAGRAM):   H15 = TANH(H15 );
29027     +END;
MPRINT(EM_DIAGRAM):   END;
29028     +ELSE DO;
MPRINT(EM_DIAGRAM):   ELSE DO;
29029     +   H11  = .;
MPRINT(EM_DIAGRAM):   H11 = .;
29030     +   H12  = .;
MPRINT(EM_DIAGRAM):   H12 = .;
29031     +   H13  = .;
MPRINT(EM_DIAGRAM):   H13 = .;
29032     +   H14  = .;
MPRINT(EM_DIAGRAM):   H14 = .;
29033     +   H15  = .;
MPRINT(EM_DIAGRAM):   H15 = .;
29034     +END;
MPRINT(EM_DIAGRAM):   END;
29035     +*** *************************;
MPRINT(EM_DIAGRAM):   *** *************************;
29036     +*** Writing the Node intervalTargets ;
MPRINT(EM_DIAGRAM):   *** Writing the Node intervalTargets ;
29037     +*** *************************;
MPRINT(EM_DIAGRAM):   *** *************************;
29038     +IF _DM_BAD EQ 0 THEN DO;
MPRINT(EM_DIAGRAM):   IF _DM_BAD EQ 0 THEN DO;
29039     +   P_mpg  =     4.35521208192278 * H11  +    -3.55839496594162 * H12
29040     +          +    -5.14861993092215 * H13  +    -2.82316167679099 * H14
29041     +          +     2.90190723352924 * H15 ;
MPRINT(EM_DIAGRAM):   P_mpg = 4.35521208192278 * H11 + -3.55839496594162 * H12 + -5.14861993092215 * H13 + -2.82316167679099 * H14 + 2.90190723352924 * H15 ;
29042     +   P_mpg  = P_mpg  +     3.23232456419777 * S_PWR_displacement
29043     +          +    -2.67328859312353 * S_SQRT_weight  +     1.92259283968828 *
29044     +        S_acceleration  +     3.07674646933812 * S_model
29045     +          +     1.60808322499289 * S_origin ;
MPRINT(EM_DIAGRAM):   P_mpg = P_mpg + 3.23232456419777 * S_PWR_displacement + -2.67328859312353 * S_SQRT_weight + 1.92259283968828 * S_acceleration + 3.07674646933812 * S_model + 1.60808322499289 * S_origin ;
29046     +   P_mpg  = P_mpg  +    -9.00526279781947 * G_horsepower0
29047     +          +    -2.85437315145606 * G_horsepower1  +    -4.83234195044209 *
29048     +        G_horsepower2  +    -1.19030839841495 * G_horsepower3
29049     +          +      1.2579767801169 * G_horsepower4  +     2.09998268656574 *
29050     +        G_horsepower5  +     2.95490641856222 * G_horsepower6 ;
MPRINT(EM_DIAGRAM):   P_mpg = P_mpg + -9.00526279781947 * G_horsepower0 + -2.85437315145606 * G_horsepower1 + -4.83234195044209 * G_horsepower2 + -1.19030839841495 * G_horsepower3 + 1.2579767801169 * G_horsepower4 + 2.09998268656574 * G_horsepower5 + 
2.95490641856222 * G_horsepower6 ;
29051     +   P_mpg  =     29.6876860089066 + P_mpg ;
MPRINT(EM_DIAGRAM):   P_mpg = 29.6876860089066 + P_mpg ;
29052     +END;
MPRINT(EM_DIAGRAM):   END;
29053     +ELSE DO;
MPRINT(EM_DIAGRAM):   ELSE DO;
29054     +   P_mpg  = .;
MPRINT(EM_DIAGRAM):   P_mpg = .;
29055     +END;
MPRINT(EM_DIAGRAM):   END;
29056     +IF _DM_BAD EQ 1 THEN DO;
MPRINT(EM_DIAGRAM):   IF _DM_BAD EQ 1 THEN DO;
29057     +   P_mpg  =     23.5238993710691;
MPRINT(EM_DIAGRAM):   P_mpg = 23.5238993710691;
29058     +END;
MPRINT(EM_DIAGRAM):   END;
29059     +*** *****************************;
MPRINT(EM_DIAGRAM):   *** *****************************;
29060     +*** Writing the Residuals  of the Node intervalTargets ;
MPRINT(EM_DIAGRAM):   *** Writing the Residuals of the Node intervalTargets ;
29061     +*** ******************************;
MPRINT(EM_DIAGRAM):   *** ******************************;
29062     +IF MISSING( mpg ) THEN R_mpg  = . ;
MPRINT(EM_DIAGRAM):   IF MISSING( mpg ) THEN R_mpg = . ;
29063     +ELSE R_mpg  = mpg  - P_mpg ;
MPRINT(EM_DIAGRAM):   ELSE R_mpg = mpg - P_mpg ;
29064     +********************************;
MPRINT(EM_DIAGRAM):   ********************************;
29065     +*** End Scoring Code for Neural;
MPRINT(EM_DIAGRAM):   *** End Scoring Code for Neural;
29066     +********************************;
MPRINT(EM_DIAGRAM):   ********************************;
29067     +drop
29068     +H11
29069     +H12
29070     +H13
29071     +H14
29072     +H15
29073     +;
MPRINT(EM_DIAGRAM):   drop H11 H12 H13 H14 H15 ;
29074     +drop S_:;
MPRINT(EM_DIAGRAM):   drop S_:;
NOTE: %INCLUDE (level 1) ending.
MPRINT(EM_DIAGRAM):   run;
29075      run;

NOTE: DATA STEP view saved on file EMWS2.NEURAL_VALIDATE.
NOTE: A stored DATA STEP view cannot run under a different operating system.
NOTE: View EMWS2.VARSEL_VALIDATE.VIEW used (Total process time):
      real time           0.13 seconds
      cpu time            0.10 seconds
      
NOTE: DATA statement used (Total process time):
      real time           0.15 seconds
      cpu time            0.14 seconds
      

MPRINT(EM_DIAGRAM):   quit;
29076      quit;
29077      filename emflow;
MPRINT(EM_DIAGRAM):   filename emflow;
NOTE: Fileref EMFLOW has been deassigned.
29078      *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):    *------------------------------------------------------------*;
29079      * Neural: Computing metadata for TRAIN data;
MPRINT(EM_DIAGRAM):   * Neural: Computing metadata for TRAIN data;
29080      *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;

NOTE: View EMWS2.NEURAL_TRAIN.VIEW used (Total process time):
      real time           0.14 seconds
      cpu time            0.15 seconds
      
MPRINT(EM_DIAGRAM):    *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * &nodeid: Computing Metadata for TRAIN data;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   filename _delta "C:\Users\AutoLogon\Desktop\Roshan Seneca\SEM 2\ROSHAN SEM 2\BAN 210\Final Project\Final Project-Roshan Nair\Workspaces\EMWS2\Neural\CDELTA_TRAIN.sas";
MPRINT(EMADVISECOLUMNS):   proc display c=sashelp.emmeta.advisecolumns.scl;
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):    options validvarname=any;
MPRINT(EMADVISECOLUMNS):   proc contents data=EMWS2.Neural_TRAIN out=_tempAdvisor noprint;
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):   options validvarname=V7;
MPRINT(EMADVISECOLUMNS):    data _null_;
MPRINT(EMADVISECOLUMNS):   dsid = open('EMWS2.Neural_TRAIN');
MPRINT(EMADVISECOLUMNS):   call symput('_dsidTable', strip(put(dsid, best.)));
MPRINT(EMADVISECOLUMNS):   if dsid then do;
MPRINT(EMADVISECOLUMNS):   call symput('_engineTable', attrc(dsid, 'ENGINE'));
MPRINT(EMADVISECOLUMNS):   dsid = close(dsid);
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):    proc contents data=EMWS2.Neural_TRAIN out=WORK.M1P8SENY noprint;
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):    data WORK.M1P8SENY;
MPRINT(EMADVISECOLUMNS):   length NAME $ 64 TYPE $ 1 LABEL $ 200 FORMAT $ 36 INFORMAT $36 INDEX $ 1 INDEXTYPE $ 9;
MPRINT(EMADVISECOLUMNS):   label NAME =;
MPRINT(EMADVISECOLUMNS):   set WORK.M1P8SENY(keep=name type length label format formatl formatd informat informl informd idxusage rename=(type=itype));
MPRINT(EMADVISECOLUMNS):   if itype = 1 then type = 'N';
MPRINT(EMADVISECOLUMNS):   else type = 'C';
MPRINT(EMADVISECOLUMNS):   if formatl > 0 then do;
MPRINT(EMADVISECOLUMNS):   if format ne '' then do;
MPRINT(EMADVISECOLUMNS):   if type='N' then format = strip(format)!!strip(put(formatl, best12.))!!'.'!!strip(put(formatd, best12.));
MPRINT(EMADVISECOLUMNS):   else format = strip(format)!!strip(put(formatl, best12.))!!'.';
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else format = strip(put(formatl, best12.))!!'.'!!strip(put(formatd, best12.));
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else if format ne '' then format = strip(format)!!'.';
MPRINT(EMADVISECOLUMNS):   if informl > 0 then do;
MPRINT(EMADVISECOLUMNS):   if informat ne ' ' then do;
MPRINT(EMADVISECOLUMNS):   if type='N' then informat = strip(informat)!!strip(put(informl, best12.))!!'.'!!strip(put(informd, best12.));
MPRINT(EMADVISECOLUMNS):   else informat = strip(informat)!!strip(put(informl, best12.))!!'.';
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else informat = strip(put(informl, best12.))!!'.'!!strip(put(informd, best12.));
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else if informat ne '' then informat = strip(informat)!!'.';
MPRINT(EMADVISECOLUMNS):   if idxusage = 'NONE' then index ="N";
MPRINT(EMADVISECOLUMNS):   else index = "Y";
MPRINT(EMADVISECOLUMNS):   indextype = idxusage;
MPRINT(EMADVISECOLUMNS):   drop idxusage itype formatl formatd informl informd;
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):    data WORK.M1P8SENY;
MPRINT(EMADVISECOLUMNS):   length UNAME $64;
MPRINT(EMADVISECOLUMNS):   set WORK.M1P8SENY;
MPRINT(EMADVISECOLUMNS):   UNAME = upcase(NAME);
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):    proc sort data=WORK.M235E_GM NOTHREADS;
MPRINT(EMADVISECOLUMNS):   by UNAME;
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):    data WORK.M235E_GM;
MPRINT(EMADVISECOLUMNS):   drop UNAME;
MPRINT(EMADVISECOLUMNS):   set WORK.M235E_GM;
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):    data WORK.M0UDWI_A(keep=NAME ATTR);
MPRINT(EMADVISECOLUMNS):   length ATTR $ 20;
MPRINT(EMADVISECOLUMNS):   set WORK.M235E_GM;
MPRINT(EMADVISECOLUMNS):   if level ne "INTERVAL" then do;
MPRINT(EMADVISECOLUMNS):   if order = ' ' then do;
MPRINT(EMADVISECOLUMNS):   attr = 'ORDER';
MPRINT(EMADVISECOLUMNS):   output;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   if format ne ' ' and formattype = ' ' then do;
MPRINT(EMADVISECOLUMNS):   attr = 'FORMATTYPE';
MPRINT(EMADVISECOLUMNS):   output;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   if role = ' ' then do;
MPRINT(EMADVISECOLUMNS):   attr = 'ROLE';
MPRINT(EMADVISECOLUMNS):   output;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   if level = ' ' then do;
MPRINT(EMADVISECOLUMNS):   attr = 'LEVEL';
MPRINT(EMADVISECOLUMNS):   output;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   if type = ' ' then do;
MPRINT(EMADVISECOLUMNS):   attr = 'TYPE';
MPRINT(EMADVISECOLUMNS):   output;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   if index = ' ' then do;
MPRINT(EMADVISECOLUMNS):   attr = 'INDEX';
MPRINT(EMADVISECOLUMNS):   output;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   if report = ' ' then do;
MPRINT(EMADVISECOLUMNS):   attr = 'REPORT';
MPRINT(EMADVISECOLUMNS):   output;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):   proc sort NOTHREADS;
MPRINT(EMADVISECOLUMNS):   by attr;
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):    data WORK.M235E_GM;
MPRINT(EMADVISECOLUMNS):   length NAME $64 ROLE $ 32 LEVEL $ 10 ORDER $ 8 CREATOR $32 FORMATTYPE $ 10 FAMILY $ 10 LOWERLIMIT 8 UPPERLIMIT 8 REPORT $1 DISTRIBUTION $ 20 COMMENT $64;
MPRINT(EMADVISECOLUMNS):   length levelAssigned 8 roleAssigned 8 PRICE 8;
MPRINT(EMADVISECOLUMNS):   set WORK.M235E_GM;
MPRINT(EMADVISECOLUMNS):   if formattype = ' ' then do;
MPRINT(EMADVISECOLUMNS):   if format ne ' ' then do;
MPRINT(EMADVISECOLUMNS):   if type = 'N' then do;
MPRINT(EMADVISECOLUMNS):   pos = indexc(format,'.1234567890');
MPRINT(EMADVISECOLUMNS):   if pos > 1 then tempfmt = substr(format,1, pos-1);
MPRINT(EMADVISECOLUMNS):   else tempfmt = ' ';
MPRINT(EMADVISECOLUMNS):   flen = length(tempfmt);
MPRINT(EMADVISECOLUMNS):   select;
MPRINT(EMADVISECOLUMNS):   when(tempfmt in ("DATE" "DAY" "DDMMYY" "DOWNAME" "JULDAY" "JULIAN" "MMDDYY" "MMDDYYD" "MMDDYYC" "MMDDYYN" "MMDDYYP" "MMDDYYS" "MONNAME" "MONTH" "MONYY" "NENGO" "QTR" "QTRR" "WEEKDATE" "WEEKDATX" "WEEKDAY" "WORDDATE" "WORDDATX" 
"YEAR" "YYMMDD" "YYMON" "YYMMDDC" "YYMMDDD" "YYMMDDN" "YYMMDDP" "YYMMDDS" "EURDFDE" "NJDATE" "NLDATE" "EURDFDD" "EURDFDWN" "EURDFMN" "EURDFMY" "EURDFWK" "EURDFWKX" "EURDFWDX" "EURDFDN" "EURDFDE" )) formattype = 'DATE';
MPRINT(EMADVISECOLUMNS):   when(tempfmt in ("DATETIME" "EURDFDT" "TOD" )) formattype = "DATETIME";
MPRINT(EMADVISECOLUMNS):   when(tempfmt in ("HHMM" "HOUR" "MMSS" "TIME" "TIMEAMPM" )) formattype = "TIME";
MPRINT(EMADVISECOLUMNS):   when(tempfmt in ("COMMA" "COMMAX" "DOLLAR" "DOLLARX" "E" "FRACT" "NEGPAREN" "PERCENT")) formattype="QUANTITY";
MPRINT(EMADVISECOLUMNS):   when(tempfmt in ("BINARY" "HEX" "IB" "OCTAL" "PD" "PIB" "PK" "RB" "SSN" "Z" "ZD")) formattype = "CODING";
MPRINT(EMADVISECOLUMNS):   otherwise do;
MPRINT(EMADVISECOLUMNS):   formattype = "USER";
MPRINT(EMADVISECOLUMNS):   if compress(tempfmt, '0123456789.', '') = '' then formattype='NUM';
MPRINT(EMADVISECOLUMNS):   else if substr(tempfmt, 1, 6)='NLDATE' then formattype = "DATE";
MPRINT(EMADVISECOLUMNS):   else if substr(tempfmt, 1, 6)='NLDATM' then formattype = "DATETIME";
MPRINT(EMADVISECOLUMNS):   else if substr(tempfmt, 1, 4)='NLTIM' then formattype = "TIME";
MPRINT(EMADVISECOLUMNS):   else if flen >= 4 then do;
MPRINT(EMADVISECOLUMNS):   str = substr(tempfmt,1,4);
MPRINT(EMADVISECOLUMNS):   if str in ("MMYY" "YYMM" "YYQR") then formattype ="DATE";
MPRINT(EMADVISECOLUMNS):   else if str = "S370" then formattype = "CODING";
MPRINT(EMADVISECOLUMNS):   else if str = "BEST" then formattype = "NUM";
MPRINT(EMADVISECOLUMNS):   drop str;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else if flen >=3 and substr(tempfmt,1,3) = "YYQ" then formatType = "DATE";
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   drop flen tempfmt pos;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else do;
MPRINT(EMADVISECOLUMNS):   formatType = "CATEGORY";
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   if formatType = "NUM" then do;
MPRINT(EMADVISECOLUMNS):   if index = "Y" then formatType = "DISCRETE";
MPRINT(EMADVISECOLUMNS):   else formatType = "QUANTITY";
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   if level = ' ' then do;
MPRINT(EMADVISECOLUMNS):   if formatType in ("CATEGORY", "CODING", "ID") or type = "C" then level = "NOMINAL";
MPRINT(EMADVISECOLUMNS):   else level = "INTERVAL";
MPRINT(EMADVISECOLUMNS):   levelAssigned = 1;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else level = upcase(level);
MPRINT(EMADVISECOLUMNS):   if role = ' ' then do;
MPRINT(EMADVISECOLUMNS):   length name_prefix $8 _uname $64;
MPRINT(EMADVISECOLUMNS):   drop name_prefix _uname _freqflag;
MPRINT(EMADVISECOLUMNS):   retain _freqflag;
MPRINT(EMADVISECOLUMNS):   if LENGTH> 80 then ROLE = 'TEXT';
MPRINT(EMADVISECOLUMNS):   _uname = upcase(NAME);
MPRINT(EMADVISECOLUMNS):   select(_uname);
MPRINT(EMADVISECOLUMNS):   when('_PARTIND_') do;
MPRINT(EMADVISECOLUMNS):   ROLE = 'ID';
MPRINT(EMADVISECOLUMNS):   LEVEL = 'NOMINAL';
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   when('_WARN_') ROLE = 'ASSESS';
MPRINT(EMADVISECOLUMNS):   when('EM_SEGMENT') do;
MPRINT(EMADVISECOLUMNS):   ROLE = 'SEGMENT';
MPRINT(EMADVISECOLUMNS):   LEVEL = 'NOMINAL';
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   when('_NODE_') do;
MPRINT(EMADVISECOLUMNS):   ROLE = 'SEGMENT';
MPRINT(EMADVISECOLUMNS):   LEVEL = 'NOMINAL';
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   when('EM_CLASSTARGET') ROLE = 'ASSESS';
MPRINT(EMADVISECOLUMNS):   when('EM_VALUETARGET') ROLE = 'ASSESS';
MPRINT(EMADVISECOLUMNS):   when('EM_PREDICTION') ROLE = 'PREDICT';
MPRINT(EMADVISECOLUMNS):   when('EM_PROBABILITY') ROLE = 'PREDICT';
MPRINT(EMADVISECOLUMNS):   when('EM_EVENTPROBABILITY') ROLE = 'PREDICT';
MPRINT(EMADVISECOLUMNS):   when('EM_CLASSIFICATION') ROLE = 'CLASSIFICATION';
MPRINT(EMADVISECOLUMNS):   when('EM_DECISION') ROLE = 'DECISION';
MPRINT(EMADVISECOLUMNS):   when('EM_PROFIT') ROLE = 'ASSESS';
MPRINT(EMADVISECOLUMNS):   when('EM_LOSS') ROLE = 'ASSESS';
MPRINT(EMADVISECOLUMNS):   when('EM_ROI') ROLE = 'ASSESS';
MPRINT(EMADVISECOLUMNS):   when('URI') ROLE = 'URL';
MPRINT(EMADVISECOLUMNS):   when('FILTERED') ROLE = 'TEXTLOC';
MPRINT(EMADVISECOLUMNS):   otherwise do;
MPRINT(EMADVISECOLUMNS):   if upcase(NAME) =: 'ZIP' then do;
MPRINT(EMADVISECOLUMNS):   ROLE = 'REJECTED';
MPRINT(EMADVISECOLUMNS):   LEVEL = 'NOMINAL';
MPRINT(EMADVISECOLUMNS):   COMMENT = 'Rejected by: Exceed the maximum class level of %s';
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else if upcase(NAME) in('FREQ', 'FREQUENCY') then do;
MPRINT(EMADVISECOLUMNS):   ROLE = 'FREQ';
MPRINT(EMADVISECOLUMNS):   if TYPE = 'C' then ROLE = 'INPUT';
MPRINT(EMADVISECOLUMNS):   else if _freqflag =1 then ROLE='REJECTED';
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else do;
MPRINT(EMADVISECOLUMNS):   name_prefix = scan(_uname, 1, '_');
MPRINT(EMADVISECOLUMNS):   if scan(_uname, 2, '_') = '' then name_prefix='';
MPRINT(EMADVISECOLUMNS):   if name_prefix in('F', 'I', 'U') then do;
MPRINT(EMADVISECOLUMNS):   ROLE = 'CLASSIFICATION';
MPRINT(EMADVISECOLUMNS):   LEVEL = 'NOMINAL';
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else if name_prefix in('Q') then ROLE = 'ASSESS';
MPRINT(EMADVISECOLUMNS):   else if name_prefix in('P', 'V') then ROLE = 'PREDICT';
MPRINT(EMADVISECOLUMNS):   else if name_prefix in('R', 'RS', 'RT', 'RD', 'RDS', 'RDT', 'RA', 'RAS', 'RAT') then ROLE = 'RESIDUAL';
MPRINT(EMADVISECOLUMNS):   else if name_prefix ='D' then do;
MPRINT(EMADVISECOLUMNS):   ROLE = 'DECISION';
MPRINT(EMADVISECOLUMNS):   LEVEL = 'NOMINAL';
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else if name_prefix ='B' then do;
MPRINT(EMADVISECOLUMNS):   ROLE = 'SEGMENT';
MPRINT(EMADVISECOLUMNS):   LEVEL = 'NOMINAL';
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else if name_prefix in('EP', 'BP', 'CP', 'EL', 'CL', 'BL', 'W', 'ROI', 'IC') then ROLE = 'ASSESS';
MPRINT(EMADVISECOLUMNS):   else do;
MPRINT(EMADVISECOLUMNS):   array _ROLE_ (19) $32 _TEMPORARY_ ('ASSESS','CLASSIFICATION','CENSOR', 'COST', 'CROSSID', 'DECISION', 'ID','INPUT', 'LABEL', 'MISSING','PREDICT','REFERRER','REJECTED', 'RESIDUAL','SEGMENT', 'SEQUENCE','TARGET', 'TEXT', 'TIMEID');
MPRINT(EMADVISECOLUMNS):   drop _found_ i;
MPRINT(EMADVISECOLUMNS):   _found_=0;
MPRINT(EMADVISECOLUMNS):   do i=1 to 19 until(_found_=1);
MPRINT(EMADVISECOLUMNS):   if index(_uname, trim(_ROLE_{i}))=1 then do;
MPRINT(EMADVISECOLUMNS):   ROLE=_ROLE_{i};
MPRINT(EMADVISECOLUMNS):   if ROLE = 'ID' then LEVEL = 'NOMINAL';
MPRINT(EMADVISECOLUMNS):   else if ROLE = 'SEGMENT' then LEVEL = 'NOMINAL';
MPRINT(EMADVISECOLUMNS):   else if ROLE = 'TIMEID' and TYPE='N' then LEVEL = 'INTERVAL';
MPRINT(EMADVISECOLUMNS):   _found_=1;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   if length(_uname)>2 then do;
MPRINT(EMADVISECOLUMNS):   if substr(reverse(trim(_uname)), 1, 3) = 'DI_' then do;
MPRINT(EMADVISECOLUMNS):   ROLE = 'ID';
MPRINT(EMADVISECOLUMNS):   LEVEL = 'NOMINAL';
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   if ROLE='FREQ' then _freqflag=1;
MPRINT(EMADVISECOLUMNS):   else if ROLE = 'CLASSIFICATION' then LEVEL = 'NOMINAL';
MPRINT(EMADVISECOLUMNS):   if symexist('RATEMKG_ROLE') then do;
MPRINT(EMADVISECOLUMNS):   if upcase(symget('RATEMKG_ROLE')) in('Y', 'YES') then do;
MPRINT(EMADVISECOLUMNS):   if _uname =: 'POLICY' then ROLE = 'POLICYID';
MPRINT(EMADVISECOLUMNS):   else if _uname in ('PARTITION', '_PARTIND_') then ROLE = 'PARTITION';
MPRINT(EMADVISECOLUMNS):   else if type = 'N' then do;
MPRINT(EMADVISECOLUMNS):   if _uname = 'EXPOSURE' then ROLE = 'EXPOSURE';
MPRINT(EMADVISECOLUMNS):   else if _uname = 'YEAR' then ROLE = 'YEAR';
MPRINT(EMADVISECOLUMNS):   else if _uname = 'WEIGHT' then ROLE = 'WEIGHT';
MPRINT(EMADVISECOLUMNS):   else if _uname = 'OFFSET' then ROLE = 'OFFSET';
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   if role = ' ' then do;
MPRINT(EMADVISECOLUMNS):   if formattype in('DATE', 'DATETIME', 'TIME') then role = 'TIMEID';
MPRINT(EMADVISECOLUMNS):   else role = 'INPUT';
MPRINT(EMADVISECOLUMNS):   roleAssigned = 1;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else role = upcase(role);
MPRINT(EMADVISECOLUMNS):   if REPORT = '' then REPORT = 'N';
MPRINT(EMADVISECOLUMNS):   if symexist('dmwb_product') then do;
MPRINT(EMADVISECOLUMNS):   if upcase(symget('dmwb_product')) = 'FACTORYMINER_DATASOURCE' then do;
MPRINT(EMADVISECOLUMNS):   if ROLE ^in('INPUT', 'TARGET', 'REJECTED', 'SEGMENT', 'FREQ', 'ID', 'KEY') then ROLE='REJECTED';
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):    data WORK.M235E_GM;
MPRINT(EMADVISECOLUMNS):   set WORK.M235E_GM;
MPRINT(EMADVISECOLUMNS):   label NAME = "Variable Name" TYPE = "Type" ROLE = "Role" LEVEL= "Measurement Level" ORDER= "Order" CREATOR= "Creator" FORMATTYPE= "Format Type" FAMILY= "Family" DISTRIBUTION= "Distribution" PRICE= "Price" LOWERLIMIT= "Lower 
limit" UPPERLIMIT= "Upper Limit" REPORT= "Report" COMMENT= "Comment" INDEX= "Index" INDEXTYPE= "IndexType" LABEL= "Label" LENGTH= "Length";
MPRINT(EMADVISECOLUMNS):   drop levelAssigned roleAssigned;
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):   
MPRINT(EM_DIAGRAM):  ;
MPRINT(EM_DIAGRAM):   proc sort data=WORK.COLUMNMETA;
MPRINT(EM_DIAGRAM):   by NAME;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * &nodeid: Merge incoming metadata;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   proc contents data=EMWS2.Varsel_TRAIN noprint out=_temp2(keep=NAME);
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   proc sort data=_temp2;
MPRINT(EM_DIAGRAM):   by NAME;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   proc sort data=EMWS2.Varsel_CMeta_TRAIN out=_temp;
MPRINT(EM_DIAGRAM):   by NAME;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   data EMWS2.Neural_CMeta_TRAIN;
MPRINT(EM_DIAGRAM):   merge WORK.COLUMNMETA(in=_a) _temp2(in=_b) _temp(drop=FORMAT INFORMAT LENGTH INDEX INDEXTYPE in=_c) end=_eof_;
MPRINT(EM_DIAGRAM):   by NAME;
MPRINT(EM_DIAGRAM):   if (^_a and _b) or (^_c and _a and _b) then delete;
MPRINT(EM_DIAGRAM):   if ^_b then CREATOR = "Neural";
MPRINT(EM_DIAGRAM):   length model $200;
MPRINT(EM_DIAGRAM):   label MODEL = "Model Node";
MPRINT(EM_DIAGRAM):   select(upcase(name));
MPRINT(EM_DIAGRAM):   when("P_MPG") creator = "Neural";
MPRINT(EM_DIAGRAM):   when("R_MPG") creator = "Neural";
MPRINT(EM_DIAGRAM):   when("_WARN_") creator = "Neural";
MPRINT(EM_DIAGRAM):   when("MPG") model = "Neural";
MPRINT(EM_DIAGRAM):   when('');
MPRINT(EM_DIAGRAM):   otherwise;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * Neural: Apply Delta Code;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   filename _delta;
29428      data WORK.MODELTEMP_INFO;
MPRINT(EM_DIAGRAM):    data WORK.MODELTEMP_INFO;
29429      set EMWS2.Neural_EMINFO;
MPRINT(EM_DIAGRAM):   set EMWS2.Neural_EMINFO;
29430      where DATA='Neural' and KEY ^in('DECDATA', 'DECMETA', 'IMPORTANCE', 'MODEL');
MPRINT(EM_DIAGRAM):   where DATA='Neural' and KEY ^in('DECDATA', 'DECMETA', 'IMPORTANCE', 'MODEL');
29431      run;
MPRINT(EM_DIAGRAM):   run;

NOTE: There were 0 observations read from the data set EMWS2.NEURAL_EMINFO.
      WHERE (DATA='Neural') and KEY not in ('DECDATA', 'DECMETA', 'IMPORTANCE', 'MODEL');
NOTE: The data set WORK.MODELTEMP_INFO has 0 observations and 3 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
      

29432      data EMWS2.Neural_EMINFO;
MPRINT(EM_DIAGRAM):    data EMWS2.Neural_EMINFO;
29433      length TARGET KEY $32 DATA $43;
MPRINT(EM_DIAGRAM):   length TARGET KEY $32 DATA $43;
29434      input TARGET KEY DATA $;
MPRINT(EM_DIAGRAM):   input TARGET KEY DATA $;
29435      cards;
MPRINT(EM_DIAGRAM):   cards;

NOTE: The data set EMWS2.NEURAL_EMINFO has 3 observations and 3 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
      

MPRINT(EM_DIAGRAM):   run;
29439      run;
29440      data EMWS2.Neural_EMINFO;
MPRINT(EM_DIAGRAM):   data EMWS2.Neural_EMINFO;
29441      set EMWS2.Neural_EMINFO WORK.MODELTEMP_INFO;
MPRINT(EM_DIAGRAM):   set EMWS2.Neural_EMINFO WORK.MODELTEMP_INFO;
29442      run;
MPRINT(EM_DIAGRAM):   run;

NOTE: There were 3 observations read from the data set EMWS2.NEURAL_EMINFO.
NOTE: There were 0 observations read from the data set WORK.MODELTEMP_INFO.
NOTE: The data set EMWS2.NEURAL_EMINFO has 3 observations and 3 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
      

29443      proc sort data = EMWS2.Neural_EMINFO NOTHREADS;
MPRINT(EM_DIAGRAM):    proc sort data = EMWS2.Neural_EMINFO NOTHREADS;
29444      by TARGET KEY;
MPRINT(EM_DIAGRAM):   by TARGET KEY;
29445      run;
MPRINT(EM_DIAGRAM):   run;

NOTE: There were 3 observations read from the data set EMWS2.NEURAL_EMINFO.
NOTE: The data set EMWS2.NEURAL_EMINFO has 3 observations and 3 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
      

NOTE: View EMWS2.NEURAL_TRAIN.VIEW used (Total process time):
      real time           0.13 seconds
      cpu time            0.15 seconds
      
NOTE: View EMWS2.NEURAL_VALIDATE.VIEW used (Total process time):
      real time           0.24 seconds
      cpu time            0.15 seconds
      
MPRINT(EM_DIAGRAM):    proc printto;
MPRINT(EM_DIAGRAM):   run;
