MPRINT(EM_DIAGRAM):    data _null_;
MPRINT(EM_DIAGRAM):   call symput('NLDATE', strip(put(date(), NLDATE.)));
MPRINT(EM_DIAGRAM):   call symput('NLTIME', strip(put(datetime(), NLTIME.)));
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   data _null_;
MPRINT(EM_DIAGRAM):   nldate= sasmsg("sashelp.dmine", "log_date_note", 'N', "August 11, 2022" );
MPRINT(EM_DIAGRAM):   nltime= sasmsg("sashelp.dmine", "log_time_note", 'N', "00:04:28" );
MPRINT(EM_DIAGRAM):   put "*------------------------------------------------------------*";
MPRINT(EM_DIAGRAM):   put "* Training Log";
MPRINT(EM_DIAGRAM):   put nldate;
MPRINT(EM_DIAGRAM):   put nltime;
MPRINT(EM_DIAGRAM):   put "*------------------------------------------------------------*";
MPRINT(EM_DIAGRAM):   run;
*------------------------------------------------------------*
* Training Log
Date:                August 11, 2022
Time:                00:04:28
*------------------------------------------------------------*
MPRINT(EM_DIAGRAM):    filename O2IEJ770 "C:\Users\AutoLogon\Desktop\Roshan Seneca\SEM 2\ROSHAN SEM 2\BAN 210\Final Project\Final Project-Roshan Nair\Workspaces\EMWS2\GrfExpl\EMTRAIN.out" encoding="UTF-8" NOBOM;
MPRINT(EM_DIAGRAM):   proc printto print=O2IEJ770 new;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    filename _LOG "C:\Users\AutoLogon\Desktop\Roshan Seneca\SEM 2\ROSHAN SEM 2\BAN 210\Final Project\Final Project-Roshan Nair\Workspaces\EMWS2\GrfExpl\EMLOG.log" encoding="UTF-8" NOBOM;
MPRINT(EM_DIAGRAM):    data _null_;
MPRINT(EM_DIAGRAM):   call symput('NLDATE', strip(put(date(), NLDATE.)));
MPRINT(EM_DIAGRAM):   call symput('NLTIME', strip(put(datetime(), NLTIME.)));
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   data _null_;
MPRINT(EM_DIAGRAM):   nldate= sasmsg("sashelp.dmine", "log_date_note", 'N', "August 11, 2022" );
MPRINT(EM_DIAGRAM):   nltime= sasmsg("sashelp.dmine", "log_time_note", 'N', "00:04:28" );
MPRINT(EM_DIAGRAM):   file _LOG;
MPRINT(EM_DIAGRAM):   put "*------------------------------------------------------------*";
MPRINT(EM_DIAGRAM):   put "User:                AutoLogon";
MPRINT(EM_DIAGRAM):   put nldate;
MPRINT(EM_DIAGRAM):   put nltime;
MPRINT(EM_DIAGRAM):   put "Site:                70192439";
MPRINT(EM_DIAGRAM):   put "Platform:            X64_8PRO";
MPRINT(EM_DIAGRAM):   put "Maintenance Release: 9.04.01M3P062415";
MPRINT(EM_DIAGRAM):   put "EM Version:          14.1";
MPRINT(EM_DIAGRAM):   put "* ";
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    filename _LOGIN "C:\Users\AutoLogon\Desktop\Roshan Seneca\SEM 2\ROSHAN SEM 2\BAN 210\Final Project\Final Project-Roshan Nair\Workspaces\EMWS2\GrfExpl\EMTRAIN.log" encoding="UTF-8" NOBOM;
MPRINT(EM_COPYFILE):   data _null_;
MPRINT(EM_COPYFILE):   length line $20000;
MPRINT(EM_COPYFILE):   file _LOG MOD lrecl=20000;
MPRINT(EM_COPYFILE):   fid=fopen("_LOGIN",'i',20000,'v');
MPRINT(EM_COPYFILE):   if fid > 0 then do;
MPRINT(EM_COPYFILE):   do while(^fread(fid));
MPRINT(EM_COPYFILE):   rlen = frlen(fid);
MPRINT(EM_COPYFILE):   rc= fget(fid,line,20000);
MPRINT(EM_COPYFILE):   start = length(line)-length(left(line))+1;
MPRINT(EM_COPYFILE):   line=strip(line);
MPRINT(EM_COPYFILE):   put @start line;
MPRINT(EM_COPYFILE):   end;
MPRINT(EM_COPYFILE):   if fid > 0 then rc=fclose(fid);
MPRINT(EM_COPYFILE):   end;
MPRINT(EM_COPYFILE):   run;
MPRINT(EM_DIAGRAM):  ;
MPRINT(EM_DIAGRAM):   filename _LOGIN;
MPRINT(EM_DIAGRAM):    data _null_;
MPRINT(EM_DIAGRAM):   file _LOG mod;
MPRINT(EM_DIAGRAM):   put _page_;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   filename _LOGIN "C:\Users\AutoLogon\Desktop\Roshan Seneca\SEM 2\ROSHAN SEM 2\BAN 210\Final Project\Final Project-Roshan Nair\Workspaces\EMWS2\GrfExpl\EMSCORE.log" encoding="UTF-8" NOBOM;
MPRINT(EM_DIAGRAM):  ;
MPRINT(EM_DIAGRAM):   data _null_;
MPRINT(EM_DIAGRAM):   file _LOG mod;
MPRINT(EM_DIAGRAM):   put _page_;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    filename _LOGIN "C:\Users\AutoLogon\Desktop\Roshan Seneca\SEM 2\ROSHAN SEM 2\BAN 210\Final Project\Final Project-Roshan Nair\Workspaces\EMWS2\GrfExpl\EMREPORT.log" encoding="UTF-8" NOBOM;
MPRINT(EM_DIAGRAM):  ;
MPRINT(EM_DIAGRAM):   filename _LOGIN;
MPRINT(EM_DIAGRAM):    filename _LOG;
MPRINT(EM_DIAGRAM):    filename _OUT "C:\Users\AutoLogon\Desktop\Roshan Seneca\SEM 2\ROSHAN SEM 2\BAN 210\Final Project\Final Project-Roshan Nair\Workspaces\EMWS2\GrfExpl\EMOUTPUT.out" encoding="UTF-8" NOBOM;
MPRINT(EM_DIAGRAM):    data _null_;
MPRINT(EM_DIAGRAM):   call symput('NLDATE', strip(put(date(), NLDATE.)));
MPRINT(EM_DIAGRAM):   call symput('NLTIME', strip(put(datetime(), NLTIME.)));
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   data _null_;
MPRINT(EM_DIAGRAM):   nldate= sasmsg("sashelp.dmine", "log_date_note", 'N', "August 11, 2022" );
MPRINT(EM_DIAGRAM):   nltime= sasmsg("sashelp.dmine", "log_time_note", 'N', "00:04:28" );
MPRINT(EM_DIAGRAM):   file _OUT;
MPRINT(EM_DIAGRAM):   put "*------------------------------------------------------------*";
MPRINT(EM_DIAGRAM):   put "User:                AutoLogon";
MPRINT(EM_DIAGRAM):   put nldate;
MPRINT(EM_DIAGRAM):   put nltime;
MPRINT(EM_DIAGRAM):   put "*------------------------------------------------------------*";
MPRINT(EM_DIAGRAM):   put "* Training Output";
MPRINT(EM_DIAGRAM):   put "*------------------------------------------------------------*";
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    filename _OUTIN "C:\Users\AutoLogon\Desktop\Roshan Seneca\SEM 2\ROSHAN SEM 2\BAN 210\Final Project\Final Project-Roshan Nair\Workspaces\EMWS2\GrfExpl\EMTRAIN.out" encoding="UTF-8" NOBOM;
MPRINT(EM_DIAGRAM):   ;
MPRINT(EM_COPYFILE):   data _null_;
MPRINT(EM_COPYFILE):   length line $20000;
MPRINT(EM_COPYFILE):   file _OUT MOD lrecl=20000;
MPRINT(EM_COPYFILE):   fid=fopen("_OUTIN",'i',20000,'v');
MPRINT(EM_COPYFILE):   if fid > 0 then do;
MPRINT(EM_COPYFILE):   do while(^fread(fid));
MPRINT(EM_COPYFILE):   rlen = frlen(fid);
MPRINT(EM_COPYFILE):   rc= fget(fid,line,20000);
MPRINT(EM_COPYFILE):   start = length(line)-length(left(line))+1;
MPRINT(EM_COPYFILE):   line=strip(line);
MPRINT(EM_COPYFILE):   put @start line;
MPRINT(EM_COPYFILE):   end;
MPRINT(EM_COPYFILE):   if fid > 0 then rc=fclose(fid);
MPRINT(EM_COPYFILE):   end;
MPRINT(EM_COPYFILE):   run;
MPRINT(EM_DIAGRAM):  ;
MPRINT(EM_DIAGRAM):   filename _OUTIN;
MPRINT(EM_DIAGRAM):    data _null_;
MPRINT(EM_DIAGRAM):   file _OUT mod;
MPRINT(EM_DIAGRAM):   put _page_;
MPRINT(EM_DIAGRAM):   put // "*------------------------------------------------------------*";
MPRINT(EM_DIAGRAM):   put "* Score Output";
MPRINT(EM_DIAGRAM):   put "*------------------------------------------------------------*";
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    filename _OUTIN "C:\Users\AutoLogon\Desktop\Roshan Seneca\SEM 2\ROSHAN SEM 2\BAN 210\Final Project\Final Project-Roshan Nair\Workspaces\EMWS2\GrfExpl\EMSCORE.out" encoding="UTF-8" NOBOM;
MPRINT(EM_DIAGRAM):  ;
MPRINT(EM_DIAGRAM):   filename _OUTIN;
MPRINT(EM_DIAGRAM):    data _null_;
MPRINT(EM_DIAGRAM):   file _OUT mod;
MPRINT(EM_DIAGRAM):   put _page_;
MPRINT(EM_DIAGRAM):   put // "*------------------------------------------------------------*";
MPRINT(EM_DIAGRAM):   put "* Report Output";
MPRINT(EM_DIAGRAM):   put "*------------------------------------------------------------*";
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    filename _OUTIN "C:\Users\AutoLogon\Desktop\Roshan Seneca\SEM 2\ROSHAN SEM 2\BAN 210\Final Project\Final Project-Roshan Nair\Workspaces\EMWS2\GrfExpl\EMREPORT.out" encoding="UTF-8" NOBOM;
MPRINT(EM_DIAGRAM):  ;
MPRINT(EM_DIAGRAM):   filename _OUTIN;
MPRINT(EM_DIAGRAM):    filename _OUT;
MPRINT(EM_DIAGRAM):    filename _emtool_ 'C:\Users\AutoLogon\Desktop\Roshan Seneca\SEM 2\ROSHAN SEM 2\BAN 210\Final Project\Final Project-Roshan Nair\Workspaces\EMWS2\GrfExpl\EMRUNSTATUS.xml' encoding="UTF-8" NOBOM;
21587      proc freq data=EMWS2.GrfExpl_VariableSet noprint;
MPRINT(EM_DIAGRAM):    proc freq data=EMWS2.GrfExpl_VariableSet noprint;
21588      table ROLE*LEVEL/out=WORK.GrfExplMETA;
MPRINT(EM_DIAGRAM):   table ROLE*LEVEL/out=WORK.GrfExplMETA;
21589      run;
MPRINT(EM_DIAGRAM):   run;

NOTE: There were 9 observations read from the data set EMWS2.GRFEXPL_VARIABLESET.
NOTE: The data set WORK.GRFEXPLMETA has 3 observations and 4 variables.
NOTE: PROCEDURE FREQ used (Total process time):
      real time           0.05 seconds
      cpu time            0.06 seconds
      

21590      proc print data=WORK.GrfExplMETA label noobs;
MPRINT(EM_DIAGRAM):   proc print data=WORK.GrfExplMETA label noobs;
21591      var ROLE LEVEL COUNT;
MPRINT(EM_DIAGRAM):   var ROLE LEVEL COUNT;
21592      label ROLE = "%sysfunc(sasmsg(sashelp.dmine, meta_role_vlabel, NOQUOTE))" LEVEL = "%sysfunc(sasmsg(sashelp.dmine, meta_level_vlabel, NOQUOTE))" COUNT = "%sysfunc(sasmsg(sashelp.dmine, rpt_count_vlabel, NOQUOTE))";
MPRINT(EM_DIAGRAM):   label ROLE = "Role" LEVEL = "Measurement Level" COUNT = "Frequency Count";
21593      title9 ' ';
MPRINT(EM_DIAGRAM):   title9 ' ';
21594      title10 "%sysfunc(sasmsg(sashelp.dmine, rpt_varSummary_title  , NOQUOTE))";
MPRINT(EM_DIAGRAM):   title10 "Variable Summary";
MPRINT(EM_DIAGRAM):   run;
21595      run;

NOTE: There were 3 observations read from the data set WORK.GRFEXPLMETA.
NOTE: The PROCEDURE PRINT printed page 1.
NOTE: PROCEDURE PRINT used (Total process time):
      real time           0.02 seconds
      cpu time            0.01 seconds
      

21596      title10;
MPRINT(EM_DIAGRAM):   title10;
21597      %let EMEXCEPTIONSTRING=;
MPRINT(EM_DIAGRAM):     *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * GrfExpl: Generation of macros and macro variables;
MPRINT(EM_DIAGRAM):   * To see the code generated, set the EM_DEBUG macro variable to SOURCE or _ALL_;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * GrfExpl: EM Macro Variables and Macros;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------* ;
MPRINT(EM_DIAGRAM):   * System Macro Variables;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------* ;
MPRINT(EM_DIAGRAM):   data _null_;
MPRINT(EM_DIAGRAM):   length string $2000;
MPRINT(EM_DIAGRAM):   string = 'WS01_20S';
MPRINT(EM_DIAGRAM):   call symput('EM_PROJECTNAME', trim(string));
MPRINT(EM_DIAGRAM):   string = 'Final Project-Roshan Nair';
MPRINT(EM_DIAGRAM):   call symput('EM_WSNAME', trim(string));
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------* ;
MPRINT(EM_DIAGRAM):   * Properties Macro Variables ;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------* ;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * Files Macro Variables;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * Import Macro Variables;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * Export Macro Variables;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * Decision Macro Variables;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * Statement Macro Variables;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * Variable Macros;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * General Variable Macros;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * Target Variable Macros;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * Input Variable Macros;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * Rejected Variable Macros;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * Misc Variable Macros;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * End Create EM Macro Variables and Macros;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
21908      *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):    *------------------------------------------------------------*;
21909      * GrfExpl: Generation of macros and macro variables;
MPRINT(EM_DIAGRAM):   * GrfExpl: Generation of macros and macro variables;
21910      * To see the code generated, set the EM_DEBUG macro variable to SOURCE or _ALL_;
MPRINT(EM_DIAGRAM):   * To see the code generated, set the EM_DEBUG macro variable to SOURCE or _ALL_;
21911      *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;

21912      %let EMEXCEPTIONSTRING=;
21913      *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):    *------------------------------------------------------------*;
21914      * TRAIN: GrfExpl;
MPRINT(EM_DIAGRAM):   * TRAIN: GrfExpl;
21915      *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
21916      %let EM_ACTION = TRAIN;
21917      %let syscc = 0;
21918      %macro main;
21919         filename temp catalog 'sashelp.emexpl.graphexplore_macros.source';
21920         %include temp;
21921         filename temp;
21922      
21923         %SetProperties;
21924      
21925         %if %upcase(&EM_ACTION) = CREATE %then %do;
21926      
21927             filename temp catalog 'sashelp.emexpl.graphexplore_create.source';
21928             %include temp;
21929             filename temp;
21930             %create;
21931         %end;
21932         %else
21933         %if %upcase(&EM_ACTION) = TRAIN %then %do;
21934      
21935             filename temp catalog 'sashelp.emexpl.graphexplore_train.source';
21936             %include temp;
21937             filename temp;
21938             %train;
21939      
21940         %end;
21941         %else
21942         %if %upcase(&EM_ACTION) = REPORT %then %do;
21943      
21944             filename temp catalog 'sashelp.emexpl.graphexplore_report.source';
21945             %include temp;
21946             filename temp;
21947      
21948             %report;
21949         %end;
21950      
21951      %mend main;
21952      
21953      %main;
MPRINT(EM_DIAGRAM):    
MPRINT(MAIN):   filename temp catalog 'sashelp.emexpl.graphexplore_macros.source';
NOTE: %INCLUDE (level 1) file TEMP is file SASHELP.EMEXPL.GRAPHEXPLORE_MACROS.SOURCE.
21954     +%macro SetProperties;
21955     +   %em_checkmacro(name=EM_PROPERTY_INTERVALBYTARGET,      global=Y, value=Y);
21956     +   %em_checkmacro(name=EM_PROPERTY_CLASSBYTARGET,         global=Y, value=Y);
21957     +   %em_checkmacro(name=EM_PROPERTY_DATASOURCE,            global=Y, value=SAMPLE);
21958     +   %em_checkmacro(name=EM_PROPERTY_EMSAMPLEMETHOD,        global=Y, value=FIRSTN);
21959     +   %em_checkmacro(name=EM_PROPERTY_EMSAMPLESIZE,          global=Y, value=DEFAULT);
21960     +   %em_checkmacro(name=EM_PROPERTY_EMRANDOMSEED,          global=Y, value=12345);
21961     +
21962     +%mend SetProperties;
NOTE: %INCLUDE (level 1) ending.
MPRINT(MAIN):   filename temp;
NOTE: Fileref TEMP has been deassigned.
MPRINT(SETPROPERTIES):  ;
MPRINT(SETPROPERTIES):  ;
MPRINT(SETPROPERTIES):  ;
MPRINT(SETPROPERTIES):  ;
MPRINT(SETPROPERTIES):  ;
MPRINT(SETPROPERTIES):  ;
MPRINT(MAIN):  ;
MPRINT(MAIN):   filename temp catalog 'sashelp.emexpl.graphexplore_train.source';
NOTE: %INCLUDE (level 1) file TEMP is file SASHELP.EMEXPL.GRAPHEXPLORE_TRAIN.SOURCE.
21963     +%macro train;
21964     +
21965     +    %let graphData = &em_import_data;
21966     +    %if "&graphData" eq "" %then
21967     +        %let graphData = &em_import_transaction;
21968     +    %if "&graphData" eq "" %then
21969     +        %let graphData = &em_import_document;
21970     +    %if "&graphData" eq "" %then
21971     +        %let graphData = &em_import_validate;
21972     +    %if "&graphData" eq "" %then
21973     +        %let graphData = &em_import_test;
21974     +    %if "&graphData" eq "" %then
21975     +        %let graphData = &em_import_score;
21976     +
21977     +    %if "&graphData" eq "" %then %do;
21978     +        %let emexceptionString = exception.server.IMPORT.NODATA;
21979     +        %goto doendm;
21980     +    %end;
21981     +
21982     +    %em_getname(key=SAMPLE_DATA, type=DATA);
21983     +
21984     +    filename vartemp catalog 'sashelp.emutil.em_varmacro.source';
21985     +    %include vartemp;
21986     +    filename vartemp;
21987     +
21988     +    data tempVariableSet;
21989     +       set &em_data_variableset;
21990     +       where (ROLE = 'REJECTED' and USE='Y') or ROLE='FREQ' or ( ROLE ne 'REJECTED' and USE in('Y', 'D'));
21991     +       if _N_< 950 or (ROLE = 'TARGET' and USE in('Y', 'D')) or ROLE='FREQ' then output;
21992     +    run;
21993     +    %em_varMacro(name=varSample, metadata=tempVariableSet, where=, key=NAME, nummacro=numVarSample);
21994     +
21995     +
21996     +     %exploreSample(DATA=&graphData, OUTPUT=&EM_USER_SAMPLE_DATA, METADATA=&EM_DATA_VARIABLESET, VARS=%varSample,
21997     +                      METHOD=&EM_PROPERTY_EMSAMPLEMETHOD, SIZE=&EM_PROPERTY_EMSAMPLESIZE,
21998     +                      ALPHA=, PVALUE=, SEED=&EM_PROPERTY_EMRANDOMSEED);
21999     +
22000     +    %doendm:
22001     +
22002     +%mend train;
22003     +
22004     +%train;
MPRINT(TRAIN):  ;
MPRINT(TRAIN):   filename vartemp catalog 'sashelp.emutil.em_varmacro.source';
NOTE: %INCLUDE (level 2) file VARTEMP is file SASHELP.EMUTIL.EM_VARMACRO.SOURCE.
22006     +%macro em_varMacro(name=emMacro, metadata=, where=, key=NAME, nummacro=, maxvar=-1);
22008     +   filename macFile catalog 'work.emutil.macro.source';
22009     +   %let _METAOBS = 0;
22010     +   %let _maxvar = &maxvar;
22011     +   %if "&_maxvar" eq "" %then %let maxvar = -1;
22013     +   %if (%sysfunc(exist(&metadata))<1 and %sysfunc(exist(&metadata, VIEW))<1)
22014     +                   or (&metadata eq ) %then %do;
22015     +       %put * No metadata data set defined;
22016     +       %goto doend;
22017     +   %end;
22019     +   data _null_;
22020     +      length _STRING_ $80;
22021     +      retain _STRING_ '' maxvar 0;
22022     +      set &metadata end=eof;
22023     +      file macFile;
22024     +      %if %nrbquote(&where) ne %then %do;
22025     +          %let whereClause = where (%nrbquote(&where));
22026     +          %unquote(&whereClause);
22027     +      %end;
22028     +      if _N_=1 then do;
22029     +         string = "%"!!"macro &name;";
22030     +         put string;
22031     +      end;
22032     +      maxvar +1;
22033     +      if (length(_STRING_) + length(trim(&key))+ 4 < 80) then do;
22034     +         _STRING_ = trim(_STRING_)!!' '!!trim(&key);
22035     +         if eof
22036     +            %if  %sysevalf(&_maxvar > 0) %then %do;
22037     +                or maxvar >= &maxvar
22038     +            %end;
22039     +            then do;
22040     +            put _STRING_;
22041     +            string = "%"!!"mend &name;";
22042     +            put string;
22043     +            string = strip(put(_N_, best.));
22044     +            call symput('_METAOBS', string);
22045     +            %if (&nummacro ne ) %then %do;
22046     +                put "%" "global &nummacro;";
22047     +                put "%" "let &nummacro = " string ";";
22048     +            %end;
22049     +            stop;
22050     +         end;
22051     +      end;
22052     +      else do;
22053     +         put _STRING_;
22054     +         _string_ = TRIM(&key);
22055     +         if eof
22056     +            %if  %sysevalf(&_maxvar > 0) %then %do;
22057     +              or maxvar >= &maxvar
22058     +           %end;
22059     +            then do;
22060     +            put _STRING_;
22061     +            string = "%"!!"mend &name;";
22062     +            put string;
22063     +        end;
22064     +      end;
22065     +      if eof
22066     +         %if  %sysevalf(&_maxvar > 0) %then %do;
22067     +             or maxvar >= &maxvar
22068     +         %end;
22069     +         then do;
22070     +         string = strip(put(_N_, best.));
22071     +         call symput('_METAOBS', string);
22072     +         %if (&nummacro ne ) %then %do;
22073     +             put "%" "global &nummacro;";
22074     +             put "%" "let &nummacro = " string ";";
22075     +         %end;
22076     +         stop;
22077     +      end;
22078     +   run;
22080     +   %doend:
22081     +   %if ^&_METAOBS %then %do;
22082     +       data _null_;
22083     +          file macFile;
22084     +          put "%" "macro &name;";
22085     +          put "%" "mend &name;";
22086     +          %if (&nummacro ne ) %then %do;
22087     +              put "%" "global &nummacro;";
22088     +              put "%" "let &nummacro = 0;";
22089     +          %end;
22090     +      run;
22091     +   %end;
22092     +   %inc macFile;
22093     +   filename macFile;
22094     +%mend em_varMacro;
NOTE: %INCLUDE (level 2) ending.
NOTE: %INCLUDE (level 1) resuming.
MPRINT(TRAIN):   filename vartemp;
NOTE: Fileref VARTEMP has been deassigned.
MPRINT(TRAIN):   data tempVariableSet;
MPRINT(TRAIN):   set EMWS2.GrfExpl_VariableSet;
MPRINT(TRAIN):   where (ROLE = 'REJECTED' and USE='Y') or ROLE='FREQ' or ( ROLE ne 'REJECTED' and USE in('Y', 'D'));
MPRINT(TRAIN):   if _N_< 950 or (ROLE = 'TARGET' and USE in('Y', 'D')) or ROLE='FREQ' then output;
MPRINT(TRAIN):   run;

NOTE: There were 9 observations read from the data set EMWS2.GRFEXPL_VARIABLESET.
      WHERE ((ROLE='REJECTED') and (USE='Y')) or (ROLE='FREQ') or ((ROLE not = 'REJECTED') and USE in ('D', 'Y'));
NOTE: The data set WORK.TEMPVARIABLESET has 9 observations and 22 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
      

MPRINT(EM_VARMACRO):   filename macFile catalog 'work.emutil.macro.source';
MPRINT(EM_VARMACRO):   data _null_;
MPRINT(EM_VARMACRO):   length _STRING_ $80;
MPRINT(EM_VARMACRO):   retain _STRING_ '' maxvar 0;
MPRINT(EM_VARMACRO):   set tempVariableSet end=eof;
MPRINT(EM_VARMACRO):   file macFile;
MPRINT(EM_VARMACRO):   if _N_=1 then do;
MPRINT(EM_VARMACRO):   string = "%"!!"macro varSample;";
MPRINT(EM_VARMACRO):   put string;
MPRINT(EM_VARMACRO):   end;
MPRINT(EM_VARMACRO):   maxvar +1;
MPRINT(EM_VARMACRO):   if (length(_STRING_) + length(trim(NAME))+ 4 < 80) then do;
MPRINT(EM_VARMACRO):   _STRING_ = trim(_STRING_)!!' '!!trim(NAME);
MPRINT(EM_VARMACRO):   if eof then do;
MPRINT(EM_VARMACRO):   put _STRING_;
MPRINT(EM_VARMACRO):   string = "%"!!"mend varSample;";
MPRINT(EM_VARMACRO):   put string;
MPRINT(EM_VARMACRO):   string = strip(put(_N_, best.));
MPRINT(EM_VARMACRO):   call symput('_METAOBS', string);
MPRINT(EM_VARMACRO):   put "%" "global numVarSample;";
MPRINT(EM_VARMACRO):   put "%" "let numVarSample = " string ";";
MPRINT(EM_VARMACRO):   stop;
MPRINT(EM_VARMACRO):   end;
MPRINT(EM_VARMACRO):   end;
MPRINT(EM_VARMACRO):   else do;
MPRINT(EM_VARMACRO):   put _STRING_;
MPRINT(EM_VARMACRO):   _string_ = TRIM(NAME);
MPRINT(EM_VARMACRO):   if eof then do;
MPRINT(EM_VARMACRO):   put _STRING_;
MPRINT(EM_VARMACRO):   string = "%"!!"mend varSample;";
MPRINT(EM_VARMACRO):   put string;
MPRINT(EM_VARMACRO):   end;
MPRINT(EM_VARMACRO):   end;
MPRINT(EM_VARMACRO):   if eof then do;
MPRINT(EM_VARMACRO):   string = strip(put(_N_, best.));
MPRINT(EM_VARMACRO):   call symput('_METAOBS', string);
MPRINT(EM_VARMACRO):   put "%" "global numVarSample;";
MPRINT(EM_VARMACRO):   put "%" "let numVarSample = " string ";";
MPRINT(EM_VARMACRO):   stop;
MPRINT(EM_VARMACRO):   end;
MPRINT(EM_VARMACRO):   run;

NOTE: The file MACFILE is:
      Catalog Name=WORK.EMUTIL.MACRO.SOURCE,
      Catalog Page Size=4096,
      Number of Catalog Pages=4,
      Created=Thu, Aug 11, 2022 12:04:29 AM,
      Last Modified=Thu, Aug 11, 2022 12:04:29 AM,
      Filename=C:\Users\AutoLogon\AppData\Local\Temp\SAS Temporary Files\_TD12492_NHLOAN-L-B0BD_\Prc2\emutil.sas7bcat,
      Release Created=9.0401M3,Host Created=X64_8PRO

NOTE: 6 records were written to the file MACFILE.
      The minimum record length was 6.
      The maximum record length was 72.
NOTE: There were 9 observations read from the data set WORK.TEMPVARIABLESET.
NOTE: DATA statement used (Total process time):
      real time           0.02 seconds
      cpu time            0.00 seconds
      

NOTE: %INCLUDE (level 2) file MACFILE is file WORK.EMUTIL.MACRO.SOURCE.
22095     +%macro varSample;
22096     +acceleration car_name cylinders displacement horsepower model mpg origin
22097     +weight
22098     +%mend varSample;
22099     +%global numVarSample;
22100     +%let numVarSample = 9 ;
NOTE: %INCLUDE (level 2) ending.
NOTE: %INCLUDE (level 1) resuming.
MPRINT(EM_VARMACRO):   filename macFile;
NOTE: Fileref MACFILE has been deassigned.
MPRINT(TRAIN):  ;
MPRINT(EXPLORESAMPLE):   filename x catalog 'sashelp.emutil.exploreobs.source';
NOTE: %INCLUDE (level 2) file X is file SASHELP.EMUTIL.EXPLOREOBS.SOURCE.
22101     +/*------------------------------------------------------------------
22102     +  MACRO EXPLOREOBS
22103     +
22104     +  SUPPORT:  SASDHD - David Duling
22105     +  PRODUCT:  Enterprise Miner
22106     +
22107     +  DESCRIPTION:
22108     +  Generates maximum and default numbers of observations to
22109     +  download for visualization depending on the record length.
22110     +
22111     +  Values were determined by trial and error using typical
22112     +  Windows workstation configurations.
22113     +
22114     +  Discrete sets of values are returned so that user experience
22115     +  will be consitent with similar sized data sets.
22116     +
22117     +  These macro variables are set:
22118     +  _exploreobs_max -- maximum number of obs downloadable
22119     +  _exploreobs_def -- default number of obs to be downloaded
22120     +  _exploreobs_recl - record length.  Might be useful for reporting.
22121     +
22122     +  Use the _exploreobs_max to set limit the GUI selection of
22123     +  observations for downloading.  The GUI selection for obs
22124     +  could be reduced to "Default" and "Max".
22125     +
22126     +  Parameters
22127     +  data=   libname.memname of input data
22128     +  vars=   subset list of variables.
22129     +          downloading 1 out of 500 really does work like downloading
22130     +          1 out of 1 vars.  Users may select a subset of vars for
22131     +                   visualizations.  Pass in the list as space delimited
22132     +          var names.  If vars is not specified, the record length
22133     +          of the entire data will be used.
22134     +  NBYTES=   maximum number of bytes that shouldn't be exceeded.
22135     +
22136     +  Control
22137     +  Users may control the values by entering these macro variables.
22138     +            EM_EXPLOREOBS_MAX
22139     +            EM_EXPLOREOBS_DEFAULT
22140     +  These values override the computed values.
22141     +
22142     +  Debugging
22143     +  %let _exploreobs_debug=1 ;
22144     +--------------------------------------------------------------------
22145     +  HISTORY: 20APR2004. sasdhd. pushed.
22146     +           18DEC2004. sasdhd. S0280556.
22147     +           07SEP2007. sasdhd. HK1009586
22148     +--------------------------------------------------------------------*/
22149     +
22150     +%macro exploreobs(data=,vars=, nbytes=) ;
22151     +
22152     +   /*--- variable definitions ---*/
22153     +   %global _exploreobs_max _exploreobs_def _exploreobs_recl _exploreobs_debug ;
22154     +   %local xobs xvars xlen vlen xi vname vlist ;
22155     +   %local _exp_source _exp_notes ;
22156     +
22157     +   /*--- USER definitions ---*/
22158     +   %global EM_EXPLOREOBS_MAX EM_EXPLOREOBS_DEFAULT ;
22159     +
22160     +   /*--- variable intializations ---*/
22161     +   %let _exploreobs_max=0 ;
22162     +   %let _exploreobs_def=0 ;
22163     +   %let _exploreobs_recl=0 ;
22164     +   %let xvars= 0 ;
22165     +   %let xlen = 0 ;
22166     +   %let xobs = 0 ;
22167     +
22168     +   /*--- data error checks ---*/
22169     +   %if "&data" eq "" %then %do ;
22170     +            %put NOTE: DATA is not specified. ;
22171     +            %goto term ;
22172     +      %end ;
22173     +
22174     +   %let dsid=%sysfunc(open(&data)) ;
22175     +   %if not &dsid %then %do ;
22176     +            %put NOTE: DATA &data is not available. ;
22177     +            %goto term ;
22178     +      %end ;
22179     +
22180     +   /*--- if a vars list exists generate a subset ---*/
22181     +   %if &vars ne %then %do ;
22182     +         %let dsid=%sysfunc(close(&dsid)) ;
22183     +         %if &_exploreobs_debug ne 1 %then %do ;
22184     +                  %let _exp_source=%sysfunc(getoption(SOURCE)) ;
22185     +            %let _exp_notes =%sysfunc(getoption(NOTES)) ;
22186     +                  options nosource nonotes ;
22187     +         %end ;
22188     +         data _exploreobs_temp_data ;
22189     +         set &data(obs=0) ;
22190     +          keep &vars ;
22191     +         run;
22192     +         %if &_exploreobs_debug ne 1 %then %do ;
22193     +                  options &_exp_source &_exp_notes ;
22194     +         %end ;
22195     +         %let dsid=%sysfunc(open(_exploreobs_temp_data)) ;
22196     +         %if &dsid eq 0 %then %do ;
22197     +                  %put NOTE: Sample is not available.;
22198     +                  %goto term ;
22199     +            %end ;
22200     +      %end ;
22201     +
22202     +   /*--- get var attributes ---*/
22203     +   %let xvars=%sysfunc(attrn(&dsid,nvars)) ;
22204     +   %let xobs= %sysfunc(attrn(&dsid,nobs )) ;
22205     +   %let xlen= %sysfunc(attrn(&dsid,lrecl)) ;
22206     +   %let dsid= %sysfunc(close(&dsid)) ;
22207     +
22208     +   /*--- set default and max obs ---*/
22209     +   %let _exploreobs_recl=%eval(&xlen) ;
22210     +   %if &_exploreobs_recl eq 0 %then %do ;
22211     +             %let _exploreobs_max= 0 ;
22212     +             %let _exploreobs_def= 0 ;
22213     +             %goto term ;
22214     +
22215     +   %end ;
22216     +   %else
22217     +   %if &_exploreobs_recl le 32 %then %do ;
22218     +             %let _exploreobs_max=100000 ;
22219     +             %let _exploreobs_def= 10000 ;
22220     +   %end ;
22221     +   %else
22222     +   %if &_exploreobs_recl le 128 %then %do ;
22223     +             %let _exploreobs_max=60000 ;
22224     +             %let _exploreobs_def= 6000 ;
22225     +   %end ;
22226     +   %else
22227     +   %if &_exploreobs_recl lt 1000 %then %do ;
22228     +             %let _exploreobs_max=20000 ;
22229     +             %let _exploreobs_def= 2000 ;
22230     +   %end ;
22231     +   %else
22232     +   %if &_exploreobs_recl lt 5000 %then %do ;
22233     +             %let _exploreobs_max= 10000 ;
22234     +             %let _exploreobs_def=  1000 ;
22235     +   %end ;
22236     +   %else
22237     +   %if &_exploreobs_recl lt 20000 %then %do ;
22238     +             %let _exploreobs_max= 5000 ;
22239     +             %let _exploreobs_def=  500 ;
22240     +   %end ;
22241     +   %else %do ;
22242     +             %let _exploreobs_max= 1000 ;
22243     +             %let _exploreobs_def=  200 ;
22244     +   %end ;
22245     +
22246     +   /*--- Users options ---*/
22247     +   %if &EM_EXPLOREOBS_MAX ne %then %do ;
22248     +            %let _exploreobs_max= %eval(&EM_EXPLOREOBS_MAX) ;
22249     +   %end;
22250     +   %if &EM_EXPLOREOBS_DEFAULT ne %then %do ;
22251     +            %let _exploreobs_def= %eval(&EM_EXPLOREOBS_DEFAULT) ;
22252     +   %end;
22253     +
22254     +    /*--- S0868273 ---*/
22255     +    %if "&NBYTES" ne "" %then %do;
22256     +       %let nbytes_nrows = %eval(&nbytes/ &_exploreobs_recl);
22257     +       %if &EM_EXPLOREOBS_MAX ne %then %do ;
22258     +           %let _exploreobs_max   = %sysfunc(min(&nbytes_nrows , &EM_EXPLOREOBS_MAX));
22259     +       %end;
22260     +
22261     +       %if &EM_EXPLOREOBS_DEFAULT ne %then %do ;
22262     +          %let nbytes_nrows      = %eval(&nbytes_nrows/10);
22263     +          %let _exploreobs_def   = %sysfunc(min(&nbytes_nrows , &EM_EXPLOREOBS_DEFAULT));
22264     +          %if ^&_exploreobs_def %then
22265     +              %let _exploreobs_def = 1;
22266     +
22267     +       %end;
22268     +    %end;
22269     +
22270     +   /*--- Terminate ---*/
22271     +   %term:
22272     +
22273     +   %put NOTE: EXPLOREOBS &data : vars= &xvars : recl= &_exploreobs_recl : max=&_exploreobs_max : def= &_exploreobs_def ;
22274     +%mend ;
22275     +
22276     +
NOTE: %INCLUDE (level 2) ending.
NOTE: %INCLUDE (level 1) resuming.
MPRINT(EXPLORESAMPLE):   filename x;
NOTE: Fileref X has been deassigned.
MPRINT(EXPLOREOBS):   options nosource nonotes ;
MPRINT(EXPLOREOBS):   data _exploreobs_temp_data ;
MPRINT(EXPLOREOBS):   set EMWS2.FIMPORT_train(obs=0) ;
MPRINT(EXPLOREOBS):   keep acceleration car_name cylinders displacement horsepower model mpg origin weight ;
MPRINT(EXPLOREOBS):   run;
MPRINT(EXPLOREOBS):   options SOURCE NOTES ;
NOTE: EXPLOREOBS EMWS2.FIMPORT_train : vars= 9 : recl= 96 : max=60000 : def= 6000
MPRINT(EXPLORESAMPLE):   ;
MPRINT(HPDM_PERFORMANCE):  ;
PERFORMANCE  DETAILS
MPRINT(EXPLORESAMPLE):  ;
*------------------------------------------------------------*
* FirstN/Top sample
*------------------------------------------------------------*
MPRINT(EXPLORESAMPLE):   data EMWS2.GrfExpl_SAMPLE_DATA;
MPRINT(EXPLORESAMPLE):   set EMWS2.FIMPORT_train(obs= 6000 Keep=acceleration car_name cylinders displacement horsepower model mpg origin weight );
MPRINT(EXPLORESAMPLE):   run;

NOTE: View EMWS2.FIMPORT_TRAIN.VIEW used (Total process time):
      real time           0.04 seconds
      cpu time            0.03 seconds
      
NOTE: There were 398 observations read from the data set EMWS2.FIMPORT_DATA.
NOTE: There were 398 observations read from the data set EMWS2.FIMPORT_TRAIN.
NOTE: The data set EMWS2.GRFEXPL_SAMPLE_DATA has 398 observations and 9 variables.
NOTE: DATA statement used (Total process time):
      real time           0.05 seconds
      cpu time            0.06 seconds
      

MPRINT(TRAIN):  ;
MPRINT(MAIN):  ;
NOTE: %INCLUDE (level 1) ending.
MPRINT(MAIN):   filename temp;
NOTE: Fileref TEMP has been deassigned.
MPRINT(TRAIN):  ;
MPRINT(TRAIN):   filename vartemp catalog 'sashelp.emutil.em_varmacro.source';
NOTE: %INCLUDE (level 1) file VARTEMP is file SASHELP.EMUTIL.EM_VARMACRO.SOURCE.
22278     +%macro em_varMacro(name=emMacro, metadata=, where=, key=NAME, nummacro=, maxvar=-1);
22280     +   filename macFile catalog 'work.emutil.macro.source';
22281     +   %let _METAOBS = 0;
22282     +   %let _maxvar = &maxvar;
22283     +   %if "&_maxvar" eq "" %then %let maxvar = -1;
22285     +   %if (%sysfunc(exist(&metadata))<1 and %sysfunc(exist(&metadata, VIEW))<1)
22286     +                   or (&metadata eq ) %then %do;
22287     +       %put * No metadata data set defined;
22288     +       %goto doend;
22289     +   %end;
22291     +   data _null_;
22292     +      length _STRING_ $80;
22293     +      retain _STRING_ '' maxvar 0;
22294     +      set &metadata end=eof;
22295     +      file macFile;
22296     +      %if %nrbquote(&where) ne %then %do;
22297     +          %let whereClause = where (%nrbquote(&where));
22298     +          %unquote(&whereClause);
22299     +      %end;
22300     +      if _N_=1 then do;
22301     +         string = "%"!!"macro &name;";
22302     +         put string;
22303     +      end;
22304     +      maxvar +1;
22305     +      if (length(_STRING_) + length(trim(&key))+ 4 < 80) then do;
22306     +         _STRING_ = trim(_STRING_)!!' '!!trim(&key);
22307     +         if eof
22308     +            %if  %sysevalf(&_maxvar > 0) %then %do;
22309     +                or maxvar >= &maxvar
22310     +            %end;
22311     +            then do;
22312     +            put _STRING_;
22313     +            string = "%"!!"mend &name;";
22314     +            put string;
22315     +            string = strip(put(_N_, best.));
22316     +            call symput('_METAOBS', string);
22317     +            %if (&nummacro ne ) %then %do;
22318     +                put "%" "global &nummacro;";
22319     +                put "%" "let &nummacro = " string ";";
22320     +            %end;
22321     +            stop;
22322     +         end;
22323     +      end;
22324     +      else do;
22325     +         put _STRING_;
22326     +         _string_ = TRIM(&key);
22327     +         if eof
22328     +            %if  %sysevalf(&_maxvar > 0) %then %do;
22329     +              or maxvar >= &maxvar
22330     +           %end;
22331     +            then do;
22332     +            put _STRING_;
22333     +            string = "%"!!"mend &name;";
22334     +            put string;
22335     +        end;
22336     +      end;
22337     +      if eof
22338     +         %if  %sysevalf(&_maxvar > 0) %then %do;
22339     +             or maxvar >= &maxvar
22340     +         %end;
22341     +         then do;
22342     +         string = strip(put(_N_, best.));
22343     +         call symput('_METAOBS', string);
22344     +         %if (&nummacro ne ) %then %do;
22345     +             put "%" "global &nummacro;";
22346     +             put "%" "let &nummacro = " string ";";
22347     +         %end;
22348     +         stop;
22349     +      end;
22350     +   run;
22352     +   %doend:
22353     +   %if ^&_METAOBS %then %do;
22354     +       data _null_;
22355     +          file macFile;
22356     +          put "%" "macro &name;";
22357     +          put "%" "mend &name;";
22358     +          %if (&nummacro ne ) %then %do;
22359     +              put "%" "global &nummacro;";
22360     +              put "%" "let &nummacro = 0;";
22361     +          %end;
22362     +      run;
22363     +   %end;
22364     +   %inc macFile;
22365     +   filename macFile;
22366     +%mend em_varMacro;
NOTE: %INCLUDE (level 1) ending.
MPRINT(TRAIN):   filename vartemp;
NOTE: Fileref VARTEMP has been deassigned.
MPRINT(TRAIN):   data tempVariableSet;
MPRINT(TRAIN):   set EMWS2.GrfExpl_VariableSet;
MPRINT(TRAIN):   where (ROLE = 'REJECTED' and USE='Y') or ROLE='FREQ' or ( ROLE ne 'REJECTED' and USE in('Y', 'D'));
MPRINT(TRAIN):   if _N_< 950 or (ROLE = 'TARGET' and USE in('Y', 'D')) or ROLE='FREQ' then output;
MPRINT(TRAIN):   run;

NOTE: There were 9 observations read from the data set EMWS2.GRFEXPL_VARIABLESET.
      WHERE ((ROLE='REJECTED') and (USE='Y')) or (ROLE='FREQ') or ((ROLE not = 'REJECTED') and USE in ('D', 'Y'));
NOTE: The data set WORK.TEMPVARIABLESET has 9 observations and 22 variables.
NOTE: DATA statement used (Total process time):
      real time           0.02 seconds
      cpu time            0.03 seconds
      

MPRINT(EM_VARMACRO):   filename macFile catalog 'work.emutil.macro.source';
MPRINT(EM_VARMACRO):   data _null_;
MPRINT(EM_VARMACRO):   length _STRING_ $80;
MPRINT(EM_VARMACRO):   retain _STRING_ '' maxvar 0;
MPRINT(EM_VARMACRO):   set tempVariableSet end=eof;
MPRINT(EM_VARMACRO):   file macFile;
MPRINT(EM_VARMACRO):   if _N_=1 then do;
MPRINT(EM_VARMACRO):   string = "%"!!"macro varSample;";
MPRINT(EM_VARMACRO):   put string;
MPRINT(EM_VARMACRO):   end;
MPRINT(EM_VARMACRO):   maxvar +1;
MPRINT(EM_VARMACRO):   if (length(_STRING_) + length(trim(NAME))+ 4 < 80) then do;
MPRINT(EM_VARMACRO):   _STRING_ = trim(_STRING_)!!' '!!trim(NAME);
MPRINT(EM_VARMACRO):   if eof then do;
MPRINT(EM_VARMACRO):   put _STRING_;
MPRINT(EM_VARMACRO):   string = "%"!!"mend varSample;";
MPRINT(EM_VARMACRO):   put string;
MPRINT(EM_VARMACRO):   string = strip(put(_N_, best.));
MPRINT(EM_VARMACRO):   call symput('_METAOBS', string);
MPRINT(EM_VARMACRO):   put "%" "global numVarSample;";
MPRINT(EM_VARMACRO):   put "%" "let numVarSample = " string ";";
MPRINT(EM_VARMACRO):   stop;
MPRINT(EM_VARMACRO):   end;
MPRINT(EM_VARMACRO):   end;
MPRINT(EM_VARMACRO):   else do;
MPRINT(EM_VARMACRO):   put _STRING_;
MPRINT(EM_VARMACRO):   _string_ = TRIM(NAME);
MPRINT(EM_VARMACRO):   if eof then do;
MPRINT(EM_VARMACRO):   put _STRING_;
MPRINT(EM_VARMACRO):   string = "%"!!"mend varSample;";
MPRINT(EM_VARMACRO):   put string;
MPRINT(EM_VARMACRO):   end;
MPRINT(EM_VARMACRO):   end;
MPRINT(EM_VARMACRO):   if eof then do;
MPRINT(EM_VARMACRO):   string = strip(put(_N_, best.));
MPRINT(EM_VARMACRO):   call symput('_METAOBS', string);
MPRINT(EM_VARMACRO):   put "%" "global numVarSample;";
MPRINT(EM_VARMACRO):   put "%" "let numVarSample = " string ";";
MPRINT(EM_VARMACRO):   stop;
MPRINT(EM_VARMACRO):   end;
MPRINT(EM_VARMACRO):   run;

NOTE: The file MACFILE is:
      Catalog Name=WORK.EMUTIL.MACRO.SOURCE,
      Catalog Page Size=4096,
      Number of Catalog Pages=5,
      Created=Thu, Aug 11, 2022 12:04:29 AM,
      Last Modified=Thu, Aug 11, 2022 12:04:29 AM,
      Filename=C:\Users\AutoLogon\AppData\Local\Temp\SAS Temporary Files\_TD12492_NHLOAN-L-B0BD_\Prc2\emutil.sas7bcat,
      Release Created=9.0401M3,Host Created=X64_8PRO

NOTE: 6 records were written to the file MACFILE.
      The minimum record length was 6.
      The maximum record length was 72.
NOTE: There were 9 observations read from the data set WORK.TEMPVARIABLESET.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

NOTE: %INCLUDE (level 1) file MACFILE is file WORK.EMUTIL.MACRO.SOURCE.
22367     +%macro varSample;
22368     +acceleration car_name cylinders displacement horsepower model mpg origin
22369     +weight
22370     +%mend varSample;
22371     +%global numVarSample;
22372     +%let numVarSample = 9 ;
NOTE: %INCLUDE (level 1) ending.
MPRINT(EM_VARMACRO):   filename macFile;
NOTE: Fileref MACFILE has been deassigned.
MPRINT(TRAIN):  ;
MPRINT(EXPLORESAMPLE):   filename x catalog 'sashelp.emutil.exploreobs.source';
NOTE: %INCLUDE (level 1) file X is file SASHELP.EMUTIL.EXPLOREOBS.SOURCE.
22373     +/*------------------------------------------------------------------
22374     +  MACRO EXPLOREOBS
22375     +
22376     +  SUPPORT:  SASDHD - David Duling
22377     +  PRODUCT:  Enterprise Miner
22378     +
22379     +  DESCRIPTION:
22380     +  Generates maximum and default numbers of observations to
22381     +  download for visualization depending on the record length.
22382     +
22383     +  Values were determined by trial and error using typical
22384     +  Windows workstation configurations.
22385     +
22386     +  Discrete sets of values are returned so that user experience
22387     +  will be consitent with similar sized data sets.
22388     +
22389     +  These macro variables are set:
22390     +  _exploreobs_max -- maximum number of obs downloadable
22391     +  _exploreobs_def -- default number of obs to be downloaded
22392     +  _exploreobs_recl - record length.  Might be useful for reporting.
22393     +
22394     +  Use the _exploreobs_max to set limit the GUI selection of
22395     +  observations for downloading.  The GUI selection for obs
22396     +  could be reduced to "Default" and "Max".
22397     +
22398     +  Parameters
22399     +  data=   libname.memname of input data
22400     +  vars=   subset list of variables.
22401     +          downloading 1 out of 500 really does work like downloading
22402     +          1 out of 1 vars.  Users may select a subset of vars for
22403     +                   visualizations.  Pass in the list as space delimited
22404     +          var names.  If vars is not specified, the record length
22405     +          of the entire data will be used.
22406     +  NBYTES=   maximum number of bytes that shouldn't be exceeded.
22407     +
22408     +  Control
22409     +  Users may control the values by entering these macro variables.
22410     +            EM_EXPLOREOBS_MAX
22411     +            EM_EXPLOREOBS_DEFAULT
22412     +  These values override the computed values.
22413     +
22414     +  Debugging
22415     +  %let _exploreobs_debug=1 ;
22416     +--------------------------------------------------------------------
22417     +  HISTORY: 20APR2004. sasdhd. pushed.
22418     +           18DEC2004. sasdhd. S0280556.
22419     +           07SEP2007. sasdhd. HK1009586
22420     +--------------------------------------------------------------------*/
22421     +
22422     +%macro exploreobs(data=,vars=, nbytes=) ;
22423     +
22424     +   /*--- variable definitions ---*/
22425     +   %global _exploreobs_max _exploreobs_def _exploreobs_recl _exploreobs_debug ;
22426     +   %local xobs xvars xlen vlen xi vname vlist ;
22427     +   %local _exp_source _exp_notes ;
22428     +
22429     +   /*--- USER definitions ---*/
22430     +   %global EM_EXPLOREOBS_MAX EM_EXPLOREOBS_DEFAULT ;
22431     +
22432     +   /*--- variable intializations ---*/
22433     +   %let _exploreobs_max=0 ;
22434     +   %let _exploreobs_def=0 ;
22435     +   %let _exploreobs_recl=0 ;
22436     +   %let xvars= 0 ;
22437     +   %let xlen = 0 ;
22438     +   %let xobs = 0 ;
22439     +
22440     +   /*--- data error checks ---*/
22441     +   %if "&data" eq "" %then %do ;
22442     +            %put NOTE: DATA is not specified. ;
22443     +            %goto term ;
22444     +      %end ;
22445     +
22446     +   %let dsid=%sysfunc(open(&data)) ;
22447     +   %if not &dsid %then %do ;
22448     +            %put NOTE: DATA &data is not available. ;
22449     +            %goto term ;
22450     +      %end ;
22451     +
22452     +   /*--- if a vars list exists generate a subset ---*/
22453     +   %if &vars ne %then %do ;
22454     +         %let dsid=%sysfunc(close(&dsid)) ;
22455     +         %if &_exploreobs_debug ne 1 %then %do ;
22456     +                  %let _exp_source=%sysfunc(getoption(SOURCE)) ;
22457     +            %let _exp_notes =%sysfunc(getoption(NOTES)) ;
22458     +                  options nosource nonotes ;
22459     +         %end ;
22460     +         data _exploreobs_temp_data ;
22461     +         set &data(obs=0) ;
22462     +          keep &vars ;
22463     +         run;
22464     +         %if &_exploreobs_debug ne 1 %then %do ;
22465     +                  options &_exp_source &_exp_notes ;
22466     +         %end ;
22467     +         %let dsid=%sysfunc(open(_exploreobs_temp_data)) ;
22468     +         %if &dsid eq 0 %then %do ;
22469     +                  %put NOTE: Sample is not available.;
22470     +                  %goto term ;
22471     +            %end ;
22472     +      %end ;
22473     +
22474     +   /*--- get var attributes ---*/
22475     +   %let xvars=%sysfunc(attrn(&dsid,nvars)) ;
22476     +   %let xobs= %sysfunc(attrn(&dsid,nobs )) ;
22477     +   %let xlen= %sysfunc(attrn(&dsid,lrecl)) ;
22478     +   %let dsid= %sysfunc(close(&dsid)) ;
22479     +
22480     +   /*--- set default and max obs ---*/
22481     +   %let _exploreobs_recl=%eval(&xlen) ;
22482     +   %if &_exploreobs_recl eq 0 %then %do ;
22483     +             %let _exploreobs_max= 0 ;
22484     +             %let _exploreobs_def= 0 ;
22485     +             %goto term ;
22486     +
22487     +   %end ;
22488     +   %else
22489     +   %if &_exploreobs_recl le 32 %then %do ;
22490     +             %let _exploreobs_max=100000 ;
22491     +             %let _exploreobs_def= 10000 ;
22492     +   %end ;
22493     +   %else
22494     +   %if &_exploreobs_recl le 128 %then %do ;
22495     +             %let _exploreobs_max=60000 ;
22496     +             %let _exploreobs_def= 6000 ;
22497     +   %end ;
22498     +   %else
22499     +   %if &_exploreobs_recl lt 1000 %then %do ;
22500     +             %let _exploreobs_max=20000 ;
22501     +             %let _exploreobs_def= 2000 ;
22502     +   %end ;
22503     +   %else
22504     +   %if &_exploreobs_recl lt 5000 %then %do ;
22505     +             %let _exploreobs_max= 10000 ;
22506     +             %let _exploreobs_def=  1000 ;
22507     +   %end ;
22508     +   %else
22509     +   %if &_exploreobs_recl lt 20000 %then %do ;
22510     +             %let _exploreobs_max= 5000 ;
22511     +             %let _exploreobs_def=  500 ;
22512     +   %end ;
22513     +   %else %do ;
22514     +             %let _exploreobs_max= 1000 ;
22515     +             %let _exploreobs_def=  200 ;
22516     +   %end ;
22517     +
22518     +   /*--- Users options ---*/
22519     +   %if &EM_EXPLOREOBS_MAX ne %then %do ;
22520     +            %let _exploreobs_max= %eval(&EM_EXPLOREOBS_MAX) ;
22521     +   %end;
22522     +   %if &EM_EXPLOREOBS_DEFAULT ne %then %do ;
22523     +            %let _exploreobs_def= %eval(&EM_EXPLOREOBS_DEFAULT) ;
22524     +   %end;
22525     +
22526     +    /*--- S0868273 ---*/
22527     +    %if "&NBYTES" ne "" %then %do;
22528     +       %let nbytes_nrows = %eval(&nbytes/ &_exploreobs_recl);
22529     +       %if &EM_EXPLOREOBS_MAX ne %then %do ;
22530     +           %let _exploreobs_max   = %sysfunc(min(&nbytes_nrows , &EM_EXPLOREOBS_MAX));
22531     +       %end;
22532     +
22533     +       %if &EM_EXPLOREOBS_DEFAULT ne %then %do ;
22534     +          %let nbytes_nrows      = %eval(&nbytes_nrows/10);
22535     +          %let _exploreobs_def   = %sysfunc(min(&nbytes_nrows , &EM_EXPLOREOBS_DEFAULT));
22536     +          %if ^&_exploreobs_def %then
22537     +              %let _exploreobs_def = 1;
22538     +
22539     +       %end;
22540     +    %end;
22541     +
22542     +   /*--- Terminate ---*/
22543     +   %term:
22544     +
22545     +   %put NOTE: EXPLOREOBS &data : vars= &xvars : recl= &_exploreobs_recl : max=&_exploreobs_max : def= &_exploreobs_def ;
22546     +%mend ;
22547     +
22548     +
NOTE: %INCLUDE (level 1) ending.
MPRINT(EXPLORESAMPLE):   filename x;
NOTE: Fileref X has been deassigned.
MPRINT(EXPLOREOBS):   options nosource nonotes ;
MPRINT(EXPLOREOBS):   data _exploreobs_temp_data ;
MPRINT(EXPLOREOBS):   set EMWS2.FIMPORT_train(obs=0) ;
MPRINT(EXPLOREOBS):   keep acceleration car_name cylinders displacement horsepower model mpg origin weight ;
MPRINT(EXPLOREOBS):   run;
MPRINT(EXPLOREOBS):   options SOURCE NOTES ;
NOTE: EXPLOREOBS EMWS2.FIMPORT_train : vars= 9 : recl= 96 : max=60000 : def= 6000
MPRINT(EXPLORESAMPLE):   ;
MPRINT(HPDM_PERFORMANCE):  ;
PERFORMANCE  DETAILS
MPRINT(EXPLORESAMPLE):  ;
*------------------------------------------------------------*
* FirstN/Top sample
*------------------------------------------------------------*
MPRINT(EXPLORESAMPLE):   data EMWS2.GrfExpl_SAMPLE_DATA;
MPRINT(EXPLORESAMPLE):   set EMWS2.FIMPORT_train(obs= 6000 Keep=acceleration car_name cylinders displacement horsepower model mpg origin weight );
MPRINT(EXPLORESAMPLE):   run;

NOTE: View EMWS2.FIMPORT_TRAIN.VIEW used (Total process time):
      real time           0.06 seconds
      cpu time            0.06 seconds
      
NOTE: There were 398 observations read from the data set EMWS2.FIMPORT_DATA.
NOTE: There were 398 observations read from the data set EMWS2.FIMPORT_TRAIN.
NOTE: The data set EMWS2.GRFEXPL_SAMPLE_DATA has 398 observations and 9 variables.
NOTE: DATA statement used (Total process time):
      real time           0.10 seconds
      cpu time            0.07 seconds
      

MPRINT(TRAIN):  ;
MPRINT(MAIN):  ;
MPRINT(EM_DIAGRAM):  ;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * End TRAIN: GrfExpl;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
22549      *------------------------------------------------------------*;
22550      * End TRAIN: GrfExpl;
22551      *------------------------------------------------------------*;
22552      

22553      *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):    *------------------------------------------------------------*;
22554      * Close any missing semi colons;
MPRINT(EM_DIAGRAM):   * Close any missing semi colons;
22555      *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
22556      ;
MPRINT(EM_DIAGRAM):   ;
22557      ;
MPRINT(EM_DIAGRAM):   ;
22558      ;
MPRINT(EM_DIAGRAM):   ;
22559      ;
MPRINT(EM_DIAGRAM):   ;
22560      quit;
MPRINT(EM_DIAGRAM):   quit;
22561      *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
22562      * Close any unbalanced quotes;
MPRINT(EM_DIAGRAM):   * Close any unbalanced quotes;
22563      *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
22564      /*; *"; *'; */
22565      ;
MPRINT(EM_DIAGRAM):   ;
22566      run;
MPRINT(EM_DIAGRAM):   run;
22567      quit;
MPRINT(EM_DIAGRAM):   quit;
22568      /* Reset EM Options */
22569      options formchar="|----|+|---+=|-/\<>*";
MPRINT(EM_DIAGRAM):   options formchar="|----|+|---+=|-/\<>*";
22570      options nocenter ls=256 ps=10000;
MPRINT(EM_DIAGRAM):   options nocenter ls=256 ps=10000;
22571      goptions reset=all device=GIF NODISPLAY;
MPRINT(EM_DIAGRAM):   goptions reset=all device=GIF NODISPLAY;
MPRINT(EM_DIAGRAM):    proc printto;
MPRINT(EM_DIAGRAM):   run;
