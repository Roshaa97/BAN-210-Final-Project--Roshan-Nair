MPRINT(EM_DIAGRAM):    data _null_;
MPRINT(EM_DIAGRAM):   call symput('NLDATE', strip(put(date(), NLDATE.)));
MPRINT(EM_DIAGRAM):   call symput('NLTIME', strip(put(datetime(), NLTIME.)));
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   data _null_;
MPRINT(EM_DIAGRAM):   nldate= sasmsg("sashelp.dmine", "log_date_note", 'N', "August 11, 2022" );
MPRINT(EM_DIAGRAM):   nltime= sasmsg("sashelp.dmine", "log_time_note", 'N', "14:23:13" );
MPRINT(EM_DIAGRAM):   put "*------------------------------------------------------------*";
MPRINT(EM_DIAGRAM):   put "* Score Log";
MPRINT(EM_DIAGRAM):   put nldate;
MPRINT(EM_DIAGRAM):   put nltime;
MPRINT(EM_DIAGRAM):   put "*------------------------------------------------------------*";
MPRINT(EM_DIAGRAM):   run;
*------------------------------------------------------------*
* Score Log
Date:                August 11, 2022
Time:                14:23:13
*------------------------------------------------------------*
MPRINT(EM_DIAGRAM):    filename O0TG97E0 "C:\Users\AutoLogon\Desktop\Roshan Seneca\SEM 2\ROSHAN SEM 2\BAN 210\Final Project\Final Project-Roshan Nair\Workspaces\EMWS2\Trans\EMSCORE.out" encoding="UTF-8" NOBOM;
MPRINT(EM_DIAGRAM):   proc printto print=O0TG97E0 new;
MPRINT(EM_DIAGRAM):   run;
22115      proc sort data=EMWS2.Trans_RESULT out=WORK.TransRESULT NOTHREADS;
MPRINT(EM_DIAGRAM):    proc sort data=EMWS2.Trans_RESULT out=WORK.TransRESULT NOTHREADS;
22116      by INPUTNAME;
MPRINT(EM_DIAGRAM):   by INPUTNAME;
22117      run;
MPRINT(EM_DIAGRAM):   run;

NOTE: There were 3 observations read from the data set EMWS2.TRANS_RESULT.
NOTE: The data set WORK.TRANSRESULT has 3 observations and 11 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
      

22118      proc sort data=EMWS2.Trans_VariableSet(KEEP= NAME FAMILY REPORT rename=(NAME=INPUTNAME)) out=WORK.TransVARSET NOTHREADS;
MPRINT(EM_DIAGRAM):   proc sort data=EMWS2.Trans_VariableSet(KEEP= NAME FAMILY REPORT rename=(NAME=INPUTNAME)) out=WORK.TransVARSET NOTHREADS;
22119      by INPUTNAME;
MPRINT(EM_DIAGRAM):   by INPUTNAME;
22120      run;
MPRINT(EM_DIAGRAM):   run;

NOTE: There were 9 observations read from the data set EMWS2.TRANS_VARIABLESET.
NOTE: The data set WORK.TRANSVARSET has 9 observations and 3 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.02 seconds
      cpu time            0.03 seconds
      

22121      data WORK.TransRESULT;
MPRINT(EM_DIAGRAM):   data WORK.TransRESULT;
22122      merge WORK.TransRESULT WORK.TransVARSET;
MPRINT(EM_DIAGRAM):   merge WORK.TransRESULT WORK.TransVARSET;
22123      by INPUTNAME;
MPRINT(EM_DIAGRAM):   by INPUTNAME;
22124      if NAME ne '' then output;
MPRINT(EM_DIAGRAM):   if NAME ne '' then output;
22125      run;
MPRINT(EM_DIAGRAM):   run;

WARNING: Multiple lengths were specified for the BY variable INPUTNAME by input data sets. This might cause unexpected results.
NOTE: There were 3 observations read from the data set WORK.TRANSRESULT.
NOTE: There were 9 observations read from the data set WORK.TRANSVARSET.
NOTE: The data set WORK.TRANSRESULT has 3 observations and 13 variables.
NOTE: DATA statement used (Total process time):
      real time           0.02 seconds
      cpu time            0.01 seconds
      

22126      filename _code "C:\Users\AutoLogon\Desktop\Roshan Seneca\SEM 2\ROSHAN SEM 2\BAN 210\Final Project\Final Project-Roshan Nair\Workspaces\EMWS2\Trans\TRAINDELTACODE.sas";
MPRINT(EM_DIAGRAM):   filename _code "C:\Users\AutoLogon\Desktop\Roshan Seneca\SEM 2\ROSHAN SEM 2\BAN 210\Final Project\Final Project-Roshan Nair\Workspaces\EMWS2\Trans\TRAINDELTACODE.sas";
22127      data _null_;
MPRINT(EM_DIAGRAM):   data _null_;
22128      set WORK.TransRESULT;
MPRINT(EM_DIAGRAM):   set WORK.TransRESULT;
22129      length String $200;
MPRINT(EM_DIAGRAM):   length String $200;
22130      file _code;
MPRINT(EM_DIAGRAM):   file _code;
22131      String = 'if NAME="'!!strip(name)!!'" then do;';
MPRINT(EM_DIAGRAM):   String = 'if NAME="'!!strip(name)!!'" then do;';
22132      put / String;
MPRINT(EM_DIAGRAM):   put / String;
22133      if family ne '' then do;
MPRINT(EM_DIAGRAM):   if family ne '' then do;
22134      String = '   FAMILY ="'!!strip(family)!!'";';
MPRINT(EM_DIAGRAM):   String = '   FAMILY ="'!!strip(family)!!'";';
22135      put String;
MPRINT(EM_DIAGRAM):   put String;
22136      end;
MPRINT(EM_DIAGRAM):   end;
22137      select(formula);
MPRINT(EM_DIAGRAM):   select(formula);
22138      when('Interaction') put '   FAMILY  ="INTERACTION";';
MPRINT(EM_DIAGRAM):   when('Interaction') put '   FAMILY  ="INTERACTION";';
22139      when('') put '   COMMENT = "' method 'transformation of ' INPUTVAR '";';
MPRINT(EM_DIAGRAM):   when('') put '   COMMENT = "' method 'transformation of ' INPUTVAR '";';
22140      otherwise put '   COMMENT = "' formula '";';
MPRINT(EM_DIAGRAM):   otherwise put '   COMMENT = "' formula '";';
22141      end;
MPRINT(EM_DIAGRAM):   end;
22142      String = '   ROLE ="'!!strip(role)!!'";';
MPRINT(EM_DIAGRAM):   String = '   ROLE ="'!!strip(role)!!'";';
22143      put String;
MPRINT(EM_DIAGRAM):   put String;
22144      if REPORT="" then REPORT = "N";
MPRINT(EM_DIAGRAM):   if REPORT="" then REPORT = "N";
22145      String = '   REPORT ="'!!strip(report)!!'";';
MPRINT(EM_DIAGRAM):   String = '   REPORT ="'!!strip(report)!!'";';
22146      put String;
MPRINT(EM_DIAGRAM):   put String;
22147      String = '   LEVEL  ="'!!strip(level)!!'";';
MPRINT(EM_DIAGRAM):   String = '   LEVEL  ="'!!strip(level)!!'";';
22148      put String;
MPRINT(EM_DIAGRAM):   put String;
22149      put 'end;';
MPRINT(EM_DIAGRAM):   put 'end;';
22150      if formula ne 'Interaction' and INPUTNAME ne '' then do;
MPRINT(EM_DIAGRAM):   if formula ne 'Interaction' and INPUTNAME ne '' then do;
22151      String = 'if NAME="'!!strip(INPUTNAME)!!'" then delete;';
MPRINT(EM_DIAGRAM):   String = 'if NAME="'!!strip(INPUTNAME)!!'" then delete;';
22152      put String;
MPRINT(EM_DIAGRAM):   put String;
22153      end;
MPRINT(EM_DIAGRAM):   end;
22154      run;
MPRINT(EM_DIAGRAM):   run;

NOTE: Variable method is uninitialized.
NOTE: Variable INPUTVAR is uninitialized.
NOTE: The file _CODE is:
      Filename=C:\Users\AutoLogon\Desktop\Roshan Seneca\SEM 2\ROSHAN SEM 2\BAN 210\Final Project\Final Project-Roshan Nair\Workspaces\EMWS2\Trans\TRAINDELTACODE.sas,
      RECFM=V,LRECL=32767,File Size (bytes)=0,
      Last Modified=11Aug2022:14:23:12,
      Create Time=11Aug2022:14:23:12

NOTE: 24 records were written to the file _CODE.
      The minimum record length was 0.
      The maximum record length was 54.
NOTE: There were 3 observations read from the data set WORK.TRANSRESULT.
NOTE: DATA statement used (Total process time):
      real time           0.02 seconds
      cpu time            0.01 seconds
      

22155      filename _code;
MPRINT(EM_DIAGRAM):   filename _code;
NOTE: Fileref _CODE has been deassigned.
22156      filename emflow "C:\Users\AutoLogon\Desktop\Roshan Seneca\SEM 2\ROSHAN SEM 2\BAN 210\Final Project\Final Project-Roshan Nair\Workspaces\EMWS2\Trans\EMFLOWSCORE.sas";
MPRINT(EM_DIAGRAM):    filename emflow "C:\Users\AutoLogon\Desktop\Roshan Seneca\SEM 2\ROSHAN SEM 2\BAN 210\Final Project\Final Project-Roshan Nair\Workspaces\EMWS2\Trans\EMFLOWSCORE.sas";
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * Trans: Scoring DATA data;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
22157      *------------------------------------------------------------*;
22158      * Trans: Scoring DATA data;
22159      *------------------------------------------------------------*;
22160      data EMWS2.Trans_TRAIN
22161      / view=EMWS2.Trans_TRAIN
22162      ;
MPRINT(EM_DIAGRAM):   data EMWS2.Trans_TRAIN / view=EMWS2.Trans_TRAIN ;
22163      set EMWS2.Part_TRAIN
22164      ;
MPRINT(EM_DIAGRAM):   set EMWS2.Part_TRAIN ;
22165      %inc emflow;
NOTE: %INCLUDE (level 1) file EMFLOW is file C:\Users\AutoLogon\Desktop\Roshan Seneca\SEM 2\ROSHAN SEM 2\BAN 210\Final Project\Final Project-Roshan Nair\Workspaces\EMWS2\Trans\EMFLOWSCORE.sas.
22166     +*------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
22167     +* Computed Code;
MPRINT(EM_DIAGRAM):   * Computed Code;
22168     +*------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
22169     +*------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
22170     +* TRANSFORM: cylinders , sqrt(max(cylinders-3, 0.0)/5);
MPRINT(EM_DIAGRAM):   * TRANSFORM: cylinders , sqrt(max(cylinders-3, 0.0)/5);
22171     +*------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
22172     +drop Trans_SCALEVAR_1;
MPRINT(EM_DIAGRAM):   drop Trans_SCALEVAR_1;
22173     +label SQRT_cylinders = 'Transformed cylinders';
MPRINT(EM_DIAGRAM):   label SQRT_cylinders = 'Transformed cylinders';
22174     +if cylinders eq . then SQRT_cylinders = .;
MPRINT(EM_DIAGRAM):   if cylinders eq . then SQRT_cylinders = .;
22175     +else do;
MPRINT(EM_DIAGRAM):   else do;
22176     +Trans_SCALEVAR_1 = max(cylinders-3, 0.0)/5;
MPRINT(EM_DIAGRAM):   Trans_SCALEVAR_1 = max(cylinders-3, 0.0)/5;
22177     +if Trans_SCALEVAR_1 >= 0 then SQRT_cylinders = Sqrt(Trans_SCALEVAR_1);
MPRINT(EM_DIAGRAM):   if Trans_SCALEVAR_1 >= 0 then SQRT_cylinders = Sqrt(Trans_SCALEVAR_1);
22178     +else SQRT_cylinders = .;
MPRINT(EM_DIAGRAM):   else SQRT_cylinders = .;
22179     +end;
MPRINT(EM_DIAGRAM):   end;
22180     +*------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
22181     +* TRANSFORM: displacement , (max(displacement-68, 0.0)/387)**0.25;
MPRINT(EM_DIAGRAM):   * TRANSFORM: displacement , (max(displacement-68, 0.0)/387)**0.25;
22182     +*------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
22183     +drop Trans_SCALEVAR_2;
MPRINT(EM_DIAGRAM):   drop Trans_SCALEVAR_2;
22184     +label PWR_displacement = 'Transformed displacement';
MPRINT(EM_DIAGRAM):   label PWR_displacement = 'Transformed displacement';
22185     +if displacement eq . then PWR_displacement = .;
MPRINT(EM_DIAGRAM):   if displacement eq . then PWR_displacement = .;
22186     +else do;
MPRINT(EM_DIAGRAM):   else do;
22187     +Trans_SCALEVAR_2 = max(displacement-68, 0.0)/387;
MPRINT(EM_DIAGRAM):   Trans_SCALEVAR_2 = max(displacement-68, 0.0)/387;
22188     +PWR_displacement = (Trans_SCALEVAR_2)**0.25;
MPRINT(EM_DIAGRAM):   PWR_displacement = (Trans_SCALEVAR_2)**0.25;
22189     +end;
MPRINT(EM_DIAGRAM):   end;
22190     +*------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
22191     +* TRANSFORM: weight , sqrt(max(weight-1613, 0.0)/3527);
MPRINT(EM_DIAGRAM):   * TRANSFORM: weight , sqrt(max(weight-1613, 0.0)/3527);
22192     +*------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
22193     +drop Trans_SCALEVAR_5;
MPRINT(EM_DIAGRAM):   drop Trans_SCALEVAR_5;
22194     +label SQRT_weight = 'Transformed weight';
MPRINT(EM_DIAGRAM):   label SQRT_weight = 'Transformed weight';
22195     +if weight eq . then SQRT_weight = .;
MPRINT(EM_DIAGRAM):   if weight eq . then SQRT_weight = .;
22196     +else do;
MPRINT(EM_DIAGRAM):   else do;
22197     +Trans_SCALEVAR_5 = max(weight-1613, 0.0)/3527;
MPRINT(EM_DIAGRAM):   Trans_SCALEVAR_5 = max(weight-1613, 0.0)/3527;
22198     +if Trans_SCALEVAR_5 >= 0 then SQRT_weight = Sqrt(Trans_SCALEVAR_5);
MPRINT(EM_DIAGRAM):   if Trans_SCALEVAR_5 >= 0 then SQRT_weight = Sqrt(Trans_SCALEVAR_5);
22199     +else SQRT_weight = .;
MPRINT(EM_DIAGRAM):   else SQRT_weight = .;
22200     +end;
MPRINT(EM_DIAGRAM):   end;
NOTE: %INCLUDE (level 1) ending.
MPRINT(EM_DIAGRAM):   run;
22201      run;

NOTE: DATA STEP view saved on file EMWS2.TRANS_TRAIN.
NOTE: A stored DATA STEP view cannot run under a different operating system.
NOTE: DATA statement used (Total process time):
      real time           0.02 seconds
      cpu time            0.03 seconds
      

MPRINT(EM_DIAGRAM):   quit;
22202      quit;
22203      filename emflow;
MPRINT(EM_DIAGRAM):   filename emflow;
NOTE: Fileref EMFLOW has been deassigned.
22204      filename emflow "C:\Users\AutoLogon\Desktop\Roshan Seneca\SEM 2\ROSHAN SEM 2\BAN 210\Final Project\Final Project-Roshan Nair\Workspaces\EMWS2\Trans\EMFLOWSCORE.sas";
MPRINT(EM_DIAGRAM):    filename emflow "C:\Users\AutoLogon\Desktop\Roshan Seneca\SEM 2\ROSHAN SEM 2\BAN 210\Final Project\Final Project-Roshan Nair\Workspaces\EMWS2\Trans\EMFLOWSCORE.sas";
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * Trans: Scoring VALIDATE data;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
22205      *------------------------------------------------------------*;
22206      * Trans: Scoring VALIDATE data;
22207      *------------------------------------------------------------*;
22208      data EMWS2.Trans_VALIDATE
22209      / view=EMWS2.Trans_VALIDATE
22210      ;
MPRINT(EM_DIAGRAM):   data EMWS2.Trans_VALIDATE / view=EMWS2.Trans_VALIDATE ;
22211      set EMWS2.Part_VALIDATE
22212      ;
MPRINT(EM_DIAGRAM):   set EMWS2.Part_VALIDATE ;
22213      %inc emflow;
NOTE: %INCLUDE (level 1) file EMFLOW is file C:\Users\AutoLogon\Desktop\Roshan Seneca\SEM 2\ROSHAN SEM 2\BAN 210\Final Project\Final Project-Roshan Nair\Workspaces\EMWS2\Trans\EMFLOWSCORE.sas.
22214     +*------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
22215     +* Computed Code;
MPRINT(EM_DIAGRAM):   * Computed Code;
22216     +*------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
22217     +*------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
22218     +* TRANSFORM: cylinders , sqrt(max(cylinders-3, 0.0)/5);
MPRINT(EM_DIAGRAM):   * TRANSFORM: cylinders , sqrt(max(cylinders-3, 0.0)/5);
22219     +*------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
22220     +drop Trans_SCALEVAR_1;
MPRINT(EM_DIAGRAM):   drop Trans_SCALEVAR_1;
22221     +label SQRT_cylinders = 'Transformed cylinders';
MPRINT(EM_DIAGRAM):   label SQRT_cylinders = 'Transformed cylinders';
22222     +if cylinders eq . then SQRT_cylinders = .;
MPRINT(EM_DIAGRAM):   if cylinders eq . then SQRT_cylinders = .;
22223     +else do;
MPRINT(EM_DIAGRAM):   else do;
22224     +Trans_SCALEVAR_1 = max(cylinders-3, 0.0)/5;
MPRINT(EM_DIAGRAM):   Trans_SCALEVAR_1 = max(cylinders-3, 0.0)/5;
22225     +if Trans_SCALEVAR_1 >= 0 then SQRT_cylinders = Sqrt(Trans_SCALEVAR_1);
MPRINT(EM_DIAGRAM):   if Trans_SCALEVAR_1 >= 0 then SQRT_cylinders = Sqrt(Trans_SCALEVAR_1);
22226     +else SQRT_cylinders = .;
MPRINT(EM_DIAGRAM):   else SQRT_cylinders = .;
22227     +end;
MPRINT(EM_DIAGRAM):   end;
22228     +*------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
22229     +* TRANSFORM: displacement , (max(displacement-68, 0.0)/387)**0.25;
MPRINT(EM_DIAGRAM):   * TRANSFORM: displacement , (max(displacement-68, 0.0)/387)**0.25;
22230     +*------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
22231     +drop Trans_SCALEVAR_2;
MPRINT(EM_DIAGRAM):   drop Trans_SCALEVAR_2;
22232     +label PWR_displacement = 'Transformed displacement';
MPRINT(EM_DIAGRAM):   label PWR_displacement = 'Transformed displacement';
22233     +if displacement eq . then PWR_displacement = .;
MPRINT(EM_DIAGRAM):   if displacement eq . then PWR_displacement = .;
22234     +else do;
MPRINT(EM_DIAGRAM):   else do;
22235     +Trans_SCALEVAR_2 = max(displacement-68, 0.0)/387;
MPRINT(EM_DIAGRAM):   Trans_SCALEVAR_2 = max(displacement-68, 0.0)/387;
22236     +PWR_displacement = (Trans_SCALEVAR_2)**0.25;
MPRINT(EM_DIAGRAM):   PWR_displacement = (Trans_SCALEVAR_2)**0.25;
22237     +end;
MPRINT(EM_DIAGRAM):   end;
22238     +*------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
22239     +* TRANSFORM: weight , sqrt(max(weight-1613, 0.0)/3527);
MPRINT(EM_DIAGRAM):   * TRANSFORM: weight , sqrt(max(weight-1613, 0.0)/3527);
22240     +*------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
22241     +drop Trans_SCALEVAR_5;
MPRINT(EM_DIAGRAM):   drop Trans_SCALEVAR_5;
22242     +label SQRT_weight = 'Transformed weight';
MPRINT(EM_DIAGRAM):   label SQRT_weight = 'Transformed weight';
22243     +if weight eq . then SQRT_weight = .;
MPRINT(EM_DIAGRAM):   if weight eq . then SQRT_weight = .;
22244     +else do;
MPRINT(EM_DIAGRAM):   else do;
22245     +Trans_SCALEVAR_5 = max(weight-1613, 0.0)/3527;
MPRINT(EM_DIAGRAM):   Trans_SCALEVAR_5 = max(weight-1613, 0.0)/3527;
22246     +if Trans_SCALEVAR_5 >= 0 then SQRT_weight = Sqrt(Trans_SCALEVAR_5);
MPRINT(EM_DIAGRAM):   if Trans_SCALEVAR_5 >= 0 then SQRT_weight = Sqrt(Trans_SCALEVAR_5);
22247     +else SQRT_weight = .;
MPRINT(EM_DIAGRAM):   else SQRT_weight = .;
22248     +end;
MPRINT(EM_DIAGRAM):   end;
NOTE: %INCLUDE (level 1) ending.
MPRINT(EM_DIAGRAM):   run;
22249      run;

NOTE: DATA STEP view saved on file EMWS2.TRANS_VALIDATE.
NOTE: A stored DATA STEP view cannot run under a different operating system.
NOTE: DATA statement used (Total process time):
      real time           0.03 seconds
      cpu time            0.03 seconds
      

MPRINT(EM_DIAGRAM):   quit;
22250      quit;
22251      filename emflow;
MPRINT(EM_DIAGRAM):   filename emflow;
NOTE: Fileref EMFLOW has been deassigned.
22252      *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):    *------------------------------------------------------------*;
22253      * Trans: Computing metadata for TRAIN data;
MPRINT(EM_DIAGRAM):   * Trans: Computing metadata for TRAIN data;
22254      *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;

NOTE: View EMWS2.TRANS_TRAIN.VIEW used (Total process time):
      real time           0.05 seconds
      cpu time            0.04 seconds
      
MPRINT(EM_DIAGRAM):    *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * &nodeid: Computing Metadata for TRAIN data;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   filename _delta "C:\Users\AutoLogon\Desktop\Roshan Seneca\SEM 2\ROSHAN SEM 2\BAN 210\Final Project\Final Project-Roshan Nair\Workspaces\EMWS2\Trans\CDELTA_TRAIN.sas";
MPRINT(EMADVISECOLUMNS):   proc display c=sashelp.emmeta.advisecolumns.scl;
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):    options validvarname=any;
MPRINT(EMADVISECOLUMNS):   proc contents data=EMWS2.Trans_TRAIN out=_tempAdvisor noprint;
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):   options validvarname=V7;
MPRINT(EMADVISECOLUMNS):    data _null_;
MPRINT(EMADVISECOLUMNS):   dsid = open('EMWS2.Trans_TRAIN');
MPRINT(EMADVISECOLUMNS):   call symput('_dsidTable', strip(put(dsid, best.)));
MPRINT(EMADVISECOLUMNS):   if dsid then do;
MPRINT(EMADVISECOLUMNS):   call symput('_engineTable', attrc(dsid, 'ENGINE'));
MPRINT(EMADVISECOLUMNS):   dsid = close(dsid);
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):    proc contents data=EMWS2.Trans_TRAIN out=WORK.M0S6GS2L noprint;
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):    data WORK.M0S6GS2L;
MPRINT(EMADVISECOLUMNS):   length NAME $ 64 TYPE $ 1 LABEL $ 200 FORMAT $ 36 INFORMAT $36 INDEX $ 1 INDEXTYPE $ 9;
MPRINT(EMADVISECOLUMNS):   label NAME =;
MPRINT(EMADVISECOLUMNS):   set WORK.M0S6GS2L(keep=name type length label format formatl formatd informat informl informd idxusage rename=(type=itype));
MPRINT(EMADVISECOLUMNS):   if itype = 1 then type = 'N';
MPRINT(EMADVISECOLUMNS):   else type = 'C';
MPRINT(EMADVISECOLUMNS):   if formatl > 0 then do;
MPRINT(EMADVISECOLUMNS):   if format ne '' then do;
MPRINT(EMADVISECOLUMNS):   if type='N' then format = strip(format)!!strip(put(formatl, best12.))!!'.'!!strip(put(formatd, best12.));
MPRINT(EMADVISECOLUMNS):   else format = strip(format)!!strip(put(formatl, best12.))!!'.';
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else format = strip(put(formatl, best12.))!!'.'!!strip(put(formatd, best12.));
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else if format ne '' then format = strip(format)!!'.';
MPRINT(EMADVISECOLUMNS):   if informl > 0 then do;
MPRINT(EMADVISECOLUMNS):   if informat ne ' ' then do;
MPRINT(EMADVISECOLUMNS):   if type='N' then informat = strip(informat)!!strip(put(informl, best12.))!!'.'!!strip(put(informd, best12.));
MPRINT(EMADVISECOLUMNS):   else informat = strip(informat)!!strip(put(informl, best12.))!!'.';
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else informat = strip(put(informl, best12.))!!'.'!!strip(put(informd, best12.));
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else if informat ne '' then informat = strip(informat)!!'.';
MPRINT(EMADVISECOLUMNS):   if idxusage = 'NONE' then index ="N";
MPRINT(EMADVISECOLUMNS):   else index = "Y";
MPRINT(EMADVISECOLUMNS):   indextype = idxusage;
MPRINT(EMADVISECOLUMNS):   drop idxusage itype formatl formatd informl informd;
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):    data WORK.M0S6GS2L;
MPRINT(EMADVISECOLUMNS):   length UNAME $64;
MPRINT(EMADVISECOLUMNS):   set WORK.M0S6GS2L;
MPRINT(EMADVISECOLUMNS):   UNAME = upcase(NAME);
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):    proc sort data=WORK.M3LIM29B NOTHREADS;
MPRINT(EMADVISECOLUMNS):   by UNAME;
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):    data WORK.M3LIM29B;
MPRINT(EMADVISECOLUMNS):   drop UNAME;
MPRINT(EMADVISECOLUMNS):   set WORK.M3LIM29B;
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):    data WORK.M1TFJAP3(keep=NAME ATTR);
MPRINT(EMADVISECOLUMNS):   length ATTR $ 20;
MPRINT(EMADVISECOLUMNS):   set WORK.M3LIM29B;
MPRINT(EMADVISECOLUMNS):   if level ne "INTERVAL" then do;
MPRINT(EMADVISECOLUMNS):   if order = ' ' then do;
MPRINT(EMADVISECOLUMNS):   attr = 'ORDER';
MPRINT(EMADVISECOLUMNS):   output;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   if format ne ' ' and formattype = ' ' then do;
MPRINT(EMADVISECOLUMNS):   attr = 'FORMATTYPE';
MPRINT(EMADVISECOLUMNS):   output;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   if role = ' ' then do;
MPRINT(EMADVISECOLUMNS):   attr = 'ROLE';
MPRINT(EMADVISECOLUMNS):   output;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   if level = ' ' then do;
MPRINT(EMADVISECOLUMNS):   attr = 'LEVEL';
MPRINT(EMADVISECOLUMNS):   output;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   if type = ' ' then do;
MPRINT(EMADVISECOLUMNS):   attr = 'TYPE';
MPRINT(EMADVISECOLUMNS):   output;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   if index = ' ' then do;
MPRINT(EMADVISECOLUMNS):   attr = 'INDEX';
MPRINT(EMADVISECOLUMNS):   output;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   if report = ' ' then do;
MPRINT(EMADVISECOLUMNS):   attr = 'REPORT';
MPRINT(EMADVISECOLUMNS):   output;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):   proc sort NOTHREADS;
MPRINT(EMADVISECOLUMNS):   by attr;
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):    data WORK.M3LIM29B;
MPRINT(EMADVISECOLUMNS):   length NAME $64 ROLE $ 32 LEVEL $ 10 ORDER $ 8 CREATOR $32 FORMATTYPE $ 10 FAMILY $ 10 LOWERLIMIT 8 UPPERLIMIT 8 REPORT $1 DISTRIBUTION $ 20 COMMENT $64;
MPRINT(EMADVISECOLUMNS):   length levelAssigned 8 roleAssigned 8 PRICE 8;
MPRINT(EMADVISECOLUMNS):   set WORK.M3LIM29B;
MPRINT(EMADVISECOLUMNS):   if formattype = ' ' then do;
MPRINT(EMADVISECOLUMNS):   if format ne ' ' then do;
MPRINT(EMADVISECOLUMNS):   if type = 'N' then do;
MPRINT(EMADVISECOLUMNS):   pos = indexc(format,'.1234567890');
MPRINT(EMADVISECOLUMNS):   if pos > 1 then tempfmt = substr(format,1, pos-1);
MPRINT(EMADVISECOLUMNS):   else tempfmt = ' ';
MPRINT(EMADVISECOLUMNS):   flen = length(tempfmt);
MPRINT(EMADVISECOLUMNS):   select;
MPRINT(EMADVISECOLUMNS):   when(tempfmt in ("DATE" "DAY" "DDMMYY" "DOWNAME" "JULDAY" "JULIAN" "MMDDYY" "MMDDYYD" "MMDDYYC" "MMDDYYN" "MMDDYYP" "MMDDYYS" "MONNAME" "MONTH" "MONYY" "NENGO" "QTR" "QTRR" "WEEKDATE" "WEEKDATX" "WEEKDAY" "WORDDATE" "WORDDATX" 
"YEAR" "YYMMDD" "YYMON" "YYMMDDC" "YYMMDDD" "YYMMDDN" "YYMMDDP" "YYMMDDS" "EURDFDE" "NJDATE" "NLDATE" "EURDFDD" "EURDFDWN" "EURDFMN" "EURDFMY" "EURDFWK" "EURDFWKX" "EURDFWDX" "EURDFDN" "EURDFDE" )) formattype = 'DATE';
MPRINT(EMADVISECOLUMNS):   when(tempfmt in ("DATETIME" "EURDFDT" "TOD" )) formattype = "DATETIME";
MPRINT(EMADVISECOLUMNS):   when(tempfmt in ("HHMM" "HOUR" "MMSS" "TIME" "TIMEAMPM" )) formattype = "TIME";
MPRINT(EMADVISECOLUMNS):   when(tempfmt in ("COMMA" "COMMAX" "DOLLAR" "DOLLARX" "E" "FRACT" "NEGPAREN" "PERCENT")) formattype="QUANTITY";
MPRINT(EMADVISECOLUMNS):   when(tempfmt in ("BINARY" "HEX" "IB" "OCTAL" "PD" "PIB" "PK" "RB" "SSN" "Z" "ZD")) formattype = "CODING";
MPRINT(EMADVISECOLUMNS):   otherwise do;
MPRINT(EMADVISECOLUMNS):   formattype = "USER";
MPRINT(EMADVISECOLUMNS):   if compress(tempfmt, '0123456789.', '') = '' then formattype='NUM';
MPRINT(EMADVISECOLUMNS):   else if substr(tempfmt, 1, 6)='NLDATE' then formattype = "DATE";
MPRINT(EMADVISECOLUMNS):   else if substr(tempfmt, 1, 6)='NLDATM' then formattype = "DATETIME";
MPRINT(EMADVISECOLUMNS):   else if substr(tempfmt, 1, 4)='NLTIM' then formattype = "TIME";
MPRINT(EMADVISECOLUMNS):   else if flen >= 4 then do;
MPRINT(EMADVISECOLUMNS):   str = substr(tempfmt,1,4);
MPRINT(EMADVISECOLUMNS):   if str in ("MMYY" "YYMM" "YYQR") then formattype ="DATE";
MPRINT(EMADVISECOLUMNS):   else if str = "S370" then formattype = "CODING";
MPRINT(EMADVISECOLUMNS):   else if str = "BEST" then formattype = "NUM";
MPRINT(EMADVISECOLUMNS):   drop str;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else if flen >=3 and substr(tempfmt,1,3) = "YYQ" then formatType = "DATE";
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   drop flen tempfmt pos;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else do;
MPRINT(EMADVISECOLUMNS):   formatType = "CATEGORY";
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   if formatType = "NUM" then do;
MPRINT(EMADVISECOLUMNS):   if index = "Y" then formatType = "DISCRETE";
MPRINT(EMADVISECOLUMNS):   else formatType = "QUANTITY";
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   if level = ' ' then do;
MPRINT(EMADVISECOLUMNS):   if formatType in ("CATEGORY", "CODING", "ID") or type = "C" then level = "NOMINAL";
MPRINT(EMADVISECOLUMNS):   else level = "INTERVAL";
MPRINT(EMADVISECOLUMNS):   levelAssigned = 1;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else level = upcase(level);
MPRINT(EMADVISECOLUMNS):   if role = ' ' then do;
MPRINT(EMADVISECOLUMNS):   length name_prefix $8 _uname $64;
MPRINT(EMADVISECOLUMNS):   drop name_prefix _uname _freqflag;
MPRINT(EMADVISECOLUMNS):   retain _freqflag;
MPRINT(EMADVISECOLUMNS):   if LENGTH> 80 then ROLE = 'TEXT';
MPRINT(EMADVISECOLUMNS):   _uname = upcase(NAME);
MPRINT(EMADVISECOLUMNS):   select(_uname);
MPRINT(EMADVISECOLUMNS):   when('_PARTIND_') do;
MPRINT(EMADVISECOLUMNS):   ROLE = 'ID';
MPRINT(EMADVISECOLUMNS):   LEVEL = 'NOMINAL';
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   when('_WARN_') ROLE = 'ASSESS';
MPRINT(EMADVISECOLUMNS):   when('EM_SEGMENT') do;
MPRINT(EMADVISECOLUMNS):   ROLE = 'SEGMENT';
MPRINT(EMADVISECOLUMNS):   LEVEL = 'NOMINAL';
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   when('_NODE_') do;
MPRINT(EMADVISECOLUMNS):   ROLE = 'SEGMENT';
MPRINT(EMADVISECOLUMNS):   LEVEL = 'NOMINAL';
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   when('EM_CLASSTARGET') ROLE = 'ASSESS';
MPRINT(EMADVISECOLUMNS):   when('EM_VALUETARGET') ROLE = 'ASSESS';
MPRINT(EMADVISECOLUMNS):   when('EM_PREDICTION') ROLE = 'PREDICT';
MPRINT(EMADVISECOLUMNS):   when('EM_PROBABILITY') ROLE = 'PREDICT';
MPRINT(EMADVISECOLUMNS):   when('EM_EVENTPROBABILITY') ROLE = 'PREDICT';
MPRINT(EMADVISECOLUMNS):   when('EM_CLASSIFICATION') ROLE = 'CLASSIFICATION';
MPRINT(EMADVISECOLUMNS):   when('EM_DECISION') ROLE = 'DECISION';
MPRINT(EMADVISECOLUMNS):   when('EM_PROFIT') ROLE = 'ASSESS';
MPRINT(EMADVISECOLUMNS):   when('EM_LOSS') ROLE = 'ASSESS';
MPRINT(EMADVISECOLUMNS):   when('EM_ROI') ROLE = 'ASSESS';
MPRINT(EMADVISECOLUMNS):   when('URI') ROLE = 'URL';
MPRINT(EMADVISECOLUMNS):   when('FILTERED') ROLE = 'TEXTLOC';
MPRINT(EMADVISECOLUMNS):   otherwise do;
MPRINT(EMADVISECOLUMNS):   if upcase(NAME) =: 'ZIP' then do;
MPRINT(EMADVISECOLUMNS):   ROLE = 'REJECTED';
MPRINT(EMADVISECOLUMNS):   LEVEL = 'NOMINAL';
MPRINT(EMADVISECOLUMNS):   COMMENT = 'Rejected by: Exceed the maximum class level of %s';
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else if upcase(NAME) in('FREQ', 'FREQUENCY') then do;
MPRINT(EMADVISECOLUMNS):   ROLE = 'FREQ';
MPRINT(EMADVISECOLUMNS):   if TYPE = 'C' then ROLE = 'INPUT';
MPRINT(EMADVISECOLUMNS):   else if _freqflag =1 then ROLE='REJECTED';
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else do;
MPRINT(EMADVISECOLUMNS):   name_prefix = scan(_uname, 1, '_');
MPRINT(EMADVISECOLUMNS):   if scan(_uname, 2, '_') = '' then name_prefix='';
MPRINT(EMADVISECOLUMNS):   if name_prefix in('F', 'I', 'U') then do;
MPRINT(EMADVISECOLUMNS):   ROLE = 'CLASSIFICATION';
MPRINT(EMADVISECOLUMNS):   LEVEL = 'NOMINAL';
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else if name_prefix in('Q') then ROLE = 'ASSESS';
MPRINT(EMADVISECOLUMNS):   else if name_prefix in('P', 'V') then ROLE = 'PREDICT';
MPRINT(EMADVISECOLUMNS):   else if name_prefix in('R', 'RS', 'RT', 'RD', 'RDS', 'RDT', 'RA', 'RAS', 'RAT') then ROLE = 'RESIDUAL';
MPRINT(EMADVISECOLUMNS):   else if name_prefix ='D' then do;
MPRINT(EMADVISECOLUMNS):   ROLE = 'DECISION';
MPRINT(EMADVISECOLUMNS):   LEVEL = 'NOMINAL';
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else if name_prefix ='B' then do;
MPRINT(EMADVISECOLUMNS):   ROLE = 'SEGMENT';
MPRINT(EMADVISECOLUMNS):   LEVEL = 'NOMINAL';
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else if name_prefix in('EP', 'BP', 'CP', 'EL', 'CL', 'BL', 'W', 'ROI', 'IC') then ROLE = 'ASSESS';
MPRINT(EMADVISECOLUMNS):   else do;
MPRINT(EMADVISECOLUMNS):   array _ROLE_ (19) $32 _TEMPORARY_ ('ASSESS','CLASSIFICATION','CENSOR', 'COST', 'CROSSID', 'DECISION', 'ID','INPUT', 'LABEL', 'MISSING','PREDICT','REFERRER','REJECTED', 'RESIDUAL','SEGMENT', 'SEQUENCE','TARGET', 'TEXT', 'TIMEID');
MPRINT(EMADVISECOLUMNS):   drop _found_ i;
MPRINT(EMADVISECOLUMNS):   _found_=0;
MPRINT(EMADVISECOLUMNS):   do i=1 to 19 until(_found_=1);
MPRINT(EMADVISECOLUMNS):   if index(_uname, trim(_ROLE_{i}))=1 then do;
MPRINT(EMADVISECOLUMNS):   ROLE=_ROLE_{i};
MPRINT(EMADVISECOLUMNS):   if ROLE = 'ID' then LEVEL = 'NOMINAL';
MPRINT(EMADVISECOLUMNS):   else if ROLE = 'SEGMENT' then LEVEL = 'NOMINAL';
MPRINT(EMADVISECOLUMNS):   else if ROLE = 'TIMEID' and TYPE='N' then LEVEL = 'INTERVAL';
MPRINT(EMADVISECOLUMNS):   _found_=1;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   if length(_uname)>2 then do;
MPRINT(EMADVISECOLUMNS):   if substr(reverse(trim(_uname)), 1, 3) = 'DI_' then do;
MPRINT(EMADVISECOLUMNS):   ROLE = 'ID';
MPRINT(EMADVISECOLUMNS):   LEVEL = 'NOMINAL';
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   if ROLE='FREQ' then _freqflag=1;
MPRINT(EMADVISECOLUMNS):   else if ROLE = 'CLASSIFICATION' then LEVEL = 'NOMINAL';
MPRINT(EMADVISECOLUMNS):   if symexist('RATEMKG_ROLE') then do;
MPRINT(EMADVISECOLUMNS):   if upcase(symget('RATEMKG_ROLE')) in('Y', 'YES') then do;
MPRINT(EMADVISECOLUMNS):   if _uname =: 'POLICY' then ROLE = 'POLICYID';
MPRINT(EMADVISECOLUMNS):   else if _uname in ('PARTITION', '_PARTIND_') then ROLE = 'PARTITION';
MPRINT(EMADVISECOLUMNS):   else if type = 'N' then do;
MPRINT(EMADVISECOLUMNS):   if _uname = 'EXPOSURE' then ROLE = 'EXPOSURE';
MPRINT(EMADVISECOLUMNS):   else if _uname = 'YEAR' then ROLE = 'YEAR';
MPRINT(EMADVISECOLUMNS):   else if _uname = 'WEIGHT' then ROLE = 'WEIGHT';
MPRINT(EMADVISECOLUMNS):   else if _uname = 'OFFSET' then ROLE = 'OFFSET';
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   if role = ' ' then do;
MPRINT(EMADVISECOLUMNS):   if formattype in('DATE', 'DATETIME', 'TIME') then role = 'TIMEID';
MPRINT(EMADVISECOLUMNS):   else role = 'INPUT';
MPRINT(EMADVISECOLUMNS):   roleAssigned = 1;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else role = upcase(role);
MPRINT(EMADVISECOLUMNS):   if REPORT = '' then REPORT = 'N';
MPRINT(EMADVISECOLUMNS):   if symexist('dmwb_product') then do;
MPRINT(EMADVISECOLUMNS):   if upcase(symget('dmwb_product')) = 'FACTORYMINER_DATASOURCE' then do;
MPRINT(EMADVISECOLUMNS):   if ROLE ^in('INPUT', 'TARGET', 'REJECTED', 'SEGMENT', 'FREQ', 'ID', 'KEY') then ROLE='REJECTED';
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):    data WORK.M3LIM29B;
MPRINT(EMADVISECOLUMNS):   set WORK.M3LIM29B;
MPRINT(EMADVISECOLUMNS):   label NAME = "Variable Name" TYPE = "Type" ROLE = "Role" LEVEL= "Measurement Level" ORDER= "Order" CREATOR= "Creator" FORMATTYPE= "Format Type" FAMILY= "Family" DISTRIBUTION= "Distribution" PRICE= "Price" LOWERLIMIT= "Lower 
limit" UPPERLIMIT= "Upper Limit" REPORT= "Report" COMMENT= "Comment" INDEX= "Index" INDEXTYPE= "IndexType" LABEL= "Label" LENGTH= "Length";
MPRINT(EMADVISECOLUMNS):   drop levelAssigned roleAssigned;
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):   
MPRINT(EM_DIAGRAM):  ;
MPRINT(EM_DIAGRAM):   proc sort data=WORK.COLUMNMETA;
MPRINT(EM_DIAGRAM):   by NAME;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * &nodeid: Merge incoming metadata;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   proc contents data=EMWS2.Part_TRAIN noprint out=_temp2(keep=NAME);
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   proc sort data=_temp2;
MPRINT(EM_DIAGRAM):   by NAME;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   proc sort data=EMWS2.Part_CMeta_TRAIN out=_temp;
MPRINT(EM_DIAGRAM):   by NAME;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   data EMWS2.Trans_CMeta_TRAIN;
MPRINT(EM_DIAGRAM):   merge WORK.COLUMNMETA(in=_a) _temp2(in=_b) _temp(drop=FORMAT INFORMAT LENGTH INDEX INDEXTYPE in=_c) end=_eof_;
MPRINT(EM_DIAGRAM):   by NAME;
MPRINT(EM_DIAGRAM):   if (^_a and _b) or (^_c and _a and _b) then delete;
MPRINT(EM_DIAGRAM):   if ^_b then CREATOR = "Trans";
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * Trans: Apply Delta Code;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * Computed Code;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   if NAME="SQRT_cylinders" then do;
MPRINT(EM_DIAGRAM):   COMMENT = "sqrt(max(cylinders-3, 0.0)/5) ";
MPRINT(EM_DIAGRAM):   ROLE ="INPUT";
MPRINT(EM_DIAGRAM):   REPORT ="N";
MPRINT(EM_DIAGRAM):   LEVEL ="INTERVAL";
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   if NAME="cylinders" then delete;
MPRINT(EM_DIAGRAM):   if NAME="PWR_displacement" then do;
MPRINT(EM_DIAGRAM):   COMMENT = "(max(displacement-68, 0.0)/387)**0.25 ";
MPRINT(EM_DIAGRAM):   ROLE ="INPUT";
MPRINT(EM_DIAGRAM):   REPORT ="N";
MPRINT(EM_DIAGRAM):   LEVEL ="INTERVAL";
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   if NAME="displacement" then delete;
MPRINT(EM_DIAGRAM):   if NAME="SQRT_weight" then do;
MPRINT(EM_DIAGRAM):   COMMENT = "sqrt(max(weight-1613, 0.0)/3527) ";
MPRINT(EM_DIAGRAM):   ROLE ="INPUT";
MPRINT(EM_DIAGRAM):   REPORT ="N";
MPRINT(EM_DIAGRAM):   LEVEL ="INTERVAL";
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   if NAME="weight" then delete;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   filename _delta;
NOTE: View EMWS2.TRANS_TRAIN.VIEW used (Total process time):
      real time           0.02 seconds
      cpu time            0.01 seconds
      
NOTE: View EMWS2.TRANS_VALIDATE.VIEW used (Total process time):
      real time           0.02 seconds
      cpu time            0.03 seconds
      
MPRINT(EM_DIAGRAM):    proc printto;
MPRINT(EM_DIAGRAM):   run;
